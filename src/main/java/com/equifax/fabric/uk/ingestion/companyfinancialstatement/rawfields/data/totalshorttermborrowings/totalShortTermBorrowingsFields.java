/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class totalShortTermBorrowingsFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"totalShortTermBorrowingsFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings\",\"fields\":[{\"name\":\"bankOverdrafts\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Overdrafts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankLoanShortTerm\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Loan short term\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankLoansOverdrafts\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Loans Overdrafts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeAndHirePurchase\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Finance And Hire Purchase\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"hirePurchase\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Hire Purchase\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeLease\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Finance Lease\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherShortTermBorrowings\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Other ShortTerm Borrowing\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Total Short Term Borrowings - Bank Overdrafts */
  @Deprecated public java.lang.CharSequence bankOverdrafts;
  /** Total Short Term Borrowings - Bank Loan short term */
  @Deprecated public java.lang.CharSequence bankLoanShortTerm;
  /** Total Short Term Borrowings - Bank Loans Overdrafts */
  @Deprecated public java.lang.CharSequence bankLoansOverdrafts;
  /** Total Short Term Borrowings - Finance And Hire Purchase */
  @Deprecated public java.lang.CharSequence financeAndHirePurchase;
  /** Total Short Term Borrowings - Hire Purchase */
  @Deprecated public java.lang.CharSequence hirePurchase;
  /** Total Short Term Borrowings - Finance Lease */
  @Deprecated public java.lang.CharSequence financeLease;
  /** Total Short Term Borrowings - Other ShortTerm Borrowing */
  @Deprecated public java.lang.CharSequence otherShortTermBorrowings;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public totalShortTermBorrowingsFields() {}

  /**
   * All-args constructor.
   */
  public totalShortTermBorrowingsFields(java.lang.CharSequence bankOverdrafts, java.lang.CharSequence bankLoanShortTerm, java.lang.CharSequence bankLoansOverdrafts, java.lang.CharSequence financeAndHirePurchase, java.lang.CharSequence hirePurchase, java.lang.CharSequence financeLease, java.lang.CharSequence otherShortTermBorrowings) {
    this.bankOverdrafts = bankOverdrafts;
    this.bankLoanShortTerm = bankLoanShortTerm;
    this.bankLoansOverdrafts = bankLoansOverdrafts;
    this.financeAndHirePurchase = financeAndHirePurchase;
    this.hirePurchase = hirePurchase;
    this.financeLease = financeLease;
    this.otherShortTermBorrowings = otherShortTermBorrowings;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bankOverdrafts;
    case 1: return bankLoanShortTerm;
    case 2: return bankLoansOverdrafts;
    case 3: return financeAndHirePurchase;
    case 4: return hirePurchase;
    case 5: return financeLease;
    case 6: return otherShortTermBorrowings;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bankOverdrafts = (java.lang.CharSequence)value$; break;
    case 1: bankLoanShortTerm = (java.lang.CharSequence)value$; break;
    case 2: bankLoansOverdrafts = (java.lang.CharSequence)value$; break;
    case 3: financeAndHirePurchase = (java.lang.CharSequence)value$; break;
    case 4: hirePurchase = (java.lang.CharSequence)value$; break;
    case 5: financeLease = (java.lang.CharSequence)value$; break;
    case 6: otherShortTermBorrowings = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bankOverdrafts' field.
   * Total Short Term Borrowings - Bank Overdrafts   */
  public java.lang.CharSequence getBankOverdrafts() {
    return bankOverdrafts;
  }

  /**
   * Sets the value of the 'bankOverdrafts' field.
   * Total Short Term Borrowings - Bank Overdrafts   * @param value the value to set.
   */
  public void setBankOverdrafts(java.lang.CharSequence value) {
    this.bankOverdrafts = value;
  }

  /**
   * Gets the value of the 'bankLoanShortTerm' field.
   * Total Short Term Borrowings - Bank Loan short term   */
  public java.lang.CharSequence getBankLoanShortTerm() {
    return bankLoanShortTerm;
  }

  /**
   * Sets the value of the 'bankLoanShortTerm' field.
   * Total Short Term Borrowings - Bank Loan short term   * @param value the value to set.
   */
  public void setBankLoanShortTerm(java.lang.CharSequence value) {
    this.bankLoanShortTerm = value;
  }

  /**
   * Gets the value of the 'bankLoansOverdrafts' field.
   * Total Short Term Borrowings - Bank Loans Overdrafts   */
  public java.lang.CharSequence getBankLoansOverdrafts() {
    return bankLoansOverdrafts;
  }

  /**
   * Sets the value of the 'bankLoansOverdrafts' field.
   * Total Short Term Borrowings - Bank Loans Overdrafts   * @param value the value to set.
   */
  public void setBankLoansOverdrafts(java.lang.CharSequence value) {
    this.bankLoansOverdrafts = value;
  }

  /**
   * Gets the value of the 'financeAndHirePurchase' field.
   * Total Short Term Borrowings - Finance And Hire Purchase   */
  public java.lang.CharSequence getFinanceAndHirePurchase() {
    return financeAndHirePurchase;
  }

  /**
   * Sets the value of the 'financeAndHirePurchase' field.
   * Total Short Term Borrowings - Finance And Hire Purchase   * @param value the value to set.
   */
  public void setFinanceAndHirePurchase(java.lang.CharSequence value) {
    this.financeAndHirePurchase = value;
  }

  /**
   * Gets the value of the 'hirePurchase' field.
   * Total Short Term Borrowings - Hire Purchase   */
  public java.lang.CharSequence getHirePurchase() {
    return hirePurchase;
  }

  /**
   * Sets the value of the 'hirePurchase' field.
   * Total Short Term Borrowings - Hire Purchase   * @param value the value to set.
   */
  public void setHirePurchase(java.lang.CharSequence value) {
    this.hirePurchase = value;
  }

  /**
   * Gets the value of the 'financeLease' field.
   * Total Short Term Borrowings - Finance Lease   */
  public java.lang.CharSequence getFinanceLease() {
    return financeLease;
  }

  /**
   * Sets the value of the 'financeLease' field.
   * Total Short Term Borrowings - Finance Lease   * @param value the value to set.
   */
  public void setFinanceLease(java.lang.CharSequence value) {
    this.financeLease = value;
  }

  /**
   * Gets the value of the 'otherShortTermBorrowings' field.
   * Total Short Term Borrowings - Other ShortTerm Borrowing   */
  public java.lang.CharSequence getOtherShortTermBorrowings() {
    return otherShortTermBorrowings;
  }

  /**
   * Sets the value of the 'otherShortTermBorrowings' field.
   * Total Short Term Borrowings - Other ShortTerm Borrowing   * @param value the value to set.
   */
  public void setOtherShortTermBorrowings(java.lang.CharSequence value) {
    this.otherShortTermBorrowings = value;
  }

  /** Creates a new totalShortTermBorrowingsFields RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder();
  }
  
  /** Creates a new totalShortTermBorrowingsFields RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder(other);
  }
  
  /** Creates a new totalShortTermBorrowingsFields RecordBuilder by copying an existing totalShortTermBorrowingsFields instance */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder(other);
  }
  
  /**
   * RecordBuilder for totalShortTermBorrowingsFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<totalShortTermBorrowingsFields>
    implements org.apache.avro.data.RecordBuilder<totalShortTermBorrowingsFields> {

    private java.lang.CharSequence bankOverdrafts;
    private java.lang.CharSequence bankLoanShortTerm;
    private java.lang.CharSequence bankLoansOverdrafts;
    private java.lang.CharSequence financeAndHirePurchase;
    private java.lang.CharSequence hirePurchase;
    private java.lang.CharSequence financeLease;
    private java.lang.CharSequence otherShortTermBorrowings;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bankOverdrafts)) {
        this.bankOverdrafts = data().deepCopy(fields()[0].schema(), other.bankOverdrafts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankLoanShortTerm)) {
        this.bankLoanShortTerm = data().deepCopy(fields()[1].schema(), other.bankLoanShortTerm);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bankLoansOverdrafts)) {
        this.bankLoansOverdrafts = data().deepCopy(fields()[2].schema(), other.bankLoansOverdrafts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.financeAndHirePurchase)) {
        this.financeAndHirePurchase = data().deepCopy(fields()[3].schema(), other.financeAndHirePurchase);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hirePurchase)) {
        this.hirePurchase = data().deepCopy(fields()[4].schema(), other.hirePurchase);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.financeLease)) {
        this.financeLease = data().deepCopy(fields()[5].schema(), other.financeLease);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.otherShortTermBorrowings)) {
        this.otherShortTermBorrowings = data().deepCopy(fields()[6].schema(), other.otherShortTermBorrowings);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing totalShortTermBorrowingsFields instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields other) {
            super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.SCHEMA$);
      if (isValidValue(fields()[0], other.bankOverdrafts)) {
        this.bankOverdrafts = data().deepCopy(fields()[0].schema(), other.bankOverdrafts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bankLoanShortTerm)) {
        this.bankLoanShortTerm = data().deepCopy(fields()[1].schema(), other.bankLoanShortTerm);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bankLoansOverdrafts)) {
        this.bankLoansOverdrafts = data().deepCopy(fields()[2].schema(), other.bankLoansOverdrafts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.financeAndHirePurchase)) {
        this.financeAndHirePurchase = data().deepCopy(fields()[3].schema(), other.financeAndHirePurchase);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hirePurchase)) {
        this.hirePurchase = data().deepCopy(fields()[4].schema(), other.hirePurchase);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.financeLease)) {
        this.financeLease = data().deepCopy(fields()[5].schema(), other.financeLease);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.otherShortTermBorrowings)) {
        this.otherShortTermBorrowings = data().deepCopy(fields()[6].schema(), other.otherShortTermBorrowings);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'bankOverdrafts' field */
    public java.lang.CharSequence getBankOverdrafts() {
      return bankOverdrafts;
    }
    
    /** Sets the value of the 'bankOverdrafts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setBankOverdrafts(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bankOverdrafts = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'bankOverdrafts' field has been set */
    public boolean hasBankOverdrafts() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'bankOverdrafts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearBankOverdrafts() {
      bankOverdrafts = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'bankLoanShortTerm' field */
    public java.lang.CharSequence getBankLoanShortTerm() {
      return bankLoanShortTerm;
    }
    
    /** Sets the value of the 'bankLoanShortTerm' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setBankLoanShortTerm(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.bankLoanShortTerm = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'bankLoanShortTerm' field has been set */
    public boolean hasBankLoanShortTerm() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'bankLoanShortTerm' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearBankLoanShortTerm() {
      bankLoanShortTerm = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'bankLoansOverdrafts' field */
    public java.lang.CharSequence getBankLoansOverdrafts() {
      return bankLoansOverdrafts;
    }
    
    /** Sets the value of the 'bankLoansOverdrafts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setBankLoansOverdrafts(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.bankLoansOverdrafts = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'bankLoansOverdrafts' field has been set */
    public boolean hasBankLoansOverdrafts() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'bankLoansOverdrafts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearBankLoansOverdrafts() {
      bankLoansOverdrafts = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'financeAndHirePurchase' field */
    public java.lang.CharSequence getFinanceAndHirePurchase() {
      return financeAndHirePurchase;
    }
    
    /** Sets the value of the 'financeAndHirePurchase' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setFinanceAndHirePurchase(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.financeAndHirePurchase = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'financeAndHirePurchase' field has been set */
    public boolean hasFinanceAndHirePurchase() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'financeAndHirePurchase' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearFinanceAndHirePurchase() {
      financeAndHirePurchase = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'hirePurchase' field */
    public java.lang.CharSequence getHirePurchase() {
      return hirePurchase;
    }
    
    /** Sets the value of the 'hirePurchase' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setHirePurchase(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.hirePurchase = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'hirePurchase' field has been set */
    public boolean hasHirePurchase() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'hirePurchase' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearHirePurchase() {
      hirePurchase = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'financeLease' field */
    public java.lang.CharSequence getFinanceLease() {
      return financeLease;
    }
    
    /** Sets the value of the 'financeLease' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setFinanceLease(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.financeLease = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'financeLease' field has been set */
    public boolean hasFinanceLease() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'financeLease' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearFinanceLease() {
      financeLease = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'otherShortTermBorrowings' field */
    public java.lang.CharSequence getOtherShortTermBorrowings() {
      return otherShortTermBorrowings;
    }
    
    /** Sets the value of the 'otherShortTermBorrowings' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder setOtherShortTermBorrowings(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.otherShortTermBorrowings = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'otherShortTermBorrowings' field has been set */
    public boolean hasOtherShortTermBorrowings() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'otherShortTermBorrowings' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields.Builder clearOtherShortTermBorrowings() {
      otherShortTermBorrowings = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public totalShortTermBorrowingsFields build() {
      try {
        totalShortTermBorrowingsFields record = new totalShortTermBorrowingsFields();
        record.bankOverdrafts = fieldSetFlags()[0] ? this.bankOverdrafts : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.bankLoanShortTerm = fieldSetFlags()[1] ? this.bankLoanShortTerm : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.bankLoansOverdrafts = fieldSetFlags()[2] ? this.bankLoansOverdrafts : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.financeAndHirePurchase = fieldSetFlags()[3] ? this.financeAndHirePurchase : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hirePurchase = fieldSetFlags()[4] ? this.hirePurchase : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.financeLease = fieldSetFlags()[5] ? this.financeLease : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.otherShortTermBorrowings = fieldSetFlags()[6] ? this.otherShortTermBorrowings : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
