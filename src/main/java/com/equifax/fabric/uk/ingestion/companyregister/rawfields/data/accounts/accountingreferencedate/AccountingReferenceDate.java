/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountingReferenceDate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountingReferenceDate\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate\",\"fields\":[{\"name\":\"day\",\"type\":[\"null\",\"string\"],\"doc\":\"The Accounting Reference Date (ARD) day.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"month\",\"type\":[\"null\",\"string\"],\"doc\":\"The Accounting Reference Date (ARD) month.\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The Accounting Reference Date (ARD) day. */
  @Deprecated public java.lang.CharSequence day;
  /** The Accounting Reference Date (ARD) month. */
  @Deprecated public java.lang.CharSequence month;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AccountingReferenceDate() {}

  /**
   * All-args constructor.
   */
  public AccountingReferenceDate(java.lang.CharSequence day, java.lang.CharSequence month) {
    this.day = day;
    this.month = month;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return day;
    case 1: return month;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: day = (java.lang.CharSequence)value$; break;
    case 1: month = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'day' field.
   * The Accounting Reference Date (ARD) day.   */
  public java.lang.CharSequence getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * The Accounting Reference Date (ARD) day.   * @param value the value to set.
   */
  public void setDay(java.lang.CharSequence value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'month' field.
   * The Accounting Reference Date (ARD) month.   */
  public java.lang.CharSequence getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * The Accounting Reference Date (ARD) month.   * @param value the value to set.
   */
  public void setMonth(java.lang.CharSequence value) {
    this.month = value;
  }

  /** Creates a new AccountingReferenceDate RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder();
  }
  
  /** Creates a new AccountingReferenceDate RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder(other);
  }
  
  /** Creates a new AccountingReferenceDate RecordBuilder by copying an existing AccountingReferenceDate instance */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder(other);
  }
  
  /**
   * RecordBuilder for AccountingReferenceDate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountingReferenceDate>
    implements org.apache.avro.data.RecordBuilder<AccountingReferenceDate> {

    private java.lang.CharSequence day;
    private java.lang.CharSequence month;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.day)) {
        this.day = data().deepCopy(fields()[0].schema(), other.day);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountingReferenceDate instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate other) {
            super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.SCHEMA$);
      if (isValidValue(fields()[0], other.day)) {
        this.day = data().deepCopy(fields()[0].schema(), other.day);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'day' field */
    public java.lang.CharSequence getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder setDay(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.day = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'day' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder clearDay() {
      day = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.CharSequence getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder setMonth(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.month = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'month' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.accounts.accountingreferencedate.AccountingReferenceDate.Builder clearMonth() {
      month = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AccountingReferenceDate build() {
      try {
        AccountingReferenceDate record = new AccountingReferenceDate();
        record.day = fieldSetFlags()[0] ? this.day : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.month = fieldSetFlags()[1] ? this.month : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
