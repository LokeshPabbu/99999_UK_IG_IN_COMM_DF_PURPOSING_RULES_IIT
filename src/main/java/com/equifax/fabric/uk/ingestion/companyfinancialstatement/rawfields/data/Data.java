/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data\",\"fields\":[{\"name\":\"companyNumber\",\"type\":[\"null\",\"string\"],\"doc\":\"CRO Number -Registered Company number of the company filing their accounts. Unique identifier of the company.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dateOfFiscalPeriod\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Of Fiscal Period - The date to which the accounts were prepared\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"accountingMonths\",\"type\":[\"null\",\"string\"],\"doc\":\"Accounting Months - No of months that the accounts cover.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tradingMonths\",\"type\":[\"null\",\"string\"],\"doc\":\"Trading Months - Trading Months\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"turnover\",\"type\":[\"null\",\"string\"],\"doc\":\"Turnover\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"grossProfit\",\"type\":[\"null\",\"string\"],\"doc\":\"Gross Profit\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"exceptionalIncome\",\"type\":[\"null\",\"string\"],\"doc\":\"Exceptional Income\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"exceptionalCharges\",\"type\":[\"null\",\"string\"],\"doc\":\"Exceptional Charges\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"preTaxProfit\",\"type\":[\"null\",\"string\"],\"doc\":\"Pre Tax Profit\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"postTaxProfit\",\"type\":[\"null\",\"string\"],\"doc\":\"Post Tax Profit\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dividends\",\"type\":[\"null\",\"string\"],\"doc\":\"Dividends\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tangibleFixedAssets\",\"type\":[\"null\",\"string\"],\"doc\":\"Tangible Fixed Assets\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"intangibleFixedAssets\",\"type\":[\"null\",\"string\"],\"doc\":\"Intangible Fixed Assets\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"fixedAssetInvestment\",\"type\":[\"null\",\"string\"],\"doc\":\"Fixed Asset Investment\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalStock\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Stock\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalCash\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Cash\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalCurrentAssets\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Current Assets\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"currentLiabilities\",\"type\":[\"null\",\"string\"],\"doc\":\"Current Liabilities\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"workingCapital\",\"type\":[\"null\",\"string\"],\"doc\":\"Working Capital\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"calledUpShareCapital\",\"type\":[\"null\",\"string\"],\"doc\":\"Called Up Share Capital\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalReserves\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"totalReservesFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves\",\"fields\":[{\"name\":\"profitAndLossAccount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Profit And Loss Account\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"sharePremiumAccount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Share Premium Account\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"revaluationReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Revaluation Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"capitalReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Capital Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"capitalRedemptionReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Capital Redemption Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherReserves\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Other Reserves\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"goodwillReserves\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Goodwill Reserves\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"netWorth\",\"type\":[\"null\",\"string\"],\"doc\":\"Net Worth\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"netCashInflow\",\"type\":[\"null\",\"string\"],\"doc\":\"Net Cash Inflow\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"increaseInCash\",\"type\":[\"null\",\"string\"],\"doc\":\"Increase In Cash\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"exportSales\",\"type\":[\"null\",\"string\"],\"doc\":\"Export Sales\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalStaffCosts\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Staff Costs\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"numberOfEmployees\",\"type\":[\"null\",\"string\"],\"doc\":\"Number of Employees\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"directorsEmolument\",\"type\":[\"null\",\"string\"],\"doc\":\"Directors Emolument\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"externalInterestReceivable\",\"type\":[\"null\",\"string\"],\"doc\":\"External Interest Receivable\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"externalInterestPayable\",\"type\":[\"null\",\"string\"],\"doc\":\"External Interest Payable\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tradeDebtors\",\"type\":[\"null\",\"string\"],\"doc\":\"Trade Debtors\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dueFromGroupCompanies\",\"type\":[\"null\",\"string\"],\"doc\":\"Due From Group Companies\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tradeCreditors\",\"type\":[\"null\",\"string\"],\"doc\":\"Trade Creditors\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dueToGroupCompanies\",\"type\":[\"null\",\"string\"],\"doc\":\"Due to Group Companies\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"directorsLoan\",\"type\":[\"null\",\"string\"],\"doc\":\"Directors Loan\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"totalShortTermBorrowings\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"totalShortTermBorrowingsFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings\",\"fields\":[{\"name\":\"bankOverdrafts\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Overdrafts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankLoanShortTerm\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Loan short term\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankLoansOverdrafts\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Bank Loans Overdrafts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeAndHirePurchase\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Finance And Hire Purchase\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"hirePurchase\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Hire Purchase\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeLease\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Finance Lease\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherShortTermBorrowings\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Short Term Borrowings - Other ShortTerm Borrowing\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"longTermBorrowing\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"longTermBorrowingFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing\",\"fields\":[{\"name\":\"bankLoans\",\"type\":[\"null\",\"string\"],\"doc\":\"Long Term Borrowing - Bank Loans\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeLeaseAndHirePurchase\",\"type\":[\"null\",\"string\"],\"doc\":\"Long Term Borrowing - Finance Lease and Hire Purchase\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"hirePurchaseLoan\",\"type\":[\"null\",\"string\"],\"doc\":\"Long Term Borrowing - Hire Purchase Loan\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"financeLeaseObligation\",\"type\":[\"null\",\"string\"],\"doc\":\"Long Term Borrowing - Finance Lease Obligation\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherLongTermBorrowing\",\"type\":[\"null\",\"string\"],\"doc\":\"Long Term Borrowing - Other Long Term Borrowing\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"totalOtherLongTerm\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"totalOtherLongTermFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm\",\"fields\":[{\"name\":\"owedToGroupCompanies\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Other Long Term - Owed To Group Companies\",\"default\":null,\"dataClassification\":\"3\"},{\"nam","e\":\"longTermDirectorsLoan\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Other Long Term - Long Term Directors Loan\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherLongTermLiabilities\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Other Long Term - Other Long Term Liabilities\",\"default\":null,\"dataClassification\":\"3\"}]}]},{\"name\":\"other\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"otherFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other\",\"fields\":[{\"name\":\"shortTermUnspecifiedSecured\",\"type\":[\"null\",\"string\"],\"doc\":\"Other - Short Term Unspecified Secured\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"longTermUnspecifiedSecured\",\"type\":[\"null\",\"string\"],\"doc\":\"Other - Long Term Unspecified Secured\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"unknownPeriodSecured\",\"type\":[\"null\",\"string\"],\"doc\":\"Other - Unknown Period Secured\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"unspecifiedBankLoans\",\"type\":[\"null\",\"string\"],\"doc\":\"Other - Unspecified Bank Loans\",\"default\":null,\"dataClassification\":\"3\"}]}]},{\"name\":\"auditors\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"auditorsFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors\",\"fields\":[{\"name\":\"auditorName\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Auditor Name\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"town\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Town\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"remuneration\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Remuneration\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"comments\",\"type\":[\"null\",\"string\"],\"doc\":\"Any comments that the auditor has upon the accounts.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"qualified\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Qualified\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"trueAndFairView\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - True and Fair View\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"creditorsSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Creditors Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"auditExempt\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Audit Exempt\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"directorsSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Directors Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"withoutQualifying\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Without Qualifying\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"goingConcernInappropriate\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Going Concern Inappropriate\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"accounts_Signed\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Accounts Signed\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"disclaimerOfOpinion\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Disclaimer of Opinion\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Bank Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"noteNetCurrentLiab\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Note Net Current Liab\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"abbreviatedAccounts\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Abbreviated Accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"seriousAccountingIrregularities\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Serious Accounting Irregularities\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"notes\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Notes\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"firstAccounts\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - First Accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tradeMonths\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Trade Months\",\"default\":null,\"dataClassification\":\"3\"}]}]},{\"name\":\"currency\",\"type\":[\"null\",\"string\"],\"doc\":\"Currency symbol for the accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"consolidated\",\"type\":[\"null\",\"string\"],\"doc\":\"Consolidated\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"scale\",\"type\":[\"null\",\"string\"],\"doc\":\"The scale that should be applied to the figures\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"integers\",\"type\":[\"null\",\"string\"],\"doc\":\"Integers\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"referIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Refer Indicator - Code for any reason for referral\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"notKeyedIndicator\",\"type\":[\"null\",\"string\"],\"doc\":\"Not Keyed Indicator\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"didNotTrade\",\"type\":[\"null\",\"string\"],\"doc\":\"Did Not Trade\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dormant\",\"type\":[\"null\",\"string\"],\"doc\":\"Dormant\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"ceasedToTradeDuringPeriod\",\"type\":[\"null\",\"string\"],\"doc\":\"Ceased to Trade During Period\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dateCeasedToTradeDuringPeriod\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Ceased to Trade During Period\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"ceasedTradeAfterPeriodEnd\",\"type\":[\"null\",\"string\"],\"doc\":\"Ceased Trade After Period End\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dateCeasedTradeAfterPeriodEnd\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Ceased Trade After Period End\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"transferredTrade\",\"type\":[\"null\",\"string\"],\"doc\":\"Transferred Trade\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dateTransferredTrade\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Transferred Trade\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"nameOfPartyTradeIsTransferredTo\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of Party trade is Transferred to\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"commencedTradeDuringPeriod\",\"type\":[\"null\",\"string\"],\"doc\":\"Commenced Trade During Period\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"dateCommencedTrade\",\"type\":[\"null\",\"string\"],\"doc\":\"Date Commenced Trade\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"nameOfPartyActsAsAnAgentFor\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of Party Acts as an Agent For\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"ultimateHoldingCompany\",\"type\":[\"null\",\"string\"],\"doc\":\"Ultimate Holding company\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"actsAsAnAgent\",\"type\":[\"null\",\"string\"],\"doc\":\"Acts as an Agent\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"countryOfIncorporation\",\"type\":[\"null\",\"string\"],\"doc\":\"Country of Incorporation\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"miscellaneousItems\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"miscellaneousItemsFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems\",\"fields\":[{\"name\":\"objects\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - Objects\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"sicCode\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - SIC Code\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"externalCompany\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - External Company\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"section17Exemption\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - Section 17 Exemption\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"section17DateOfAccounts\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - Section 17 Date of Accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"section17GuaranteeProvider\",\"type\":[\"null\",\"string\"],\"doc\":\"Miscellaneous Items - Section 17 Guarantee Provider\",\"default\":null,\"dataClassification\":\"3\"}]}]},{\"name\":\"depreciation\",\"type\":[\"null\",\"string\"],\"doc\":\"Depreciation\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"operatingProfit\",\"type\":[\"null\",\"string\"],\"doc\":\"Operating Profit\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"netCashFlowFromRoiAndServicingOfFinance\",\"type\":[\"null\",\"string\"],\"doc\":\"Net Cashflow From RoI and Servicing of Finance\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"netCashFlowBeforeFinancing\",\"type\":[\"null\",\"string\"],\"doc\":\"Net Cashflow Before Financing\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"netCashFlowFromFina","ncing\",\"type\":[\"null\",\"string\"],\"doc\":\"Net Cashflow From Financing\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contingentLiability\",\"type\":[\"null\",\"string\"],\"doc\":\"Contingent Liability\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** CRO Number -Registered Company number of the company filing their accounts. Unique identifier of the company. */
  @Deprecated public java.lang.CharSequence companyNumber;
  /** Date Of Fiscal Period - The date to which the accounts were prepared */
  @Deprecated public java.lang.CharSequence dateOfFiscalPeriod;
  /** Accounting Months - No of months that the accounts cover. */
  @Deprecated public java.lang.CharSequence accountingMonths;
  /** Trading Months - Trading Months */
  @Deprecated public java.lang.CharSequence tradingMonths;
  /** Turnover */
  @Deprecated public java.lang.CharSequence turnover;
  /** Gross Profit */
  @Deprecated public java.lang.CharSequence grossProfit;
  /** Exceptional Income */
  @Deprecated public java.lang.CharSequence exceptionalIncome;
  /** Exceptional Charges */
  @Deprecated public java.lang.CharSequence exceptionalCharges;
  /** Pre Tax Profit */
  @Deprecated public java.lang.CharSequence preTaxProfit;
  /** Post Tax Profit */
  @Deprecated public java.lang.CharSequence postTaxProfit;
  /** Dividends */
  @Deprecated public java.lang.CharSequence dividends;
  /** Tangible Fixed Assets */
  @Deprecated public java.lang.CharSequence tangibleFixedAssets;
  /** Intangible Fixed Assets */
  @Deprecated public java.lang.CharSequence intangibleFixedAssets;
  /** Fixed Asset Investment */
  @Deprecated public java.lang.CharSequence fixedAssetInvestment;
  /** Total Stock */
  @Deprecated public java.lang.CharSequence totalStock;
  /** Total Cash */
  @Deprecated public java.lang.CharSequence totalCash;
  /** Total Current Assets */
  @Deprecated public java.lang.CharSequence totalCurrentAssets;
  /** Current Liabilities */
  @Deprecated public java.lang.CharSequence currentLiabilities;
  /** Working Capital */
  @Deprecated public java.lang.CharSequence workingCapital;
  /** Called Up Share Capital */
  @Deprecated public java.lang.CharSequence calledUpShareCapital;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields totalReserves;
  /** Net Worth */
  @Deprecated public java.lang.CharSequence netWorth;
  /** Net Cash Inflow */
  @Deprecated public java.lang.CharSequence netCashInflow;
  /** Increase In Cash */
  @Deprecated public java.lang.CharSequence increaseInCash;
  /** Export Sales */
  @Deprecated public java.lang.CharSequence exportSales;
  /** Total Staff Costs */
  @Deprecated public java.lang.CharSequence totalStaffCosts;
  /** Number of Employees */
  @Deprecated public java.lang.CharSequence numberOfEmployees;
  /** Directors Emolument */
  @Deprecated public java.lang.CharSequence directorsEmolument;
  /** External Interest Receivable */
  @Deprecated public java.lang.CharSequence externalInterestReceivable;
  /** External Interest Payable */
  @Deprecated public java.lang.CharSequence externalInterestPayable;
  /** Trade Debtors */
  @Deprecated public java.lang.CharSequence tradeDebtors;
  /** Due From Group Companies */
  @Deprecated public java.lang.CharSequence dueFromGroupCompanies;
  /** Trade Creditors */
  @Deprecated public java.lang.CharSequence tradeCreditors;
  /** Due to Group Companies */
  @Deprecated public java.lang.CharSequence dueToGroupCompanies;
  /** Directors Loan */
  @Deprecated public java.lang.CharSequence directorsLoan;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields totalShortTermBorrowings;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields longTermBorrowing;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields totalOtherLongTerm;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields other;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields auditors;
  /** Currency symbol for the accounts */
  @Deprecated public java.lang.CharSequence currency;
  /** Consolidated */
  @Deprecated public java.lang.CharSequence consolidated;
  /** The scale that should be applied to the figures */
  @Deprecated public java.lang.CharSequence scale;
  /** Integers */
  @Deprecated public java.lang.CharSequence integers;
  /** Refer Indicator - Code for any reason for referral */
  @Deprecated public java.lang.CharSequence referIndicator;
  /** Not Keyed Indicator */
  @Deprecated public java.lang.CharSequence notKeyedIndicator;
  /** Did Not Trade */
  @Deprecated public java.lang.CharSequence didNotTrade;
  /** Dormant */
  @Deprecated public java.lang.CharSequence dormant;
  /** Ceased to Trade During Period */
  @Deprecated public java.lang.CharSequence ceasedToTradeDuringPeriod;
  /** Date Ceased to Trade During Period */
  @Deprecated public java.lang.CharSequence dateCeasedToTradeDuringPeriod;
  /** Ceased Trade After Period End */
  @Deprecated public java.lang.CharSequence ceasedTradeAfterPeriodEnd;
  /** Date Ceased Trade After Period End */
  @Deprecated public java.lang.CharSequence dateCeasedTradeAfterPeriodEnd;
  /** Transferred Trade */
  @Deprecated public java.lang.CharSequence transferredTrade;
  /** Date Transferred Trade */
  @Deprecated public java.lang.CharSequence dateTransferredTrade;
  /** Name of Party trade is Transferred to */
  @Deprecated public java.lang.CharSequence nameOfPartyTradeIsTransferredTo;
  /** Commenced Trade During Period */
  @Deprecated public java.lang.CharSequence commencedTradeDuringPeriod;
  /** Date Commenced Trade */
  @Deprecated public java.lang.CharSequence dateCommencedTrade;
  /** Name of Party Acts as an Agent For */
  @Deprecated public java.lang.CharSequence nameOfPartyActsAsAnAgentFor;
  /** Ultimate Holding company */
  @Deprecated public java.lang.CharSequence ultimateHoldingCompany;
  /** Acts as an Agent */
  @Deprecated public java.lang.CharSequence actsAsAnAgent;
  /** Country of Incorporation */
  @Deprecated public java.lang.CharSequence countryOfIncorporation;
  @Deprecated public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields miscellaneousItems;
  /** Depreciation */
  @Deprecated public java.lang.CharSequence depreciation;
  /** Operating Profit */
  @Deprecated public java.lang.CharSequence operatingProfit;
  /** Net Cashflow From RoI and Servicing of Finance */
  @Deprecated public java.lang.CharSequence netCashFlowFromRoiAndServicingOfFinance;
  /** Net Cashflow Before Financing */
  @Deprecated public java.lang.CharSequence netCashFlowBeforeFinancing;
  /** Net Cashflow From Financing */
  @Deprecated public java.lang.CharSequence netCashFlowFromFinancing;
  /** Contingent Liability */
  @Deprecated public java.lang.CharSequence contingentLiability;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Data() {}

  /**
   * All-args constructor.
   */
  public Data(java.lang.CharSequence companyNumber, java.lang.CharSequence dateOfFiscalPeriod, java.lang.CharSequence accountingMonths, java.lang.CharSequence tradingMonths, java.lang.CharSequence turnover, java.lang.CharSequence grossProfit, java.lang.CharSequence exceptionalIncome, java.lang.CharSequence exceptionalCharges, java.lang.CharSequence preTaxProfit, java.lang.CharSequence postTaxProfit, java.lang.CharSequence dividends, java.lang.CharSequence tangibleFixedAssets, java.lang.CharSequence intangibleFixedAssets, java.lang.CharSequence fixedAssetInvestment, java.lang.CharSequence totalStock, java.lang.CharSequence totalCash, java.lang.CharSequence totalCurrentAssets, java.lang.CharSequence currentLiabilities, java.lang.CharSequence workingCapital, java.lang.CharSequence calledUpShareCapital, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields totalReserves, java.lang.CharSequence netWorth, java.lang.CharSequence netCashInflow, java.lang.CharSequence increaseInCash, java.lang.CharSequence exportSales, java.lang.CharSequence totalStaffCosts, java.lang.CharSequence numberOfEmployees, java.lang.CharSequence directorsEmolument, java.lang.CharSequence externalInterestReceivable, java.lang.CharSequence externalInterestPayable, java.lang.CharSequence tradeDebtors, java.lang.CharSequence dueFromGroupCompanies, java.lang.CharSequence tradeCreditors, java.lang.CharSequence dueToGroupCompanies, java.lang.CharSequence directorsLoan, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields totalShortTermBorrowings, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields longTermBorrowing, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields totalOtherLongTerm, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields other, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields auditors, java.lang.CharSequence currency, java.lang.CharSequence consolidated, java.lang.CharSequence scale, java.lang.CharSequence integers, java.lang.CharSequence referIndicator, java.lang.CharSequence notKeyedIndicator, java.lang.CharSequence didNotTrade, java.lang.CharSequence dormant, java.lang.CharSequence ceasedToTradeDuringPeriod, java.lang.CharSequence dateCeasedToTradeDuringPeriod, java.lang.CharSequence ceasedTradeAfterPeriodEnd, java.lang.CharSequence dateCeasedTradeAfterPeriodEnd, java.lang.CharSequence transferredTrade, java.lang.CharSequence dateTransferredTrade, java.lang.CharSequence nameOfPartyTradeIsTransferredTo, java.lang.CharSequence commencedTradeDuringPeriod, java.lang.CharSequence dateCommencedTrade, java.lang.CharSequence nameOfPartyActsAsAnAgentFor, java.lang.CharSequence ultimateHoldingCompany, java.lang.CharSequence actsAsAnAgent, java.lang.CharSequence countryOfIncorporation, com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields miscellaneousItems, java.lang.CharSequence depreciation, java.lang.CharSequence operatingProfit, java.lang.CharSequence netCashFlowFromRoiAndServicingOfFinance, java.lang.CharSequence netCashFlowBeforeFinancing, java.lang.CharSequence netCashFlowFromFinancing, java.lang.CharSequence contingentLiability) {
    this.companyNumber = companyNumber;
    this.dateOfFiscalPeriod = dateOfFiscalPeriod;
    this.accountingMonths = accountingMonths;
    this.tradingMonths = tradingMonths;
    this.turnover = turnover;
    this.grossProfit = grossProfit;
    this.exceptionalIncome = exceptionalIncome;
    this.exceptionalCharges = exceptionalCharges;
    this.preTaxProfit = preTaxProfit;
    this.postTaxProfit = postTaxProfit;
    this.dividends = dividends;
    this.tangibleFixedAssets = tangibleFixedAssets;
    this.intangibleFixedAssets = intangibleFixedAssets;
    this.fixedAssetInvestment = fixedAssetInvestment;
    this.totalStock = totalStock;
    this.totalCash = totalCash;
    this.totalCurrentAssets = totalCurrentAssets;
    this.currentLiabilities = currentLiabilities;
    this.workingCapital = workingCapital;
    this.calledUpShareCapital = calledUpShareCapital;
    this.totalReserves = totalReserves;
    this.netWorth = netWorth;
    this.netCashInflow = netCashInflow;
    this.increaseInCash = increaseInCash;
    this.exportSales = exportSales;
    this.totalStaffCosts = totalStaffCosts;
    this.numberOfEmployees = numberOfEmployees;
    this.directorsEmolument = directorsEmolument;
    this.externalInterestReceivable = externalInterestReceivable;
    this.externalInterestPayable = externalInterestPayable;
    this.tradeDebtors = tradeDebtors;
    this.dueFromGroupCompanies = dueFromGroupCompanies;
    this.tradeCreditors = tradeCreditors;
    this.dueToGroupCompanies = dueToGroupCompanies;
    this.directorsLoan = directorsLoan;
    this.totalShortTermBorrowings = totalShortTermBorrowings;
    this.longTermBorrowing = longTermBorrowing;
    this.totalOtherLongTerm = totalOtherLongTerm;
    this.other = other;
    this.auditors = auditors;
    this.currency = currency;
    this.consolidated = consolidated;
    this.scale = scale;
    this.integers = integers;
    this.referIndicator = referIndicator;
    this.notKeyedIndicator = notKeyedIndicator;
    this.didNotTrade = didNotTrade;
    this.dormant = dormant;
    this.ceasedToTradeDuringPeriod = ceasedToTradeDuringPeriod;
    this.dateCeasedToTradeDuringPeriod = dateCeasedToTradeDuringPeriod;
    this.ceasedTradeAfterPeriodEnd = ceasedTradeAfterPeriodEnd;
    this.dateCeasedTradeAfterPeriodEnd = dateCeasedTradeAfterPeriodEnd;
    this.transferredTrade = transferredTrade;
    this.dateTransferredTrade = dateTransferredTrade;
    this.nameOfPartyTradeIsTransferredTo = nameOfPartyTradeIsTransferredTo;
    this.commencedTradeDuringPeriod = commencedTradeDuringPeriod;
    this.dateCommencedTrade = dateCommencedTrade;
    this.nameOfPartyActsAsAnAgentFor = nameOfPartyActsAsAnAgentFor;
    this.ultimateHoldingCompany = ultimateHoldingCompany;
    this.actsAsAnAgent = actsAsAnAgent;
    this.countryOfIncorporation = countryOfIncorporation;
    this.miscellaneousItems = miscellaneousItems;
    this.depreciation = depreciation;
    this.operatingProfit = operatingProfit;
    this.netCashFlowFromRoiAndServicingOfFinance = netCashFlowFromRoiAndServicingOfFinance;
    this.netCashFlowBeforeFinancing = netCashFlowBeforeFinancing;
    this.netCashFlowFromFinancing = netCashFlowFromFinancing;
    this.contingentLiability = contingentLiability;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return companyNumber;
    case 1: return dateOfFiscalPeriod;
    case 2: return accountingMonths;
    case 3: return tradingMonths;
    case 4: return turnover;
    case 5: return grossProfit;
    case 6: return exceptionalIncome;
    case 7: return exceptionalCharges;
    case 8: return preTaxProfit;
    case 9: return postTaxProfit;
    case 10: return dividends;
    case 11: return tangibleFixedAssets;
    case 12: return intangibleFixedAssets;
    case 13: return fixedAssetInvestment;
    case 14: return totalStock;
    case 15: return totalCash;
    case 16: return totalCurrentAssets;
    case 17: return currentLiabilities;
    case 18: return workingCapital;
    case 19: return calledUpShareCapital;
    case 20: return totalReserves;
    case 21: return netWorth;
    case 22: return netCashInflow;
    case 23: return increaseInCash;
    case 24: return exportSales;
    case 25: return totalStaffCosts;
    case 26: return numberOfEmployees;
    case 27: return directorsEmolument;
    case 28: return externalInterestReceivable;
    case 29: return externalInterestPayable;
    case 30: return tradeDebtors;
    case 31: return dueFromGroupCompanies;
    case 32: return tradeCreditors;
    case 33: return dueToGroupCompanies;
    case 34: return directorsLoan;
    case 35: return totalShortTermBorrowings;
    case 36: return longTermBorrowing;
    case 37: return totalOtherLongTerm;
    case 38: return other;
    case 39: return auditors;
    case 40: return currency;
    case 41: return consolidated;
    case 42: return scale;
    case 43: return integers;
    case 44: return referIndicator;
    case 45: return notKeyedIndicator;
    case 46: return didNotTrade;
    case 47: return dormant;
    case 48: return ceasedToTradeDuringPeriod;
    case 49: return dateCeasedToTradeDuringPeriod;
    case 50: return ceasedTradeAfterPeriodEnd;
    case 51: return dateCeasedTradeAfterPeriodEnd;
    case 52: return transferredTrade;
    case 53: return dateTransferredTrade;
    case 54: return nameOfPartyTradeIsTransferredTo;
    case 55: return commencedTradeDuringPeriod;
    case 56: return dateCommencedTrade;
    case 57: return nameOfPartyActsAsAnAgentFor;
    case 58: return ultimateHoldingCompany;
    case 59: return actsAsAnAgent;
    case 60: return countryOfIncorporation;
    case 61: return miscellaneousItems;
    case 62: return depreciation;
    case 63: return operatingProfit;
    case 64: return netCashFlowFromRoiAndServicingOfFinance;
    case 65: return netCashFlowBeforeFinancing;
    case 66: return netCashFlowFromFinancing;
    case 67: return contingentLiability;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: companyNumber = (java.lang.CharSequence)value$; break;
    case 1: dateOfFiscalPeriod = (java.lang.CharSequence)value$; break;
    case 2: accountingMonths = (java.lang.CharSequence)value$; break;
    case 3: tradingMonths = (java.lang.CharSequence)value$; break;
    case 4: turnover = (java.lang.CharSequence)value$; break;
    case 5: grossProfit = (java.lang.CharSequence)value$; break;
    case 6: exceptionalIncome = (java.lang.CharSequence)value$; break;
    case 7: exceptionalCharges = (java.lang.CharSequence)value$; break;
    case 8: preTaxProfit = (java.lang.CharSequence)value$; break;
    case 9: postTaxProfit = (java.lang.CharSequence)value$; break;
    case 10: dividends = (java.lang.CharSequence)value$; break;
    case 11: tangibleFixedAssets = (java.lang.CharSequence)value$; break;
    case 12: intangibleFixedAssets = (java.lang.CharSequence)value$; break;
    case 13: fixedAssetInvestment = (java.lang.CharSequence)value$; break;
    case 14: totalStock = (java.lang.CharSequence)value$; break;
    case 15: totalCash = (java.lang.CharSequence)value$; break;
    case 16: totalCurrentAssets = (java.lang.CharSequence)value$; break;
    case 17: currentLiabilities = (java.lang.CharSequence)value$; break;
    case 18: workingCapital = (java.lang.CharSequence)value$; break;
    case 19: calledUpShareCapital = (java.lang.CharSequence)value$; break;
    case 20: totalReserves = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields)value$; break;
    case 21: netWorth = (java.lang.CharSequence)value$; break;
    case 22: netCashInflow = (java.lang.CharSequence)value$; break;
    case 23: increaseInCash = (java.lang.CharSequence)value$; break;
    case 24: exportSales = (java.lang.CharSequence)value$; break;
    case 25: totalStaffCosts = (java.lang.CharSequence)value$; break;
    case 26: numberOfEmployees = (java.lang.CharSequence)value$; break;
    case 27: directorsEmolument = (java.lang.CharSequence)value$; break;
    case 28: externalInterestReceivable = (java.lang.CharSequence)value$; break;
    case 29: externalInterestPayable = (java.lang.CharSequence)value$; break;
    case 30: tradeDebtors = (java.lang.CharSequence)value$; break;
    case 31: dueFromGroupCompanies = (java.lang.CharSequence)value$; break;
    case 32: tradeCreditors = (java.lang.CharSequence)value$; break;
    case 33: dueToGroupCompanies = (java.lang.CharSequence)value$; break;
    case 34: directorsLoan = (java.lang.CharSequence)value$; break;
    case 35: totalShortTermBorrowings = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields)value$; break;
    case 36: longTermBorrowing = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields)value$; break;
    case 37: totalOtherLongTerm = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields)value$; break;
    case 38: other = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields)value$; break;
    case 39: auditors = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields)value$; break;
    case 40: currency = (java.lang.CharSequence)value$; break;
    case 41: consolidated = (java.lang.CharSequence)value$; break;
    case 42: scale = (java.lang.CharSequence)value$; break;
    case 43: integers = (java.lang.CharSequence)value$; break;
    case 44: referIndicator = (java.lang.CharSequence)value$; break;
    case 45: notKeyedIndicator = (java.lang.CharSequence)value$; break;
    case 46: didNotTrade = (java.lang.CharSequence)value$; break;
    case 47: dormant = (java.lang.CharSequence)value$; break;
    case 48: ceasedToTradeDuringPeriod = (java.lang.CharSequence)value$; break;
    case 49: dateCeasedToTradeDuringPeriod = (java.lang.CharSequence)value$; break;
    case 50: ceasedTradeAfterPeriodEnd = (java.lang.CharSequence)value$; break;
    case 51: dateCeasedTradeAfterPeriodEnd = (java.lang.CharSequence)value$; break;
    case 52: transferredTrade = (java.lang.CharSequence)value$; break;
    case 53: dateTransferredTrade = (java.lang.CharSequence)value$; break;
    case 54: nameOfPartyTradeIsTransferredTo = (java.lang.CharSequence)value$; break;
    case 55: commencedTradeDuringPeriod = (java.lang.CharSequence)value$; break;
    case 56: dateCommencedTrade = (java.lang.CharSequence)value$; break;
    case 57: nameOfPartyActsAsAnAgentFor = (java.lang.CharSequence)value$; break;
    case 58: ultimateHoldingCompany = (java.lang.CharSequence)value$; break;
    case 59: actsAsAnAgent = (java.lang.CharSequence)value$; break;
    case 60: countryOfIncorporation = (java.lang.CharSequence)value$; break;
    case 61: miscellaneousItems = (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields)value$; break;
    case 62: depreciation = (java.lang.CharSequence)value$; break;
    case 63: operatingProfit = (java.lang.CharSequence)value$; break;
    case 64: netCashFlowFromRoiAndServicingOfFinance = (java.lang.CharSequence)value$; break;
    case 65: netCashFlowBeforeFinancing = (java.lang.CharSequence)value$; break;
    case 66: netCashFlowFromFinancing = (java.lang.CharSequence)value$; break;
    case 67: contingentLiability = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'companyNumber' field.
   * CRO Number -Registered Company number of the company filing their accounts. Unique identifier of the company.   */
  public java.lang.CharSequence getCompanyNumber() {
    return companyNumber;
  }

  /**
   * Sets the value of the 'companyNumber' field.
   * CRO Number -Registered Company number of the company filing their accounts. Unique identifier of the company.   * @param value the value to set.
   */
  public void setCompanyNumber(java.lang.CharSequence value) {
    this.companyNumber = value;
  }

  /**
   * Gets the value of the 'dateOfFiscalPeriod' field.
   * Date Of Fiscal Period - The date to which the accounts were prepared   */
  public java.lang.CharSequence getDateOfFiscalPeriod() {
    return dateOfFiscalPeriod;
  }

  /**
   * Sets the value of the 'dateOfFiscalPeriod' field.
   * Date Of Fiscal Period - The date to which the accounts were prepared   * @param value the value to set.
   */
  public void setDateOfFiscalPeriod(java.lang.CharSequence value) {
    this.dateOfFiscalPeriod = value;
  }

  /**
   * Gets the value of the 'accountingMonths' field.
   * Accounting Months - No of months that the accounts cover.   */
  public java.lang.CharSequence getAccountingMonths() {
    return accountingMonths;
  }

  /**
   * Sets the value of the 'accountingMonths' field.
   * Accounting Months - No of months that the accounts cover.   * @param value the value to set.
   */
  public void setAccountingMonths(java.lang.CharSequence value) {
    this.accountingMonths = value;
  }

  /**
   * Gets the value of the 'tradingMonths' field.
   * Trading Months - Trading Months   */
  public java.lang.CharSequence getTradingMonths() {
    return tradingMonths;
  }

  /**
   * Sets the value of the 'tradingMonths' field.
   * Trading Months - Trading Months   * @param value the value to set.
   */
  public void setTradingMonths(java.lang.CharSequence value) {
    this.tradingMonths = value;
  }

  /**
   * Gets the value of the 'turnover' field.
   * Turnover   */
  public java.lang.CharSequence getTurnover() {
    return turnover;
  }

  /**
   * Sets the value of the 'turnover' field.
   * Turnover   * @param value the value to set.
   */
  public void setTurnover(java.lang.CharSequence value) {
    this.turnover = value;
  }

  /**
   * Gets the value of the 'grossProfit' field.
   * Gross Profit   */
  public java.lang.CharSequence getGrossProfit() {
    return grossProfit;
  }

  /**
   * Sets the value of the 'grossProfit' field.
   * Gross Profit   * @param value the value to set.
   */
  public void setGrossProfit(java.lang.CharSequence value) {
    this.grossProfit = value;
  }

  /**
   * Gets the value of the 'exceptionalIncome' field.
   * Exceptional Income   */
  public java.lang.CharSequence getExceptionalIncome() {
    return exceptionalIncome;
  }

  /**
   * Sets the value of the 'exceptionalIncome' field.
   * Exceptional Income   * @param value the value to set.
   */
  public void setExceptionalIncome(java.lang.CharSequence value) {
    this.exceptionalIncome = value;
  }

  /**
   * Gets the value of the 'exceptionalCharges' field.
   * Exceptional Charges   */
  public java.lang.CharSequence getExceptionalCharges() {
    return exceptionalCharges;
  }

  /**
   * Sets the value of the 'exceptionalCharges' field.
   * Exceptional Charges   * @param value the value to set.
   */
  public void setExceptionalCharges(java.lang.CharSequence value) {
    this.exceptionalCharges = value;
  }

  /**
   * Gets the value of the 'preTaxProfit' field.
   * Pre Tax Profit   */
  public java.lang.CharSequence getPreTaxProfit() {
    return preTaxProfit;
  }

  /**
   * Sets the value of the 'preTaxProfit' field.
   * Pre Tax Profit   * @param value the value to set.
   */
  public void setPreTaxProfit(java.lang.CharSequence value) {
    this.preTaxProfit = value;
  }

  /**
   * Gets the value of the 'postTaxProfit' field.
   * Post Tax Profit   */
  public java.lang.CharSequence getPostTaxProfit() {
    return postTaxProfit;
  }

  /**
   * Sets the value of the 'postTaxProfit' field.
   * Post Tax Profit   * @param value the value to set.
   */
  public void setPostTaxProfit(java.lang.CharSequence value) {
    this.postTaxProfit = value;
  }

  /**
   * Gets the value of the 'dividends' field.
   * Dividends   */
  public java.lang.CharSequence getDividends() {
    return dividends;
  }

  /**
   * Sets the value of the 'dividends' field.
   * Dividends   * @param value the value to set.
   */
  public void setDividends(java.lang.CharSequence value) {
    this.dividends = value;
  }

  /**
   * Gets the value of the 'tangibleFixedAssets' field.
   * Tangible Fixed Assets   */
  public java.lang.CharSequence getTangibleFixedAssets() {
    return tangibleFixedAssets;
  }

  /**
   * Sets the value of the 'tangibleFixedAssets' field.
   * Tangible Fixed Assets   * @param value the value to set.
   */
  public void setTangibleFixedAssets(java.lang.CharSequence value) {
    this.tangibleFixedAssets = value;
  }

  /**
   * Gets the value of the 'intangibleFixedAssets' field.
   * Intangible Fixed Assets   */
  public java.lang.CharSequence getIntangibleFixedAssets() {
    return intangibleFixedAssets;
  }

  /**
   * Sets the value of the 'intangibleFixedAssets' field.
   * Intangible Fixed Assets   * @param value the value to set.
   */
  public void setIntangibleFixedAssets(java.lang.CharSequence value) {
    this.intangibleFixedAssets = value;
  }

  /**
   * Gets the value of the 'fixedAssetInvestment' field.
   * Fixed Asset Investment   */
  public java.lang.CharSequence getFixedAssetInvestment() {
    return fixedAssetInvestment;
  }

  /**
   * Sets the value of the 'fixedAssetInvestment' field.
   * Fixed Asset Investment   * @param value the value to set.
   */
  public void setFixedAssetInvestment(java.lang.CharSequence value) {
    this.fixedAssetInvestment = value;
  }

  /**
   * Gets the value of the 'totalStock' field.
   * Total Stock   */
  public java.lang.CharSequence getTotalStock() {
    return totalStock;
  }

  /**
   * Sets the value of the 'totalStock' field.
   * Total Stock   * @param value the value to set.
   */
  public void setTotalStock(java.lang.CharSequence value) {
    this.totalStock = value;
  }

  /**
   * Gets the value of the 'totalCash' field.
   * Total Cash   */
  public java.lang.CharSequence getTotalCash() {
    return totalCash;
  }

  /**
   * Sets the value of the 'totalCash' field.
   * Total Cash   * @param value the value to set.
   */
  public void setTotalCash(java.lang.CharSequence value) {
    this.totalCash = value;
  }

  /**
   * Gets the value of the 'totalCurrentAssets' field.
   * Total Current Assets   */
  public java.lang.CharSequence getTotalCurrentAssets() {
    return totalCurrentAssets;
  }

  /**
   * Sets the value of the 'totalCurrentAssets' field.
   * Total Current Assets   * @param value the value to set.
   */
  public void setTotalCurrentAssets(java.lang.CharSequence value) {
    this.totalCurrentAssets = value;
  }

  /**
   * Gets the value of the 'currentLiabilities' field.
   * Current Liabilities   */
  public java.lang.CharSequence getCurrentLiabilities() {
    return currentLiabilities;
  }

  /**
   * Sets the value of the 'currentLiabilities' field.
   * Current Liabilities   * @param value the value to set.
   */
  public void setCurrentLiabilities(java.lang.CharSequence value) {
    this.currentLiabilities = value;
  }

  /**
   * Gets the value of the 'workingCapital' field.
   * Working Capital   */
  public java.lang.CharSequence getWorkingCapital() {
    return workingCapital;
  }

  /**
   * Sets the value of the 'workingCapital' field.
   * Working Capital   * @param value the value to set.
   */
  public void setWorkingCapital(java.lang.CharSequence value) {
    this.workingCapital = value;
  }

  /**
   * Gets the value of the 'calledUpShareCapital' field.
   * Called Up Share Capital   */
  public java.lang.CharSequence getCalledUpShareCapital() {
    return calledUpShareCapital;
  }

  /**
   * Sets the value of the 'calledUpShareCapital' field.
   * Called Up Share Capital   * @param value the value to set.
   */
  public void setCalledUpShareCapital(java.lang.CharSequence value) {
    this.calledUpShareCapital = value;
  }

  /**
   * Gets the value of the 'totalReserves' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields getTotalReserves() {
    return totalReserves;
  }

  /**
   * Sets the value of the 'totalReserves' field.
   * @param value the value to set.
   */
  public void setTotalReserves(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields value) {
    this.totalReserves = value;
  }

  /**
   * Gets the value of the 'netWorth' field.
   * Net Worth   */
  public java.lang.CharSequence getNetWorth() {
    return netWorth;
  }

  /**
   * Sets the value of the 'netWorth' field.
   * Net Worth   * @param value the value to set.
   */
  public void setNetWorth(java.lang.CharSequence value) {
    this.netWorth = value;
  }

  /**
   * Gets the value of the 'netCashInflow' field.
   * Net Cash Inflow   */
  public java.lang.CharSequence getNetCashInflow() {
    return netCashInflow;
  }

  /**
   * Sets the value of the 'netCashInflow' field.
   * Net Cash Inflow   * @param value the value to set.
   */
  public void setNetCashInflow(java.lang.CharSequence value) {
    this.netCashInflow = value;
  }

  /**
   * Gets the value of the 'increaseInCash' field.
   * Increase In Cash   */
  public java.lang.CharSequence getIncreaseInCash() {
    return increaseInCash;
  }

  /**
   * Sets the value of the 'increaseInCash' field.
   * Increase In Cash   * @param value the value to set.
   */
  public void setIncreaseInCash(java.lang.CharSequence value) {
    this.increaseInCash = value;
  }

  /**
   * Gets the value of the 'exportSales' field.
   * Export Sales   */
  public java.lang.CharSequence getExportSales() {
    return exportSales;
  }

  /**
   * Sets the value of the 'exportSales' field.
   * Export Sales   * @param value the value to set.
   */
  public void setExportSales(java.lang.CharSequence value) {
    this.exportSales = value;
  }

  /**
   * Gets the value of the 'totalStaffCosts' field.
   * Total Staff Costs   */
  public java.lang.CharSequence getTotalStaffCosts() {
    return totalStaffCosts;
  }

  /**
   * Sets the value of the 'totalStaffCosts' field.
   * Total Staff Costs   * @param value the value to set.
   */
  public void setTotalStaffCosts(java.lang.CharSequence value) {
    this.totalStaffCosts = value;
  }

  /**
   * Gets the value of the 'numberOfEmployees' field.
   * Number of Employees   */
  public java.lang.CharSequence getNumberOfEmployees() {
    return numberOfEmployees;
  }

  /**
   * Sets the value of the 'numberOfEmployees' field.
   * Number of Employees   * @param value the value to set.
   */
  public void setNumberOfEmployees(java.lang.CharSequence value) {
    this.numberOfEmployees = value;
  }

  /**
   * Gets the value of the 'directorsEmolument' field.
   * Directors Emolument   */
  public java.lang.CharSequence getDirectorsEmolument() {
    return directorsEmolument;
  }

  /**
   * Sets the value of the 'directorsEmolument' field.
   * Directors Emolument   * @param value the value to set.
   */
  public void setDirectorsEmolument(java.lang.CharSequence value) {
    this.directorsEmolument = value;
  }

  /**
   * Gets the value of the 'externalInterestReceivable' field.
   * External Interest Receivable   */
  public java.lang.CharSequence getExternalInterestReceivable() {
    return externalInterestReceivable;
  }

  /**
   * Sets the value of the 'externalInterestReceivable' field.
   * External Interest Receivable   * @param value the value to set.
   */
  public void setExternalInterestReceivable(java.lang.CharSequence value) {
    this.externalInterestReceivable = value;
  }

  /**
   * Gets the value of the 'externalInterestPayable' field.
   * External Interest Payable   */
  public java.lang.CharSequence getExternalInterestPayable() {
    return externalInterestPayable;
  }

  /**
   * Sets the value of the 'externalInterestPayable' field.
   * External Interest Payable   * @param value the value to set.
   */
  public void setExternalInterestPayable(java.lang.CharSequence value) {
    this.externalInterestPayable = value;
  }

  /**
   * Gets the value of the 'tradeDebtors' field.
   * Trade Debtors   */
  public java.lang.CharSequence getTradeDebtors() {
    return tradeDebtors;
  }

  /**
   * Sets the value of the 'tradeDebtors' field.
   * Trade Debtors   * @param value the value to set.
   */
  public void setTradeDebtors(java.lang.CharSequence value) {
    this.tradeDebtors = value;
  }

  /**
   * Gets the value of the 'dueFromGroupCompanies' field.
   * Due From Group Companies   */
  public java.lang.CharSequence getDueFromGroupCompanies() {
    return dueFromGroupCompanies;
  }

  /**
   * Sets the value of the 'dueFromGroupCompanies' field.
   * Due From Group Companies   * @param value the value to set.
   */
  public void setDueFromGroupCompanies(java.lang.CharSequence value) {
    this.dueFromGroupCompanies = value;
  }

  /**
   * Gets the value of the 'tradeCreditors' field.
   * Trade Creditors   */
  public java.lang.CharSequence getTradeCreditors() {
    return tradeCreditors;
  }

  /**
   * Sets the value of the 'tradeCreditors' field.
   * Trade Creditors   * @param value the value to set.
   */
  public void setTradeCreditors(java.lang.CharSequence value) {
    this.tradeCreditors = value;
  }

  /**
   * Gets the value of the 'dueToGroupCompanies' field.
   * Due to Group Companies   */
  public java.lang.CharSequence getDueToGroupCompanies() {
    return dueToGroupCompanies;
  }

  /**
   * Sets the value of the 'dueToGroupCompanies' field.
   * Due to Group Companies   * @param value the value to set.
   */
  public void setDueToGroupCompanies(java.lang.CharSequence value) {
    this.dueToGroupCompanies = value;
  }

  /**
   * Gets the value of the 'directorsLoan' field.
   * Directors Loan   */
  public java.lang.CharSequence getDirectorsLoan() {
    return directorsLoan;
  }

  /**
   * Sets the value of the 'directorsLoan' field.
   * Directors Loan   * @param value the value to set.
   */
  public void setDirectorsLoan(java.lang.CharSequence value) {
    this.directorsLoan = value;
  }

  /**
   * Gets the value of the 'totalShortTermBorrowings' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields getTotalShortTermBorrowings() {
    return totalShortTermBorrowings;
  }

  /**
   * Sets the value of the 'totalShortTermBorrowings' field.
   * @param value the value to set.
   */
  public void setTotalShortTermBorrowings(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields value) {
    this.totalShortTermBorrowings = value;
  }

  /**
   * Gets the value of the 'longTermBorrowing' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields getLongTermBorrowing() {
    return longTermBorrowing;
  }

  /**
   * Sets the value of the 'longTermBorrowing' field.
   * @param value the value to set.
   */
  public void setLongTermBorrowing(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields value) {
    this.longTermBorrowing = value;
  }

  /**
   * Gets the value of the 'totalOtherLongTerm' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields getTotalOtherLongTerm() {
    return totalOtherLongTerm;
  }

  /**
   * Sets the value of the 'totalOtherLongTerm' field.
   * @param value the value to set.
   */
  public void setTotalOtherLongTerm(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields value) {
    this.totalOtherLongTerm = value;
  }

  /**
   * Gets the value of the 'other' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields getOther() {
    return other;
  }

  /**
   * Sets the value of the 'other' field.
   * @param value the value to set.
   */
  public void setOther(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields value) {
    this.other = value;
  }

  /**
   * Gets the value of the 'auditors' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields getAuditors() {
    return auditors;
  }

  /**
   * Sets the value of the 'auditors' field.
   * @param value the value to set.
   */
  public void setAuditors(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields value) {
    this.auditors = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * Currency symbol for the accounts   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * Currency symbol for the accounts   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'consolidated' field.
   * Consolidated   */
  public java.lang.CharSequence getConsolidated() {
    return consolidated;
  }

  /**
   * Sets the value of the 'consolidated' field.
   * Consolidated   * @param value the value to set.
   */
  public void setConsolidated(java.lang.CharSequence value) {
    this.consolidated = value;
  }

  /**
   * Gets the value of the 'scale' field.
   * The scale that should be applied to the figures   */
  public java.lang.CharSequence getScale() {
    return scale;
  }

  /**
   * Sets the value of the 'scale' field.
   * The scale that should be applied to the figures   * @param value the value to set.
   */
  public void setScale(java.lang.CharSequence value) {
    this.scale = value;
  }

  /**
   * Gets the value of the 'integers' field.
   * Integers   */
  public java.lang.CharSequence getIntegers() {
    return integers;
  }

  /**
   * Sets the value of the 'integers' field.
   * Integers   * @param value the value to set.
   */
  public void setIntegers(java.lang.CharSequence value) {
    this.integers = value;
  }

  /**
   * Gets the value of the 'referIndicator' field.
   * Refer Indicator - Code for any reason for referral   */
  public java.lang.CharSequence getReferIndicator() {
    return referIndicator;
  }

  /**
   * Sets the value of the 'referIndicator' field.
   * Refer Indicator - Code for any reason for referral   * @param value the value to set.
   */
  public void setReferIndicator(java.lang.CharSequence value) {
    this.referIndicator = value;
  }

  /**
   * Gets the value of the 'notKeyedIndicator' field.
   * Not Keyed Indicator   */
  public java.lang.CharSequence getNotKeyedIndicator() {
    return notKeyedIndicator;
  }

  /**
   * Sets the value of the 'notKeyedIndicator' field.
   * Not Keyed Indicator   * @param value the value to set.
   */
  public void setNotKeyedIndicator(java.lang.CharSequence value) {
    this.notKeyedIndicator = value;
  }

  /**
   * Gets the value of the 'didNotTrade' field.
   * Did Not Trade   */
  public java.lang.CharSequence getDidNotTrade() {
    return didNotTrade;
  }

  /**
   * Sets the value of the 'didNotTrade' field.
   * Did Not Trade   * @param value the value to set.
   */
  public void setDidNotTrade(java.lang.CharSequence value) {
    this.didNotTrade = value;
  }

  /**
   * Gets the value of the 'dormant' field.
   * Dormant   */
  public java.lang.CharSequence getDormant() {
    return dormant;
  }

  /**
   * Sets the value of the 'dormant' field.
   * Dormant   * @param value the value to set.
   */
  public void setDormant(java.lang.CharSequence value) {
    this.dormant = value;
  }

  /**
   * Gets the value of the 'ceasedToTradeDuringPeriod' field.
   * Ceased to Trade During Period   */
  public java.lang.CharSequence getCeasedToTradeDuringPeriod() {
    return ceasedToTradeDuringPeriod;
  }

  /**
   * Sets the value of the 'ceasedToTradeDuringPeriod' field.
   * Ceased to Trade During Period   * @param value the value to set.
   */
  public void setCeasedToTradeDuringPeriod(java.lang.CharSequence value) {
    this.ceasedToTradeDuringPeriod = value;
  }

  /**
   * Gets the value of the 'dateCeasedToTradeDuringPeriod' field.
   * Date Ceased to Trade During Period   */
  public java.lang.CharSequence getDateCeasedToTradeDuringPeriod() {
    return dateCeasedToTradeDuringPeriod;
  }

  /**
   * Sets the value of the 'dateCeasedToTradeDuringPeriod' field.
   * Date Ceased to Trade During Period   * @param value the value to set.
   */
  public void setDateCeasedToTradeDuringPeriod(java.lang.CharSequence value) {
    this.dateCeasedToTradeDuringPeriod = value;
  }

  /**
   * Gets the value of the 'ceasedTradeAfterPeriodEnd' field.
   * Ceased Trade After Period End   */
  public java.lang.CharSequence getCeasedTradeAfterPeriodEnd() {
    return ceasedTradeAfterPeriodEnd;
  }

  /**
   * Sets the value of the 'ceasedTradeAfterPeriodEnd' field.
   * Ceased Trade After Period End   * @param value the value to set.
   */
  public void setCeasedTradeAfterPeriodEnd(java.lang.CharSequence value) {
    this.ceasedTradeAfterPeriodEnd = value;
  }

  /**
   * Gets the value of the 'dateCeasedTradeAfterPeriodEnd' field.
   * Date Ceased Trade After Period End   */
  public java.lang.CharSequence getDateCeasedTradeAfterPeriodEnd() {
    return dateCeasedTradeAfterPeriodEnd;
  }

  /**
   * Sets the value of the 'dateCeasedTradeAfterPeriodEnd' field.
   * Date Ceased Trade After Period End   * @param value the value to set.
   */
  public void setDateCeasedTradeAfterPeriodEnd(java.lang.CharSequence value) {
    this.dateCeasedTradeAfterPeriodEnd = value;
  }

  /**
   * Gets the value of the 'transferredTrade' field.
   * Transferred Trade   */
  public java.lang.CharSequence getTransferredTrade() {
    return transferredTrade;
  }

  /**
   * Sets the value of the 'transferredTrade' field.
   * Transferred Trade   * @param value the value to set.
   */
  public void setTransferredTrade(java.lang.CharSequence value) {
    this.transferredTrade = value;
  }

  /**
   * Gets the value of the 'dateTransferredTrade' field.
   * Date Transferred Trade   */
  public java.lang.CharSequence getDateTransferredTrade() {
    return dateTransferredTrade;
  }

  /**
   * Sets the value of the 'dateTransferredTrade' field.
   * Date Transferred Trade   * @param value the value to set.
   */
  public void setDateTransferredTrade(java.lang.CharSequence value) {
    this.dateTransferredTrade = value;
  }

  /**
   * Gets the value of the 'nameOfPartyTradeIsTransferredTo' field.
   * Name of Party trade is Transferred to   */
  public java.lang.CharSequence getNameOfPartyTradeIsTransferredTo() {
    return nameOfPartyTradeIsTransferredTo;
  }

  /**
   * Sets the value of the 'nameOfPartyTradeIsTransferredTo' field.
   * Name of Party trade is Transferred to   * @param value the value to set.
   */
  public void setNameOfPartyTradeIsTransferredTo(java.lang.CharSequence value) {
    this.nameOfPartyTradeIsTransferredTo = value;
  }

  /**
   * Gets the value of the 'commencedTradeDuringPeriod' field.
   * Commenced Trade During Period   */
  public java.lang.CharSequence getCommencedTradeDuringPeriod() {
    return commencedTradeDuringPeriod;
  }

  /**
   * Sets the value of the 'commencedTradeDuringPeriod' field.
   * Commenced Trade During Period   * @param value the value to set.
   */
  public void setCommencedTradeDuringPeriod(java.lang.CharSequence value) {
    this.commencedTradeDuringPeriod = value;
  }

  /**
   * Gets the value of the 'dateCommencedTrade' field.
   * Date Commenced Trade   */
  public java.lang.CharSequence getDateCommencedTrade() {
    return dateCommencedTrade;
  }

  /**
   * Sets the value of the 'dateCommencedTrade' field.
   * Date Commenced Trade   * @param value the value to set.
   */
  public void setDateCommencedTrade(java.lang.CharSequence value) {
    this.dateCommencedTrade = value;
  }

  /**
   * Gets the value of the 'nameOfPartyActsAsAnAgentFor' field.
   * Name of Party Acts as an Agent For   */
  public java.lang.CharSequence getNameOfPartyActsAsAnAgentFor() {
    return nameOfPartyActsAsAnAgentFor;
  }

  /**
   * Sets the value of the 'nameOfPartyActsAsAnAgentFor' field.
   * Name of Party Acts as an Agent For   * @param value the value to set.
   */
  public void setNameOfPartyActsAsAnAgentFor(java.lang.CharSequence value) {
    this.nameOfPartyActsAsAnAgentFor = value;
  }

  /**
   * Gets the value of the 'ultimateHoldingCompany' field.
   * Ultimate Holding company   */
  public java.lang.CharSequence getUltimateHoldingCompany() {
    return ultimateHoldingCompany;
  }

  /**
   * Sets the value of the 'ultimateHoldingCompany' field.
   * Ultimate Holding company   * @param value the value to set.
   */
  public void setUltimateHoldingCompany(java.lang.CharSequence value) {
    this.ultimateHoldingCompany = value;
  }

  /**
   * Gets the value of the 'actsAsAnAgent' field.
   * Acts as an Agent   */
  public java.lang.CharSequence getActsAsAnAgent() {
    return actsAsAnAgent;
  }

  /**
   * Sets the value of the 'actsAsAnAgent' field.
   * Acts as an Agent   * @param value the value to set.
   */
  public void setActsAsAnAgent(java.lang.CharSequence value) {
    this.actsAsAnAgent = value;
  }

  /**
   * Gets the value of the 'countryOfIncorporation' field.
   * Country of Incorporation   */
  public java.lang.CharSequence getCountryOfIncorporation() {
    return countryOfIncorporation;
  }

  /**
   * Sets the value of the 'countryOfIncorporation' field.
   * Country of Incorporation   * @param value the value to set.
   */
  public void setCountryOfIncorporation(java.lang.CharSequence value) {
    this.countryOfIncorporation = value;
  }

  /**
   * Gets the value of the 'miscellaneousItems' field.
   */
  public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields getMiscellaneousItems() {
    return miscellaneousItems;
  }

  /**
   * Sets the value of the 'miscellaneousItems' field.
   * @param value the value to set.
   */
  public void setMiscellaneousItems(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields value) {
    this.miscellaneousItems = value;
  }

  /**
   * Gets the value of the 'depreciation' field.
   * Depreciation   */
  public java.lang.CharSequence getDepreciation() {
    return depreciation;
  }

  /**
   * Sets the value of the 'depreciation' field.
   * Depreciation   * @param value the value to set.
   */
  public void setDepreciation(java.lang.CharSequence value) {
    this.depreciation = value;
  }

  /**
   * Gets the value of the 'operatingProfit' field.
   * Operating Profit   */
  public java.lang.CharSequence getOperatingProfit() {
    return operatingProfit;
  }

  /**
   * Sets the value of the 'operatingProfit' field.
   * Operating Profit   * @param value the value to set.
   */
  public void setOperatingProfit(java.lang.CharSequence value) {
    this.operatingProfit = value;
  }

  /**
   * Gets the value of the 'netCashFlowFromRoiAndServicingOfFinance' field.
   * Net Cashflow From RoI and Servicing of Finance   */
  public java.lang.CharSequence getNetCashFlowFromRoiAndServicingOfFinance() {
    return netCashFlowFromRoiAndServicingOfFinance;
  }

  /**
   * Sets the value of the 'netCashFlowFromRoiAndServicingOfFinance' field.
   * Net Cashflow From RoI and Servicing of Finance   * @param value the value to set.
   */
  public void setNetCashFlowFromRoiAndServicingOfFinance(java.lang.CharSequence value) {
    this.netCashFlowFromRoiAndServicingOfFinance = value;
  }

  /**
   * Gets the value of the 'netCashFlowBeforeFinancing' field.
   * Net Cashflow Before Financing   */
  public java.lang.CharSequence getNetCashFlowBeforeFinancing() {
    return netCashFlowBeforeFinancing;
  }

  /**
   * Sets the value of the 'netCashFlowBeforeFinancing' field.
   * Net Cashflow Before Financing   * @param value the value to set.
   */
  public void setNetCashFlowBeforeFinancing(java.lang.CharSequence value) {
    this.netCashFlowBeforeFinancing = value;
  }

  /**
   * Gets the value of the 'netCashFlowFromFinancing' field.
   * Net Cashflow From Financing   */
  public java.lang.CharSequence getNetCashFlowFromFinancing() {
    return netCashFlowFromFinancing;
  }

  /**
   * Sets the value of the 'netCashFlowFromFinancing' field.
   * Net Cashflow From Financing   * @param value the value to set.
   */
  public void setNetCashFlowFromFinancing(java.lang.CharSequence value) {
    this.netCashFlowFromFinancing = value;
  }

  /**
   * Gets the value of the 'contingentLiability' field.
   * Contingent Liability   */
  public java.lang.CharSequence getContingentLiability() {
    return contingentLiability;
  }

  /**
   * Sets the value of the 'contingentLiability' field.
   * Contingent Liability   * @param value the value to set.
   */
  public void setContingentLiability(java.lang.CharSequence value) {
    this.contingentLiability = value;
  }

  /** Creates a new Data RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder();
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder(other);
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Data instance */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder(other);
  }
  
  /**
   * RecordBuilder for Data instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
    implements org.apache.avro.data.RecordBuilder<Data> {

    private java.lang.CharSequence companyNumber;
    private java.lang.CharSequence dateOfFiscalPeriod;
    private java.lang.CharSequence accountingMonths;
    private java.lang.CharSequence tradingMonths;
    private java.lang.CharSequence turnover;
    private java.lang.CharSequence grossProfit;
    private java.lang.CharSequence exceptionalIncome;
    private java.lang.CharSequence exceptionalCharges;
    private java.lang.CharSequence preTaxProfit;
    private java.lang.CharSequence postTaxProfit;
    private java.lang.CharSequence dividends;
    private java.lang.CharSequence tangibleFixedAssets;
    private java.lang.CharSequence intangibleFixedAssets;
    private java.lang.CharSequence fixedAssetInvestment;
    private java.lang.CharSequence totalStock;
    private java.lang.CharSequence totalCash;
    private java.lang.CharSequence totalCurrentAssets;
    private java.lang.CharSequence currentLiabilities;
    private java.lang.CharSequence workingCapital;
    private java.lang.CharSequence calledUpShareCapital;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields totalReserves;
    private java.lang.CharSequence netWorth;
    private java.lang.CharSequence netCashInflow;
    private java.lang.CharSequence increaseInCash;
    private java.lang.CharSequence exportSales;
    private java.lang.CharSequence totalStaffCosts;
    private java.lang.CharSequence numberOfEmployees;
    private java.lang.CharSequence directorsEmolument;
    private java.lang.CharSequence externalInterestReceivable;
    private java.lang.CharSequence externalInterestPayable;
    private java.lang.CharSequence tradeDebtors;
    private java.lang.CharSequence dueFromGroupCompanies;
    private java.lang.CharSequence tradeCreditors;
    private java.lang.CharSequence dueToGroupCompanies;
    private java.lang.CharSequence directorsLoan;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields totalShortTermBorrowings;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields longTermBorrowing;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields totalOtherLongTerm;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields other;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields auditors;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence consolidated;
    private java.lang.CharSequence scale;
    private java.lang.CharSequence integers;
    private java.lang.CharSequence referIndicator;
    private java.lang.CharSequence notKeyedIndicator;
    private java.lang.CharSequence didNotTrade;
    private java.lang.CharSequence dormant;
    private java.lang.CharSequence ceasedToTradeDuringPeriod;
    private java.lang.CharSequence dateCeasedToTradeDuringPeriod;
    private java.lang.CharSequence ceasedTradeAfterPeriodEnd;
    private java.lang.CharSequence dateCeasedTradeAfterPeriodEnd;
    private java.lang.CharSequence transferredTrade;
    private java.lang.CharSequence dateTransferredTrade;
    private java.lang.CharSequence nameOfPartyTradeIsTransferredTo;
    private java.lang.CharSequence commencedTradeDuringPeriod;
    private java.lang.CharSequence dateCommencedTrade;
    private java.lang.CharSequence nameOfPartyActsAsAnAgentFor;
    private java.lang.CharSequence ultimateHoldingCompany;
    private java.lang.CharSequence actsAsAnAgent;
    private java.lang.CharSequence countryOfIncorporation;
    private com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields miscellaneousItems;
    private java.lang.CharSequence depreciation;
    private java.lang.CharSequence operatingProfit;
    private java.lang.CharSequence netCashFlowFromRoiAndServicingOfFinance;
    private java.lang.CharSequence netCashFlowBeforeFinancing;
    private java.lang.CharSequence netCashFlowFromFinancing;
    private java.lang.CharSequence contingentLiability;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.companyNumber)) {
        this.companyNumber = data().deepCopy(fields()[0].schema(), other.companyNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dateOfFiscalPeriod)) {
        this.dateOfFiscalPeriod = data().deepCopy(fields()[1].schema(), other.dateOfFiscalPeriod);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountingMonths)) {
        this.accountingMonths = data().deepCopy(fields()[2].schema(), other.accountingMonths);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tradingMonths)) {
        this.tradingMonths = data().deepCopy(fields()[3].schema(), other.tradingMonths);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.turnover)) {
        this.turnover = data().deepCopy(fields()[4].schema(), other.turnover);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.grossProfit)) {
        this.grossProfit = data().deepCopy(fields()[5].schema(), other.grossProfit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exceptionalIncome)) {
        this.exceptionalIncome = data().deepCopy(fields()[6].schema(), other.exceptionalIncome);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.exceptionalCharges)) {
        this.exceptionalCharges = data().deepCopy(fields()[7].schema(), other.exceptionalCharges);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.preTaxProfit)) {
        this.preTaxProfit = data().deepCopy(fields()[8].schema(), other.preTaxProfit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.postTaxProfit)) {
        this.postTaxProfit = data().deepCopy(fields()[9].schema(), other.postTaxProfit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dividends)) {
        this.dividends = data().deepCopy(fields()[10].schema(), other.dividends);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tangibleFixedAssets)) {
        this.tangibleFixedAssets = data().deepCopy(fields()[11].schema(), other.tangibleFixedAssets);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.intangibleFixedAssets)) {
        this.intangibleFixedAssets = data().deepCopy(fields()[12].schema(), other.intangibleFixedAssets);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.fixedAssetInvestment)) {
        this.fixedAssetInvestment = data().deepCopy(fields()[13].schema(), other.fixedAssetInvestment);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.totalStock)) {
        this.totalStock = data().deepCopy(fields()[14].schema(), other.totalStock);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.totalCash)) {
        this.totalCash = data().deepCopy(fields()[15].schema(), other.totalCash);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.totalCurrentAssets)) {
        this.totalCurrentAssets = data().deepCopy(fields()[16].schema(), other.totalCurrentAssets);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.currentLiabilities)) {
        this.currentLiabilities = data().deepCopy(fields()[17].schema(), other.currentLiabilities);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.workingCapital)) {
        this.workingCapital = data().deepCopy(fields()[18].schema(), other.workingCapital);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.calledUpShareCapital)) {
        this.calledUpShareCapital = data().deepCopy(fields()[19].schema(), other.calledUpShareCapital);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.totalReserves)) {
        this.totalReserves = data().deepCopy(fields()[20].schema(), other.totalReserves);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.netWorth)) {
        this.netWorth = data().deepCopy(fields()[21].schema(), other.netWorth);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.netCashInflow)) {
        this.netCashInflow = data().deepCopy(fields()[22].schema(), other.netCashInflow);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.increaseInCash)) {
        this.increaseInCash = data().deepCopy(fields()[23].schema(), other.increaseInCash);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.exportSales)) {
        this.exportSales = data().deepCopy(fields()[24].schema(), other.exportSales);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalStaffCosts)) {
        this.totalStaffCosts = data().deepCopy(fields()[25].schema(), other.totalStaffCosts);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.numberOfEmployees)) {
        this.numberOfEmployees = data().deepCopy(fields()[26].schema(), other.numberOfEmployees);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.directorsEmolument)) {
        this.directorsEmolument = data().deepCopy(fields()[27].schema(), other.directorsEmolument);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.externalInterestReceivable)) {
        this.externalInterestReceivable = data().deepCopy(fields()[28].schema(), other.externalInterestReceivable);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.externalInterestPayable)) {
        this.externalInterestPayable = data().deepCopy(fields()[29].schema(), other.externalInterestPayable);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.tradeDebtors)) {
        this.tradeDebtors = data().deepCopy(fields()[30].schema(), other.tradeDebtors);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.dueFromGroupCompanies)) {
        this.dueFromGroupCompanies = data().deepCopy(fields()[31].schema(), other.dueFromGroupCompanies);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.tradeCreditors)) {
        this.tradeCreditors = data().deepCopy(fields()[32].schema(), other.tradeCreditors);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.dueToGroupCompanies)) {
        this.dueToGroupCompanies = data().deepCopy(fields()[33].schema(), other.dueToGroupCompanies);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.directorsLoan)) {
        this.directorsLoan = data().deepCopy(fields()[34].schema(), other.directorsLoan);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.totalShortTermBorrowings)) {
        this.totalShortTermBorrowings = data().deepCopy(fields()[35].schema(), other.totalShortTermBorrowings);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.longTermBorrowing)) {
        this.longTermBorrowing = data().deepCopy(fields()[36].schema(), other.longTermBorrowing);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.totalOtherLongTerm)) {
        this.totalOtherLongTerm = data().deepCopy(fields()[37].schema(), other.totalOtherLongTerm);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.other)) {
        this.other = data().deepCopy(fields()[38].schema(), other.other);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.auditors)) {
        this.auditors = data().deepCopy(fields()[39].schema(), other.auditors);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.currency)) {
        this.currency = data().deepCopy(fields()[40].schema(), other.currency);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.consolidated)) {
        this.consolidated = data().deepCopy(fields()[41].schema(), other.consolidated);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.scale)) {
        this.scale = data().deepCopy(fields()[42].schema(), other.scale);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.integers)) {
        this.integers = data().deepCopy(fields()[43].schema(), other.integers);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.referIndicator)) {
        this.referIndicator = data().deepCopy(fields()[44].schema(), other.referIndicator);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.notKeyedIndicator)) {
        this.notKeyedIndicator = data().deepCopy(fields()[45].schema(), other.notKeyedIndicator);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.didNotTrade)) {
        this.didNotTrade = data().deepCopy(fields()[46].schema(), other.didNotTrade);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.dormant)) {
        this.dormant = data().deepCopy(fields()[47].schema(), other.dormant);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.ceasedToTradeDuringPeriod)) {
        this.ceasedToTradeDuringPeriod = data().deepCopy(fields()[48].schema(), other.ceasedToTradeDuringPeriod);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.dateCeasedToTradeDuringPeriod)) {
        this.dateCeasedToTradeDuringPeriod = data().deepCopy(fields()[49].schema(), other.dateCeasedToTradeDuringPeriod);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.ceasedTradeAfterPeriodEnd)) {
        this.ceasedTradeAfterPeriodEnd = data().deepCopy(fields()[50].schema(), other.ceasedTradeAfterPeriodEnd);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.dateCeasedTradeAfterPeriodEnd)) {
        this.dateCeasedTradeAfterPeriodEnd = data().deepCopy(fields()[51].schema(), other.dateCeasedTradeAfterPeriodEnd);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.transferredTrade)) {
        this.transferredTrade = data().deepCopy(fields()[52].schema(), other.transferredTrade);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.dateTransferredTrade)) {
        this.dateTransferredTrade = data().deepCopy(fields()[53].schema(), other.dateTransferredTrade);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.nameOfPartyTradeIsTransferredTo)) {
        this.nameOfPartyTradeIsTransferredTo = data().deepCopy(fields()[54].schema(), other.nameOfPartyTradeIsTransferredTo);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.commencedTradeDuringPeriod)) {
        this.commencedTradeDuringPeriod = data().deepCopy(fields()[55].schema(), other.commencedTradeDuringPeriod);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.dateCommencedTrade)) {
        this.dateCommencedTrade = data().deepCopy(fields()[56].schema(), other.dateCommencedTrade);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.nameOfPartyActsAsAnAgentFor)) {
        this.nameOfPartyActsAsAnAgentFor = data().deepCopy(fields()[57].schema(), other.nameOfPartyActsAsAnAgentFor);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.ultimateHoldingCompany)) {
        this.ultimateHoldingCompany = data().deepCopy(fields()[58].schema(), other.ultimateHoldingCompany);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.actsAsAnAgent)) {
        this.actsAsAnAgent = data().deepCopy(fields()[59].schema(), other.actsAsAnAgent);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.countryOfIncorporation)) {
        this.countryOfIncorporation = data().deepCopy(fields()[60].schema(), other.countryOfIncorporation);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.miscellaneousItems)) {
        this.miscellaneousItems = data().deepCopy(fields()[61].schema(), other.miscellaneousItems);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.depreciation)) {
        this.depreciation = data().deepCopy(fields()[62].schema(), other.depreciation);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.operatingProfit)) {
        this.operatingProfit = data().deepCopy(fields()[63].schema(), other.operatingProfit);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.netCashFlowFromRoiAndServicingOfFinance)) {
        this.netCashFlowFromRoiAndServicingOfFinance = data().deepCopy(fields()[64].schema(), other.netCashFlowFromRoiAndServicingOfFinance);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.netCashFlowBeforeFinancing)) {
        this.netCashFlowBeforeFinancing = data().deepCopy(fields()[65].schema(), other.netCashFlowBeforeFinancing);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.netCashFlowFromFinancing)) {
        this.netCashFlowFromFinancing = data().deepCopy(fields()[66].schema(), other.netCashFlowFromFinancing);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.contingentLiability)) {
        this.contingentLiability = data().deepCopy(fields()[67].schema(), other.contingentLiability);
        fieldSetFlags()[67] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Data instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data other) {
            super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.SCHEMA$);
      if (isValidValue(fields()[0], other.companyNumber)) {
        this.companyNumber = data().deepCopy(fields()[0].schema(), other.companyNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dateOfFiscalPeriod)) {
        this.dateOfFiscalPeriod = data().deepCopy(fields()[1].schema(), other.dateOfFiscalPeriod);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountingMonths)) {
        this.accountingMonths = data().deepCopy(fields()[2].schema(), other.accountingMonths);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tradingMonths)) {
        this.tradingMonths = data().deepCopy(fields()[3].schema(), other.tradingMonths);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.turnover)) {
        this.turnover = data().deepCopy(fields()[4].schema(), other.turnover);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.grossProfit)) {
        this.grossProfit = data().deepCopy(fields()[5].schema(), other.grossProfit);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exceptionalIncome)) {
        this.exceptionalIncome = data().deepCopy(fields()[6].schema(), other.exceptionalIncome);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.exceptionalCharges)) {
        this.exceptionalCharges = data().deepCopy(fields()[7].schema(), other.exceptionalCharges);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.preTaxProfit)) {
        this.preTaxProfit = data().deepCopy(fields()[8].schema(), other.preTaxProfit);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.postTaxProfit)) {
        this.postTaxProfit = data().deepCopy(fields()[9].schema(), other.postTaxProfit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dividends)) {
        this.dividends = data().deepCopy(fields()[10].schema(), other.dividends);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.tangibleFixedAssets)) {
        this.tangibleFixedAssets = data().deepCopy(fields()[11].schema(), other.tangibleFixedAssets);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.intangibleFixedAssets)) {
        this.intangibleFixedAssets = data().deepCopy(fields()[12].schema(), other.intangibleFixedAssets);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.fixedAssetInvestment)) {
        this.fixedAssetInvestment = data().deepCopy(fields()[13].schema(), other.fixedAssetInvestment);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.totalStock)) {
        this.totalStock = data().deepCopy(fields()[14].schema(), other.totalStock);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.totalCash)) {
        this.totalCash = data().deepCopy(fields()[15].schema(), other.totalCash);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.totalCurrentAssets)) {
        this.totalCurrentAssets = data().deepCopy(fields()[16].schema(), other.totalCurrentAssets);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.currentLiabilities)) {
        this.currentLiabilities = data().deepCopy(fields()[17].schema(), other.currentLiabilities);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.workingCapital)) {
        this.workingCapital = data().deepCopy(fields()[18].schema(), other.workingCapital);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.calledUpShareCapital)) {
        this.calledUpShareCapital = data().deepCopy(fields()[19].schema(), other.calledUpShareCapital);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.totalReserves)) {
        this.totalReserves = data().deepCopy(fields()[20].schema(), other.totalReserves);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.netWorth)) {
        this.netWorth = data().deepCopy(fields()[21].schema(), other.netWorth);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.netCashInflow)) {
        this.netCashInflow = data().deepCopy(fields()[22].schema(), other.netCashInflow);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.increaseInCash)) {
        this.increaseInCash = data().deepCopy(fields()[23].schema(), other.increaseInCash);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.exportSales)) {
        this.exportSales = data().deepCopy(fields()[24].schema(), other.exportSales);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.totalStaffCosts)) {
        this.totalStaffCosts = data().deepCopy(fields()[25].schema(), other.totalStaffCosts);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.numberOfEmployees)) {
        this.numberOfEmployees = data().deepCopy(fields()[26].schema(), other.numberOfEmployees);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.directorsEmolument)) {
        this.directorsEmolument = data().deepCopy(fields()[27].schema(), other.directorsEmolument);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.externalInterestReceivable)) {
        this.externalInterestReceivable = data().deepCopy(fields()[28].schema(), other.externalInterestReceivable);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.externalInterestPayable)) {
        this.externalInterestPayable = data().deepCopy(fields()[29].schema(), other.externalInterestPayable);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.tradeDebtors)) {
        this.tradeDebtors = data().deepCopy(fields()[30].schema(), other.tradeDebtors);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.dueFromGroupCompanies)) {
        this.dueFromGroupCompanies = data().deepCopy(fields()[31].schema(), other.dueFromGroupCompanies);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.tradeCreditors)) {
        this.tradeCreditors = data().deepCopy(fields()[32].schema(), other.tradeCreditors);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.dueToGroupCompanies)) {
        this.dueToGroupCompanies = data().deepCopy(fields()[33].schema(), other.dueToGroupCompanies);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.directorsLoan)) {
        this.directorsLoan = data().deepCopy(fields()[34].schema(), other.directorsLoan);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.totalShortTermBorrowings)) {
        this.totalShortTermBorrowings = data().deepCopy(fields()[35].schema(), other.totalShortTermBorrowings);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.longTermBorrowing)) {
        this.longTermBorrowing = data().deepCopy(fields()[36].schema(), other.longTermBorrowing);
        fieldSetFlags()[36] = true;
      }
      if (isValidValue(fields()[37], other.totalOtherLongTerm)) {
        this.totalOtherLongTerm = data().deepCopy(fields()[37].schema(), other.totalOtherLongTerm);
        fieldSetFlags()[37] = true;
      }
      if (isValidValue(fields()[38], other.other)) {
        this.other = data().deepCopy(fields()[38].schema(), other.other);
        fieldSetFlags()[38] = true;
      }
      if (isValidValue(fields()[39], other.auditors)) {
        this.auditors = data().deepCopy(fields()[39].schema(), other.auditors);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.currency)) {
        this.currency = data().deepCopy(fields()[40].schema(), other.currency);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.consolidated)) {
        this.consolidated = data().deepCopy(fields()[41].schema(), other.consolidated);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.scale)) {
        this.scale = data().deepCopy(fields()[42].schema(), other.scale);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.integers)) {
        this.integers = data().deepCopy(fields()[43].schema(), other.integers);
        fieldSetFlags()[43] = true;
      }
      if (isValidValue(fields()[44], other.referIndicator)) {
        this.referIndicator = data().deepCopy(fields()[44].schema(), other.referIndicator);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.notKeyedIndicator)) {
        this.notKeyedIndicator = data().deepCopy(fields()[45].schema(), other.notKeyedIndicator);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.didNotTrade)) {
        this.didNotTrade = data().deepCopy(fields()[46].schema(), other.didNotTrade);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.dormant)) {
        this.dormant = data().deepCopy(fields()[47].schema(), other.dormant);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.ceasedToTradeDuringPeriod)) {
        this.ceasedToTradeDuringPeriod = data().deepCopy(fields()[48].schema(), other.ceasedToTradeDuringPeriod);
        fieldSetFlags()[48] = true;
      }
      if (isValidValue(fields()[49], other.dateCeasedToTradeDuringPeriod)) {
        this.dateCeasedToTradeDuringPeriod = data().deepCopy(fields()[49].schema(), other.dateCeasedToTradeDuringPeriod);
        fieldSetFlags()[49] = true;
      }
      if (isValidValue(fields()[50], other.ceasedTradeAfterPeriodEnd)) {
        this.ceasedTradeAfterPeriodEnd = data().deepCopy(fields()[50].schema(), other.ceasedTradeAfterPeriodEnd);
        fieldSetFlags()[50] = true;
      }
      if (isValidValue(fields()[51], other.dateCeasedTradeAfterPeriodEnd)) {
        this.dateCeasedTradeAfterPeriodEnd = data().deepCopy(fields()[51].schema(), other.dateCeasedTradeAfterPeriodEnd);
        fieldSetFlags()[51] = true;
      }
      if (isValidValue(fields()[52], other.transferredTrade)) {
        this.transferredTrade = data().deepCopy(fields()[52].schema(), other.transferredTrade);
        fieldSetFlags()[52] = true;
      }
      if (isValidValue(fields()[53], other.dateTransferredTrade)) {
        this.dateTransferredTrade = data().deepCopy(fields()[53].schema(), other.dateTransferredTrade);
        fieldSetFlags()[53] = true;
      }
      if (isValidValue(fields()[54], other.nameOfPartyTradeIsTransferredTo)) {
        this.nameOfPartyTradeIsTransferredTo = data().deepCopy(fields()[54].schema(), other.nameOfPartyTradeIsTransferredTo);
        fieldSetFlags()[54] = true;
      }
      if (isValidValue(fields()[55], other.commencedTradeDuringPeriod)) {
        this.commencedTradeDuringPeriod = data().deepCopy(fields()[55].schema(), other.commencedTradeDuringPeriod);
        fieldSetFlags()[55] = true;
      }
      if (isValidValue(fields()[56], other.dateCommencedTrade)) {
        this.dateCommencedTrade = data().deepCopy(fields()[56].schema(), other.dateCommencedTrade);
        fieldSetFlags()[56] = true;
      }
      if (isValidValue(fields()[57], other.nameOfPartyActsAsAnAgentFor)) {
        this.nameOfPartyActsAsAnAgentFor = data().deepCopy(fields()[57].schema(), other.nameOfPartyActsAsAnAgentFor);
        fieldSetFlags()[57] = true;
      }
      if (isValidValue(fields()[58], other.ultimateHoldingCompany)) {
        this.ultimateHoldingCompany = data().deepCopy(fields()[58].schema(), other.ultimateHoldingCompany);
        fieldSetFlags()[58] = true;
      }
      if (isValidValue(fields()[59], other.actsAsAnAgent)) {
        this.actsAsAnAgent = data().deepCopy(fields()[59].schema(), other.actsAsAnAgent);
        fieldSetFlags()[59] = true;
      }
      if (isValidValue(fields()[60], other.countryOfIncorporation)) {
        this.countryOfIncorporation = data().deepCopy(fields()[60].schema(), other.countryOfIncorporation);
        fieldSetFlags()[60] = true;
      }
      if (isValidValue(fields()[61], other.miscellaneousItems)) {
        this.miscellaneousItems = data().deepCopy(fields()[61].schema(), other.miscellaneousItems);
        fieldSetFlags()[61] = true;
      }
      if (isValidValue(fields()[62], other.depreciation)) {
        this.depreciation = data().deepCopy(fields()[62].schema(), other.depreciation);
        fieldSetFlags()[62] = true;
      }
      if (isValidValue(fields()[63], other.operatingProfit)) {
        this.operatingProfit = data().deepCopy(fields()[63].schema(), other.operatingProfit);
        fieldSetFlags()[63] = true;
      }
      if (isValidValue(fields()[64], other.netCashFlowFromRoiAndServicingOfFinance)) {
        this.netCashFlowFromRoiAndServicingOfFinance = data().deepCopy(fields()[64].schema(), other.netCashFlowFromRoiAndServicingOfFinance);
        fieldSetFlags()[64] = true;
      }
      if (isValidValue(fields()[65], other.netCashFlowBeforeFinancing)) {
        this.netCashFlowBeforeFinancing = data().deepCopy(fields()[65].schema(), other.netCashFlowBeforeFinancing);
        fieldSetFlags()[65] = true;
      }
      if (isValidValue(fields()[66], other.netCashFlowFromFinancing)) {
        this.netCashFlowFromFinancing = data().deepCopy(fields()[66].schema(), other.netCashFlowFromFinancing);
        fieldSetFlags()[66] = true;
      }
      if (isValidValue(fields()[67], other.contingentLiability)) {
        this.contingentLiability = data().deepCopy(fields()[67].schema(), other.contingentLiability);
        fieldSetFlags()[67] = true;
      }
    }

    /** Gets the value of the 'companyNumber' field */
    public java.lang.CharSequence getCompanyNumber() {
      return companyNumber;
    }
    
    /** Sets the value of the 'companyNumber' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCompanyNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.companyNumber = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'companyNumber' field has been set */
    public boolean hasCompanyNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'companyNumber' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCompanyNumber() {
      companyNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dateOfFiscalPeriod' field */
    public java.lang.CharSequence getDateOfFiscalPeriod() {
      return dateOfFiscalPeriod;
    }
    
    /** Sets the value of the 'dateOfFiscalPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDateOfFiscalPeriod(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dateOfFiscalPeriod = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dateOfFiscalPeriod' field has been set */
    public boolean hasDateOfFiscalPeriod() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dateOfFiscalPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDateOfFiscalPeriod() {
      dateOfFiscalPeriod = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'accountingMonths' field */
    public java.lang.CharSequence getAccountingMonths() {
      return accountingMonths;
    }
    
    /** Sets the value of the 'accountingMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setAccountingMonths(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.accountingMonths = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'accountingMonths' field has been set */
    public boolean hasAccountingMonths() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'accountingMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearAccountingMonths() {
      accountingMonths = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'tradingMonths' field */
    public java.lang.CharSequence getTradingMonths() {
      return tradingMonths;
    }
    
    /** Sets the value of the 'tradingMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTradingMonths(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tradingMonths = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'tradingMonths' field has been set */
    public boolean hasTradingMonths() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'tradingMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTradingMonths() {
      tradingMonths = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'turnover' field */
    public java.lang.CharSequence getTurnover() {
      return turnover;
    }
    
    /** Sets the value of the 'turnover' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTurnover(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.turnover = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'turnover' field has been set */
    public boolean hasTurnover() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'turnover' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTurnover() {
      turnover = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'grossProfit' field */
    public java.lang.CharSequence getGrossProfit() {
      return grossProfit;
    }
    
    /** Sets the value of the 'grossProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setGrossProfit(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.grossProfit = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'grossProfit' field has been set */
    public boolean hasGrossProfit() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'grossProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearGrossProfit() {
      grossProfit = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'exceptionalIncome' field */
    public java.lang.CharSequence getExceptionalIncome() {
      return exceptionalIncome;
    }
    
    /** Sets the value of the 'exceptionalIncome' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setExceptionalIncome(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.exceptionalIncome = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'exceptionalIncome' field has been set */
    public boolean hasExceptionalIncome() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'exceptionalIncome' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearExceptionalIncome() {
      exceptionalIncome = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'exceptionalCharges' field */
    public java.lang.CharSequence getExceptionalCharges() {
      return exceptionalCharges;
    }
    
    /** Sets the value of the 'exceptionalCharges' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setExceptionalCharges(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.exceptionalCharges = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'exceptionalCharges' field has been set */
    public boolean hasExceptionalCharges() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'exceptionalCharges' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearExceptionalCharges() {
      exceptionalCharges = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'preTaxProfit' field */
    public java.lang.CharSequence getPreTaxProfit() {
      return preTaxProfit;
    }
    
    /** Sets the value of the 'preTaxProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setPreTaxProfit(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.preTaxProfit = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'preTaxProfit' field has been set */
    public boolean hasPreTaxProfit() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'preTaxProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearPreTaxProfit() {
      preTaxProfit = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'postTaxProfit' field */
    public java.lang.CharSequence getPostTaxProfit() {
      return postTaxProfit;
    }
    
    /** Sets the value of the 'postTaxProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setPostTaxProfit(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.postTaxProfit = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'postTaxProfit' field has been set */
    public boolean hasPostTaxProfit() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'postTaxProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearPostTaxProfit() {
      postTaxProfit = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'dividends' field */
    public java.lang.CharSequence getDividends() {
      return dividends;
    }
    
    /** Sets the value of the 'dividends' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDividends(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.dividends = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'dividends' field has been set */
    public boolean hasDividends() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'dividends' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDividends() {
      dividends = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'tangibleFixedAssets' field */
    public java.lang.CharSequence getTangibleFixedAssets() {
      return tangibleFixedAssets;
    }
    
    /** Sets the value of the 'tangibleFixedAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTangibleFixedAssets(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.tangibleFixedAssets = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'tangibleFixedAssets' field has been set */
    public boolean hasTangibleFixedAssets() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'tangibleFixedAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTangibleFixedAssets() {
      tangibleFixedAssets = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'intangibleFixedAssets' field */
    public java.lang.CharSequence getIntangibleFixedAssets() {
      return intangibleFixedAssets;
    }
    
    /** Sets the value of the 'intangibleFixedAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setIntangibleFixedAssets(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.intangibleFixedAssets = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'intangibleFixedAssets' field has been set */
    public boolean hasIntangibleFixedAssets() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'intangibleFixedAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearIntangibleFixedAssets() {
      intangibleFixedAssets = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'fixedAssetInvestment' field */
    public java.lang.CharSequence getFixedAssetInvestment() {
      return fixedAssetInvestment;
    }
    
    /** Sets the value of the 'fixedAssetInvestment' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setFixedAssetInvestment(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.fixedAssetInvestment = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'fixedAssetInvestment' field has been set */
    public boolean hasFixedAssetInvestment() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'fixedAssetInvestment' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearFixedAssetInvestment() {
      fixedAssetInvestment = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'totalStock' field */
    public java.lang.CharSequence getTotalStock() {
      return totalStock;
    }
    
    /** Sets the value of the 'totalStock' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalStock(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.totalStock = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'totalStock' field has been set */
    public boolean hasTotalStock() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'totalStock' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalStock() {
      totalStock = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'totalCash' field */
    public java.lang.CharSequence getTotalCash() {
      return totalCash;
    }
    
    /** Sets the value of the 'totalCash' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalCash(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.totalCash = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'totalCash' field has been set */
    public boolean hasTotalCash() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'totalCash' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalCash() {
      totalCash = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'totalCurrentAssets' field */
    public java.lang.CharSequence getTotalCurrentAssets() {
      return totalCurrentAssets;
    }
    
    /** Sets the value of the 'totalCurrentAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalCurrentAssets(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.totalCurrentAssets = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'totalCurrentAssets' field has been set */
    public boolean hasTotalCurrentAssets() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'totalCurrentAssets' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalCurrentAssets() {
      totalCurrentAssets = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'currentLiabilities' field */
    public java.lang.CharSequence getCurrentLiabilities() {
      return currentLiabilities;
    }
    
    /** Sets the value of the 'currentLiabilities' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCurrentLiabilities(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.currentLiabilities = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'currentLiabilities' field has been set */
    public boolean hasCurrentLiabilities() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'currentLiabilities' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCurrentLiabilities() {
      currentLiabilities = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'workingCapital' field */
    public java.lang.CharSequence getWorkingCapital() {
      return workingCapital;
    }
    
    /** Sets the value of the 'workingCapital' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setWorkingCapital(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.workingCapital = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'workingCapital' field has been set */
    public boolean hasWorkingCapital() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'workingCapital' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearWorkingCapital() {
      workingCapital = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'calledUpShareCapital' field */
    public java.lang.CharSequence getCalledUpShareCapital() {
      return calledUpShareCapital;
    }
    
    /** Sets the value of the 'calledUpShareCapital' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCalledUpShareCapital(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.calledUpShareCapital = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'calledUpShareCapital' field has been set */
    public boolean hasCalledUpShareCapital() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'calledUpShareCapital' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCalledUpShareCapital() {
      calledUpShareCapital = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'totalReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields getTotalReserves() {
      return totalReserves;
    }
    
    /** Sets the value of the 'totalReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalReserves(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields value) {
      validate(fields()[20], value);
      this.totalReserves = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'totalReserves' field has been set */
    public boolean hasTotalReserves() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'totalReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalReserves() {
      totalReserves = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'netWorth' field */
    public java.lang.CharSequence getNetWorth() {
      return netWorth;
    }
    
    /** Sets the value of the 'netWorth' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNetWorth(java.lang.CharSequence value) {
      validate(fields()[21], value);
      this.netWorth = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'netWorth' field has been set */
    public boolean hasNetWorth() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'netWorth' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNetWorth() {
      netWorth = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'netCashInflow' field */
    public java.lang.CharSequence getNetCashInflow() {
      return netCashInflow;
    }
    
    /** Sets the value of the 'netCashInflow' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNetCashInflow(java.lang.CharSequence value) {
      validate(fields()[22], value);
      this.netCashInflow = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'netCashInflow' field has been set */
    public boolean hasNetCashInflow() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'netCashInflow' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNetCashInflow() {
      netCashInflow = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'increaseInCash' field */
    public java.lang.CharSequence getIncreaseInCash() {
      return increaseInCash;
    }
    
    /** Sets the value of the 'increaseInCash' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setIncreaseInCash(java.lang.CharSequence value) {
      validate(fields()[23], value);
      this.increaseInCash = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'increaseInCash' field has been set */
    public boolean hasIncreaseInCash() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'increaseInCash' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearIncreaseInCash() {
      increaseInCash = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'exportSales' field */
    public java.lang.CharSequence getExportSales() {
      return exportSales;
    }
    
    /** Sets the value of the 'exportSales' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setExportSales(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.exportSales = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'exportSales' field has been set */
    public boolean hasExportSales() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'exportSales' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearExportSales() {
      exportSales = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'totalStaffCosts' field */
    public java.lang.CharSequence getTotalStaffCosts() {
      return totalStaffCosts;
    }
    
    /** Sets the value of the 'totalStaffCosts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalStaffCosts(java.lang.CharSequence value) {
      validate(fields()[25], value);
      this.totalStaffCosts = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'totalStaffCosts' field has been set */
    public boolean hasTotalStaffCosts() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'totalStaffCosts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalStaffCosts() {
      totalStaffCosts = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'numberOfEmployees' field */
    public java.lang.CharSequence getNumberOfEmployees() {
      return numberOfEmployees;
    }
    
    /** Sets the value of the 'numberOfEmployees' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNumberOfEmployees(java.lang.CharSequence value) {
      validate(fields()[26], value);
      this.numberOfEmployees = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'numberOfEmployees' field has been set */
    public boolean hasNumberOfEmployees() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'numberOfEmployees' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNumberOfEmployees() {
      numberOfEmployees = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'directorsEmolument' field */
    public java.lang.CharSequence getDirectorsEmolument() {
      return directorsEmolument;
    }
    
    /** Sets the value of the 'directorsEmolument' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDirectorsEmolument(java.lang.CharSequence value) {
      validate(fields()[27], value);
      this.directorsEmolument = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'directorsEmolument' field has been set */
    public boolean hasDirectorsEmolument() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'directorsEmolument' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDirectorsEmolument() {
      directorsEmolument = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /** Gets the value of the 'externalInterestReceivable' field */
    public java.lang.CharSequence getExternalInterestReceivable() {
      return externalInterestReceivable;
    }
    
    /** Sets the value of the 'externalInterestReceivable' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setExternalInterestReceivable(java.lang.CharSequence value) {
      validate(fields()[28], value);
      this.externalInterestReceivable = value;
      fieldSetFlags()[28] = true;
      return this; 
    }
    
    /** Checks whether the 'externalInterestReceivable' field has been set */
    public boolean hasExternalInterestReceivable() {
      return fieldSetFlags()[28];
    }
    
    /** Clears the value of the 'externalInterestReceivable' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearExternalInterestReceivable() {
      externalInterestReceivable = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /** Gets the value of the 'externalInterestPayable' field */
    public java.lang.CharSequence getExternalInterestPayable() {
      return externalInterestPayable;
    }
    
    /** Sets the value of the 'externalInterestPayable' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setExternalInterestPayable(java.lang.CharSequence value) {
      validate(fields()[29], value);
      this.externalInterestPayable = value;
      fieldSetFlags()[29] = true;
      return this; 
    }
    
    /** Checks whether the 'externalInterestPayable' field has been set */
    public boolean hasExternalInterestPayable() {
      return fieldSetFlags()[29];
    }
    
    /** Clears the value of the 'externalInterestPayable' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearExternalInterestPayable() {
      externalInterestPayable = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /** Gets the value of the 'tradeDebtors' field */
    public java.lang.CharSequence getTradeDebtors() {
      return tradeDebtors;
    }
    
    /** Sets the value of the 'tradeDebtors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTradeDebtors(java.lang.CharSequence value) {
      validate(fields()[30], value);
      this.tradeDebtors = value;
      fieldSetFlags()[30] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeDebtors' field has been set */
    public boolean hasTradeDebtors() {
      return fieldSetFlags()[30];
    }
    
    /** Clears the value of the 'tradeDebtors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTradeDebtors() {
      tradeDebtors = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /** Gets the value of the 'dueFromGroupCompanies' field */
    public java.lang.CharSequence getDueFromGroupCompanies() {
      return dueFromGroupCompanies;
    }
    
    /** Sets the value of the 'dueFromGroupCompanies' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDueFromGroupCompanies(java.lang.CharSequence value) {
      validate(fields()[31], value);
      this.dueFromGroupCompanies = value;
      fieldSetFlags()[31] = true;
      return this; 
    }
    
    /** Checks whether the 'dueFromGroupCompanies' field has been set */
    public boolean hasDueFromGroupCompanies() {
      return fieldSetFlags()[31];
    }
    
    /** Clears the value of the 'dueFromGroupCompanies' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDueFromGroupCompanies() {
      dueFromGroupCompanies = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /** Gets the value of the 'tradeCreditors' field */
    public java.lang.CharSequence getTradeCreditors() {
      return tradeCreditors;
    }
    
    /** Sets the value of the 'tradeCreditors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTradeCreditors(java.lang.CharSequence value) {
      validate(fields()[32], value);
      this.tradeCreditors = value;
      fieldSetFlags()[32] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeCreditors' field has been set */
    public boolean hasTradeCreditors() {
      return fieldSetFlags()[32];
    }
    
    /** Clears the value of the 'tradeCreditors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTradeCreditors() {
      tradeCreditors = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /** Gets the value of the 'dueToGroupCompanies' field */
    public java.lang.CharSequence getDueToGroupCompanies() {
      return dueToGroupCompanies;
    }
    
    /** Sets the value of the 'dueToGroupCompanies' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDueToGroupCompanies(java.lang.CharSequence value) {
      validate(fields()[33], value);
      this.dueToGroupCompanies = value;
      fieldSetFlags()[33] = true;
      return this; 
    }
    
    /** Checks whether the 'dueToGroupCompanies' field has been set */
    public boolean hasDueToGroupCompanies() {
      return fieldSetFlags()[33];
    }
    
    /** Clears the value of the 'dueToGroupCompanies' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDueToGroupCompanies() {
      dueToGroupCompanies = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /** Gets the value of the 'directorsLoan' field */
    public java.lang.CharSequence getDirectorsLoan() {
      return directorsLoan;
    }
    
    /** Sets the value of the 'directorsLoan' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDirectorsLoan(java.lang.CharSequence value) {
      validate(fields()[34], value);
      this.directorsLoan = value;
      fieldSetFlags()[34] = true;
      return this; 
    }
    
    /** Checks whether the 'directorsLoan' field has been set */
    public boolean hasDirectorsLoan() {
      return fieldSetFlags()[34];
    }
    
    /** Clears the value of the 'directorsLoan' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDirectorsLoan() {
      directorsLoan = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /** Gets the value of the 'totalShortTermBorrowings' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields getTotalShortTermBorrowings() {
      return totalShortTermBorrowings;
    }
    
    /** Sets the value of the 'totalShortTermBorrowings' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalShortTermBorrowings(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields value) {
      validate(fields()[35], value);
      this.totalShortTermBorrowings = value;
      fieldSetFlags()[35] = true;
      return this; 
    }
    
    /** Checks whether the 'totalShortTermBorrowings' field has been set */
    public boolean hasTotalShortTermBorrowings() {
      return fieldSetFlags()[35];
    }
    
    /** Clears the value of the 'totalShortTermBorrowings' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalShortTermBorrowings() {
      totalShortTermBorrowings = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /** Gets the value of the 'longTermBorrowing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields getLongTermBorrowing() {
      return longTermBorrowing;
    }
    
    /** Sets the value of the 'longTermBorrowing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setLongTermBorrowing(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields value) {
      validate(fields()[36], value);
      this.longTermBorrowing = value;
      fieldSetFlags()[36] = true;
      return this; 
    }
    
    /** Checks whether the 'longTermBorrowing' field has been set */
    public boolean hasLongTermBorrowing() {
      return fieldSetFlags()[36];
    }
    
    /** Clears the value of the 'longTermBorrowing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearLongTermBorrowing() {
      longTermBorrowing = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /** Gets the value of the 'totalOtherLongTerm' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields getTotalOtherLongTerm() {
      return totalOtherLongTerm;
    }
    
    /** Sets the value of the 'totalOtherLongTerm' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTotalOtherLongTerm(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields value) {
      validate(fields()[37], value);
      this.totalOtherLongTerm = value;
      fieldSetFlags()[37] = true;
      return this; 
    }
    
    /** Checks whether the 'totalOtherLongTerm' field has been set */
    public boolean hasTotalOtherLongTerm() {
      return fieldSetFlags()[37];
    }
    
    /** Clears the value of the 'totalOtherLongTerm' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTotalOtherLongTerm() {
      totalOtherLongTerm = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /** Gets the value of the 'other' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields getOther() {
      return other;
    }
    
    /** Sets the value of the 'other' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setOther(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields value) {
      validate(fields()[38], value);
      this.other = value;
      fieldSetFlags()[38] = true;
      return this; 
    }
    
    /** Checks whether the 'other' field has been set */
    public boolean hasOther() {
      return fieldSetFlags()[38];
    }
    
    /** Clears the value of the 'other' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearOther() {
      other = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /** Gets the value of the 'auditors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields getAuditors() {
      return auditors;
    }
    
    /** Sets the value of the 'auditors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setAuditors(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields value) {
      validate(fields()[39], value);
      this.auditors = value;
      fieldSetFlags()[39] = true;
      return this; 
    }
    
    /** Checks whether the 'auditors' field has been set */
    public boolean hasAuditors() {
      return fieldSetFlags()[39];
    }
    
    /** Clears the value of the 'auditors' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearAuditors() {
      auditors = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /** Gets the value of the 'currency' field */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }
    
    /** Sets the value of the 'currency' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[40], value);
      this.currency = value;
      fieldSetFlags()[40] = true;
      return this; 
    }
    
    /** Checks whether the 'currency' field has been set */
    public boolean hasCurrency() {
      return fieldSetFlags()[40];
    }
    
    /** Clears the value of the 'currency' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[40] = false;
      return this;
    }

    /** Gets the value of the 'consolidated' field */
    public java.lang.CharSequence getConsolidated() {
      return consolidated;
    }
    
    /** Sets the value of the 'consolidated' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setConsolidated(java.lang.CharSequence value) {
      validate(fields()[41], value);
      this.consolidated = value;
      fieldSetFlags()[41] = true;
      return this; 
    }
    
    /** Checks whether the 'consolidated' field has been set */
    public boolean hasConsolidated() {
      return fieldSetFlags()[41];
    }
    
    /** Clears the value of the 'consolidated' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearConsolidated() {
      consolidated = null;
      fieldSetFlags()[41] = false;
      return this;
    }

    /** Gets the value of the 'scale' field */
    public java.lang.CharSequence getScale() {
      return scale;
    }
    
    /** Sets the value of the 'scale' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setScale(java.lang.CharSequence value) {
      validate(fields()[42], value);
      this.scale = value;
      fieldSetFlags()[42] = true;
      return this; 
    }
    
    /** Checks whether the 'scale' field has been set */
    public boolean hasScale() {
      return fieldSetFlags()[42];
    }
    
    /** Clears the value of the 'scale' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearScale() {
      scale = null;
      fieldSetFlags()[42] = false;
      return this;
    }

    /** Gets the value of the 'integers' field */
    public java.lang.CharSequence getIntegers() {
      return integers;
    }
    
    /** Sets the value of the 'integers' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setIntegers(java.lang.CharSequence value) {
      validate(fields()[43], value);
      this.integers = value;
      fieldSetFlags()[43] = true;
      return this; 
    }
    
    /** Checks whether the 'integers' field has been set */
    public boolean hasIntegers() {
      return fieldSetFlags()[43];
    }
    
    /** Clears the value of the 'integers' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearIntegers() {
      integers = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /** Gets the value of the 'referIndicator' field */
    public java.lang.CharSequence getReferIndicator() {
      return referIndicator;
    }
    
    /** Sets the value of the 'referIndicator' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setReferIndicator(java.lang.CharSequence value) {
      validate(fields()[44], value);
      this.referIndicator = value;
      fieldSetFlags()[44] = true;
      return this; 
    }
    
    /** Checks whether the 'referIndicator' field has been set */
    public boolean hasReferIndicator() {
      return fieldSetFlags()[44];
    }
    
    /** Clears the value of the 'referIndicator' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearReferIndicator() {
      referIndicator = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /** Gets the value of the 'notKeyedIndicator' field */
    public java.lang.CharSequence getNotKeyedIndicator() {
      return notKeyedIndicator;
    }
    
    /** Sets the value of the 'notKeyedIndicator' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNotKeyedIndicator(java.lang.CharSequence value) {
      validate(fields()[45], value);
      this.notKeyedIndicator = value;
      fieldSetFlags()[45] = true;
      return this; 
    }
    
    /** Checks whether the 'notKeyedIndicator' field has been set */
    public boolean hasNotKeyedIndicator() {
      return fieldSetFlags()[45];
    }
    
    /** Clears the value of the 'notKeyedIndicator' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNotKeyedIndicator() {
      notKeyedIndicator = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /** Gets the value of the 'didNotTrade' field */
    public java.lang.CharSequence getDidNotTrade() {
      return didNotTrade;
    }
    
    /** Sets the value of the 'didNotTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDidNotTrade(java.lang.CharSequence value) {
      validate(fields()[46], value);
      this.didNotTrade = value;
      fieldSetFlags()[46] = true;
      return this; 
    }
    
    /** Checks whether the 'didNotTrade' field has been set */
    public boolean hasDidNotTrade() {
      return fieldSetFlags()[46];
    }
    
    /** Clears the value of the 'didNotTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDidNotTrade() {
      didNotTrade = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /** Gets the value of the 'dormant' field */
    public java.lang.CharSequence getDormant() {
      return dormant;
    }
    
    /** Sets the value of the 'dormant' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDormant(java.lang.CharSequence value) {
      validate(fields()[47], value);
      this.dormant = value;
      fieldSetFlags()[47] = true;
      return this; 
    }
    
    /** Checks whether the 'dormant' field has been set */
    public boolean hasDormant() {
      return fieldSetFlags()[47];
    }
    
    /** Clears the value of the 'dormant' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDormant() {
      dormant = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /** Gets the value of the 'ceasedToTradeDuringPeriod' field */
    public java.lang.CharSequence getCeasedToTradeDuringPeriod() {
      return ceasedToTradeDuringPeriod;
    }
    
    /** Sets the value of the 'ceasedToTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCeasedToTradeDuringPeriod(java.lang.CharSequence value) {
      validate(fields()[48], value);
      this.ceasedToTradeDuringPeriod = value;
      fieldSetFlags()[48] = true;
      return this; 
    }
    
    /** Checks whether the 'ceasedToTradeDuringPeriod' field has been set */
    public boolean hasCeasedToTradeDuringPeriod() {
      return fieldSetFlags()[48];
    }
    
    /** Clears the value of the 'ceasedToTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCeasedToTradeDuringPeriod() {
      ceasedToTradeDuringPeriod = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    /** Gets the value of the 'dateCeasedToTradeDuringPeriod' field */
    public java.lang.CharSequence getDateCeasedToTradeDuringPeriod() {
      return dateCeasedToTradeDuringPeriod;
    }
    
    /** Sets the value of the 'dateCeasedToTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDateCeasedToTradeDuringPeriod(java.lang.CharSequence value) {
      validate(fields()[49], value);
      this.dateCeasedToTradeDuringPeriod = value;
      fieldSetFlags()[49] = true;
      return this; 
    }
    
    /** Checks whether the 'dateCeasedToTradeDuringPeriod' field has been set */
    public boolean hasDateCeasedToTradeDuringPeriod() {
      return fieldSetFlags()[49];
    }
    
    /** Clears the value of the 'dateCeasedToTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDateCeasedToTradeDuringPeriod() {
      dateCeasedToTradeDuringPeriod = null;
      fieldSetFlags()[49] = false;
      return this;
    }

    /** Gets the value of the 'ceasedTradeAfterPeriodEnd' field */
    public java.lang.CharSequence getCeasedTradeAfterPeriodEnd() {
      return ceasedTradeAfterPeriodEnd;
    }
    
    /** Sets the value of the 'ceasedTradeAfterPeriodEnd' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCeasedTradeAfterPeriodEnd(java.lang.CharSequence value) {
      validate(fields()[50], value);
      this.ceasedTradeAfterPeriodEnd = value;
      fieldSetFlags()[50] = true;
      return this; 
    }
    
    /** Checks whether the 'ceasedTradeAfterPeriodEnd' field has been set */
    public boolean hasCeasedTradeAfterPeriodEnd() {
      return fieldSetFlags()[50];
    }
    
    /** Clears the value of the 'ceasedTradeAfterPeriodEnd' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCeasedTradeAfterPeriodEnd() {
      ceasedTradeAfterPeriodEnd = null;
      fieldSetFlags()[50] = false;
      return this;
    }

    /** Gets the value of the 'dateCeasedTradeAfterPeriodEnd' field */
    public java.lang.CharSequence getDateCeasedTradeAfterPeriodEnd() {
      return dateCeasedTradeAfterPeriodEnd;
    }
    
    /** Sets the value of the 'dateCeasedTradeAfterPeriodEnd' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDateCeasedTradeAfterPeriodEnd(java.lang.CharSequence value) {
      validate(fields()[51], value);
      this.dateCeasedTradeAfterPeriodEnd = value;
      fieldSetFlags()[51] = true;
      return this; 
    }
    
    /** Checks whether the 'dateCeasedTradeAfterPeriodEnd' field has been set */
    public boolean hasDateCeasedTradeAfterPeriodEnd() {
      return fieldSetFlags()[51];
    }
    
    /** Clears the value of the 'dateCeasedTradeAfterPeriodEnd' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDateCeasedTradeAfterPeriodEnd() {
      dateCeasedTradeAfterPeriodEnd = null;
      fieldSetFlags()[51] = false;
      return this;
    }

    /** Gets the value of the 'transferredTrade' field */
    public java.lang.CharSequence getTransferredTrade() {
      return transferredTrade;
    }
    
    /** Sets the value of the 'transferredTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setTransferredTrade(java.lang.CharSequence value) {
      validate(fields()[52], value);
      this.transferredTrade = value;
      fieldSetFlags()[52] = true;
      return this; 
    }
    
    /** Checks whether the 'transferredTrade' field has been set */
    public boolean hasTransferredTrade() {
      return fieldSetFlags()[52];
    }
    
    /** Clears the value of the 'transferredTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearTransferredTrade() {
      transferredTrade = null;
      fieldSetFlags()[52] = false;
      return this;
    }

    /** Gets the value of the 'dateTransferredTrade' field */
    public java.lang.CharSequence getDateTransferredTrade() {
      return dateTransferredTrade;
    }
    
    /** Sets the value of the 'dateTransferredTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDateTransferredTrade(java.lang.CharSequence value) {
      validate(fields()[53], value);
      this.dateTransferredTrade = value;
      fieldSetFlags()[53] = true;
      return this; 
    }
    
    /** Checks whether the 'dateTransferredTrade' field has been set */
    public boolean hasDateTransferredTrade() {
      return fieldSetFlags()[53];
    }
    
    /** Clears the value of the 'dateTransferredTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDateTransferredTrade() {
      dateTransferredTrade = null;
      fieldSetFlags()[53] = false;
      return this;
    }

    /** Gets the value of the 'nameOfPartyTradeIsTransferredTo' field */
    public java.lang.CharSequence getNameOfPartyTradeIsTransferredTo() {
      return nameOfPartyTradeIsTransferredTo;
    }
    
    /** Sets the value of the 'nameOfPartyTradeIsTransferredTo' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNameOfPartyTradeIsTransferredTo(java.lang.CharSequence value) {
      validate(fields()[54], value);
      this.nameOfPartyTradeIsTransferredTo = value;
      fieldSetFlags()[54] = true;
      return this; 
    }
    
    /** Checks whether the 'nameOfPartyTradeIsTransferredTo' field has been set */
    public boolean hasNameOfPartyTradeIsTransferredTo() {
      return fieldSetFlags()[54];
    }
    
    /** Clears the value of the 'nameOfPartyTradeIsTransferredTo' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNameOfPartyTradeIsTransferredTo() {
      nameOfPartyTradeIsTransferredTo = null;
      fieldSetFlags()[54] = false;
      return this;
    }

    /** Gets the value of the 'commencedTradeDuringPeriod' field */
    public java.lang.CharSequence getCommencedTradeDuringPeriod() {
      return commencedTradeDuringPeriod;
    }
    
    /** Sets the value of the 'commencedTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCommencedTradeDuringPeriod(java.lang.CharSequence value) {
      validate(fields()[55], value);
      this.commencedTradeDuringPeriod = value;
      fieldSetFlags()[55] = true;
      return this; 
    }
    
    /** Checks whether the 'commencedTradeDuringPeriod' field has been set */
    public boolean hasCommencedTradeDuringPeriod() {
      return fieldSetFlags()[55];
    }
    
    /** Clears the value of the 'commencedTradeDuringPeriod' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCommencedTradeDuringPeriod() {
      commencedTradeDuringPeriod = null;
      fieldSetFlags()[55] = false;
      return this;
    }

    /** Gets the value of the 'dateCommencedTrade' field */
    public java.lang.CharSequence getDateCommencedTrade() {
      return dateCommencedTrade;
    }
    
    /** Sets the value of the 'dateCommencedTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDateCommencedTrade(java.lang.CharSequence value) {
      validate(fields()[56], value);
      this.dateCommencedTrade = value;
      fieldSetFlags()[56] = true;
      return this; 
    }
    
    /** Checks whether the 'dateCommencedTrade' field has been set */
    public boolean hasDateCommencedTrade() {
      return fieldSetFlags()[56];
    }
    
    /** Clears the value of the 'dateCommencedTrade' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDateCommencedTrade() {
      dateCommencedTrade = null;
      fieldSetFlags()[56] = false;
      return this;
    }

    /** Gets the value of the 'nameOfPartyActsAsAnAgentFor' field */
    public java.lang.CharSequence getNameOfPartyActsAsAnAgentFor() {
      return nameOfPartyActsAsAnAgentFor;
    }
    
    /** Sets the value of the 'nameOfPartyActsAsAnAgentFor' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNameOfPartyActsAsAnAgentFor(java.lang.CharSequence value) {
      validate(fields()[57], value);
      this.nameOfPartyActsAsAnAgentFor = value;
      fieldSetFlags()[57] = true;
      return this; 
    }
    
    /** Checks whether the 'nameOfPartyActsAsAnAgentFor' field has been set */
    public boolean hasNameOfPartyActsAsAnAgentFor() {
      return fieldSetFlags()[57];
    }
    
    /** Clears the value of the 'nameOfPartyActsAsAnAgentFor' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNameOfPartyActsAsAnAgentFor() {
      nameOfPartyActsAsAnAgentFor = null;
      fieldSetFlags()[57] = false;
      return this;
    }

    /** Gets the value of the 'ultimateHoldingCompany' field */
    public java.lang.CharSequence getUltimateHoldingCompany() {
      return ultimateHoldingCompany;
    }
    
    /** Sets the value of the 'ultimateHoldingCompany' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setUltimateHoldingCompany(java.lang.CharSequence value) {
      validate(fields()[58], value);
      this.ultimateHoldingCompany = value;
      fieldSetFlags()[58] = true;
      return this; 
    }
    
    /** Checks whether the 'ultimateHoldingCompany' field has been set */
    public boolean hasUltimateHoldingCompany() {
      return fieldSetFlags()[58];
    }
    
    /** Clears the value of the 'ultimateHoldingCompany' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearUltimateHoldingCompany() {
      ultimateHoldingCompany = null;
      fieldSetFlags()[58] = false;
      return this;
    }

    /** Gets the value of the 'actsAsAnAgent' field */
    public java.lang.CharSequence getActsAsAnAgent() {
      return actsAsAnAgent;
    }
    
    /** Sets the value of the 'actsAsAnAgent' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setActsAsAnAgent(java.lang.CharSequence value) {
      validate(fields()[59], value);
      this.actsAsAnAgent = value;
      fieldSetFlags()[59] = true;
      return this; 
    }
    
    /** Checks whether the 'actsAsAnAgent' field has been set */
    public boolean hasActsAsAnAgent() {
      return fieldSetFlags()[59];
    }
    
    /** Clears the value of the 'actsAsAnAgent' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearActsAsAnAgent() {
      actsAsAnAgent = null;
      fieldSetFlags()[59] = false;
      return this;
    }

    /** Gets the value of the 'countryOfIncorporation' field */
    public java.lang.CharSequence getCountryOfIncorporation() {
      return countryOfIncorporation;
    }
    
    /** Sets the value of the 'countryOfIncorporation' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setCountryOfIncorporation(java.lang.CharSequence value) {
      validate(fields()[60], value);
      this.countryOfIncorporation = value;
      fieldSetFlags()[60] = true;
      return this; 
    }
    
    /** Checks whether the 'countryOfIncorporation' field has been set */
    public boolean hasCountryOfIncorporation() {
      return fieldSetFlags()[60];
    }
    
    /** Clears the value of the 'countryOfIncorporation' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearCountryOfIncorporation() {
      countryOfIncorporation = null;
      fieldSetFlags()[60] = false;
      return this;
    }

    /** Gets the value of the 'miscellaneousItems' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields getMiscellaneousItems() {
      return miscellaneousItems;
    }
    
    /** Sets the value of the 'miscellaneousItems' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setMiscellaneousItems(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields value) {
      validate(fields()[61], value);
      this.miscellaneousItems = value;
      fieldSetFlags()[61] = true;
      return this; 
    }
    
    /** Checks whether the 'miscellaneousItems' field has been set */
    public boolean hasMiscellaneousItems() {
      return fieldSetFlags()[61];
    }
    
    /** Clears the value of the 'miscellaneousItems' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearMiscellaneousItems() {
      miscellaneousItems = null;
      fieldSetFlags()[61] = false;
      return this;
    }

    /** Gets the value of the 'depreciation' field */
    public java.lang.CharSequence getDepreciation() {
      return depreciation;
    }
    
    /** Sets the value of the 'depreciation' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setDepreciation(java.lang.CharSequence value) {
      validate(fields()[62], value);
      this.depreciation = value;
      fieldSetFlags()[62] = true;
      return this; 
    }
    
    /** Checks whether the 'depreciation' field has been set */
    public boolean hasDepreciation() {
      return fieldSetFlags()[62];
    }
    
    /** Clears the value of the 'depreciation' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearDepreciation() {
      depreciation = null;
      fieldSetFlags()[62] = false;
      return this;
    }

    /** Gets the value of the 'operatingProfit' field */
    public java.lang.CharSequence getOperatingProfit() {
      return operatingProfit;
    }
    
    /** Sets the value of the 'operatingProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setOperatingProfit(java.lang.CharSequence value) {
      validate(fields()[63], value);
      this.operatingProfit = value;
      fieldSetFlags()[63] = true;
      return this; 
    }
    
    /** Checks whether the 'operatingProfit' field has been set */
    public boolean hasOperatingProfit() {
      return fieldSetFlags()[63];
    }
    
    /** Clears the value of the 'operatingProfit' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearOperatingProfit() {
      operatingProfit = null;
      fieldSetFlags()[63] = false;
      return this;
    }

    /** Gets the value of the 'netCashFlowFromRoiAndServicingOfFinance' field */
    public java.lang.CharSequence getNetCashFlowFromRoiAndServicingOfFinance() {
      return netCashFlowFromRoiAndServicingOfFinance;
    }
    
    /** Sets the value of the 'netCashFlowFromRoiAndServicingOfFinance' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNetCashFlowFromRoiAndServicingOfFinance(java.lang.CharSequence value) {
      validate(fields()[64], value);
      this.netCashFlowFromRoiAndServicingOfFinance = value;
      fieldSetFlags()[64] = true;
      return this; 
    }
    
    /** Checks whether the 'netCashFlowFromRoiAndServicingOfFinance' field has been set */
    public boolean hasNetCashFlowFromRoiAndServicingOfFinance() {
      return fieldSetFlags()[64];
    }
    
    /** Clears the value of the 'netCashFlowFromRoiAndServicingOfFinance' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNetCashFlowFromRoiAndServicingOfFinance() {
      netCashFlowFromRoiAndServicingOfFinance = null;
      fieldSetFlags()[64] = false;
      return this;
    }

    /** Gets the value of the 'netCashFlowBeforeFinancing' field */
    public java.lang.CharSequence getNetCashFlowBeforeFinancing() {
      return netCashFlowBeforeFinancing;
    }
    
    /** Sets the value of the 'netCashFlowBeforeFinancing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNetCashFlowBeforeFinancing(java.lang.CharSequence value) {
      validate(fields()[65], value);
      this.netCashFlowBeforeFinancing = value;
      fieldSetFlags()[65] = true;
      return this; 
    }
    
    /** Checks whether the 'netCashFlowBeforeFinancing' field has been set */
    public boolean hasNetCashFlowBeforeFinancing() {
      return fieldSetFlags()[65];
    }
    
    /** Clears the value of the 'netCashFlowBeforeFinancing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNetCashFlowBeforeFinancing() {
      netCashFlowBeforeFinancing = null;
      fieldSetFlags()[65] = false;
      return this;
    }

    /** Gets the value of the 'netCashFlowFromFinancing' field */
    public java.lang.CharSequence getNetCashFlowFromFinancing() {
      return netCashFlowFromFinancing;
    }
    
    /** Sets the value of the 'netCashFlowFromFinancing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setNetCashFlowFromFinancing(java.lang.CharSequence value) {
      validate(fields()[66], value);
      this.netCashFlowFromFinancing = value;
      fieldSetFlags()[66] = true;
      return this; 
    }
    
    /** Checks whether the 'netCashFlowFromFinancing' field has been set */
    public boolean hasNetCashFlowFromFinancing() {
      return fieldSetFlags()[66];
    }
    
    /** Clears the value of the 'netCashFlowFromFinancing' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearNetCashFlowFromFinancing() {
      netCashFlowFromFinancing = null;
      fieldSetFlags()[66] = false;
      return this;
    }

    /** Gets the value of the 'contingentLiability' field */
    public java.lang.CharSequence getContingentLiability() {
      return contingentLiability;
    }
    
    /** Sets the value of the 'contingentLiability' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder setContingentLiability(java.lang.CharSequence value) {
      validate(fields()[67], value);
      this.contingentLiability = value;
      fieldSetFlags()[67] = true;
      return this; 
    }
    
    /** Checks whether the 'contingentLiability' field has been set */
    public boolean hasContingentLiability() {
      return fieldSetFlags()[67];
    }
    
    /** Clears the value of the 'contingentLiability' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.Data.Builder clearContingentLiability() {
      contingentLiability = null;
      fieldSetFlags()[67] = false;
      return this;
    }

    @Override
    public Data build() {
      try {
        Data record = new Data();
        record.companyNumber = fieldSetFlags()[0] ? this.companyNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.dateOfFiscalPeriod = fieldSetFlags()[1] ? this.dateOfFiscalPeriod : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.accountingMonths = fieldSetFlags()[2] ? this.accountingMonths : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tradingMonths = fieldSetFlags()[3] ? this.tradingMonths : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.turnover = fieldSetFlags()[4] ? this.turnover : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.grossProfit = fieldSetFlags()[5] ? this.grossProfit : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.exceptionalIncome = fieldSetFlags()[6] ? this.exceptionalIncome : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.exceptionalCharges = fieldSetFlags()[7] ? this.exceptionalCharges : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.preTaxProfit = fieldSetFlags()[8] ? this.preTaxProfit : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.postTaxProfit = fieldSetFlags()[9] ? this.postTaxProfit : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.dividends = fieldSetFlags()[10] ? this.dividends : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.tangibleFixedAssets = fieldSetFlags()[11] ? this.tangibleFixedAssets : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.intangibleFixedAssets = fieldSetFlags()[12] ? this.intangibleFixedAssets : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.fixedAssetInvestment = fieldSetFlags()[13] ? this.fixedAssetInvestment : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.totalStock = fieldSetFlags()[14] ? this.totalStock : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.totalCash = fieldSetFlags()[15] ? this.totalCash : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.totalCurrentAssets = fieldSetFlags()[16] ? this.totalCurrentAssets : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.currentLiabilities = fieldSetFlags()[17] ? this.currentLiabilities : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.workingCapital = fieldSetFlags()[18] ? this.workingCapital : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.calledUpShareCapital = fieldSetFlags()[19] ? this.calledUpShareCapital : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.totalReserves = fieldSetFlags()[20] ? this.totalReserves : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields) defaultValue(fields()[20]);
        record.netWorth = fieldSetFlags()[21] ? this.netWorth : (java.lang.CharSequence) defaultValue(fields()[21]);
        record.netCashInflow = fieldSetFlags()[22] ? this.netCashInflow : (java.lang.CharSequence) defaultValue(fields()[22]);
        record.increaseInCash = fieldSetFlags()[23] ? this.increaseInCash : (java.lang.CharSequence) defaultValue(fields()[23]);
        record.exportSales = fieldSetFlags()[24] ? this.exportSales : (java.lang.CharSequence) defaultValue(fields()[24]);
        record.totalStaffCosts = fieldSetFlags()[25] ? this.totalStaffCosts : (java.lang.CharSequence) defaultValue(fields()[25]);
        record.numberOfEmployees = fieldSetFlags()[26] ? this.numberOfEmployees : (java.lang.CharSequence) defaultValue(fields()[26]);
        record.directorsEmolument = fieldSetFlags()[27] ? this.directorsEmolument : (java.lang.CharSequence) defaultValue(fields()[27]);
        record.externalInterestReceivable = fieldSetFlags()[28] ? this.externalInterestReceivable : (java.lang.CharSequence) defaultValue(fields()[28]);
        record.externalInterestPayable = fieldSetFlags()[29] ? this.externalInterestPayable : (java.lang.CharSequence) defaultValue(fields()[29]);
        record.tradeDebtors = fieldSetFlags()[30] ? this.tradeDebtors : (java.lang.CharSequence) defaultValue(fields()[30]);
        record.dueFromGroupCompanies = fieldSetFlags()[31] ? this.dueFromGroupCompanies : (java.lang.CharSequence) defaultValue(fields()[31]);
        record.tradeCreditors = fieldSetFlags()[32] ? this.tradeCreditors : (java.lang.CharSequence) defaultValue(fields()[32]);
        record.dueToGroupCompanies = fieldSetFlags()[33] ? this.dueToGroupCompanies : (java.lang.CharSequence) defaultValue(fields()[33]);
        record.directorsLoan = fieldSetFlags()[34] ? this.directorsLoan : (java.lang.CharSequence) defaultValue(fields()[34]);
        record.totalShortTermBorrowings = fieldSetFlags()[35] ? this.totalShortTermBorrowings : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalshorttermborrowings.totalShortTermBorrowingsFields) defaultValue(fields()[35]);
        record.longTermBorrowing = fieldSetFlags()[36] ? this.longTermBorrowing : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.longtermborrowing.longTermBorrowingFields) defaultValue(fields()[36]);
        record.totalOtherLongTerm = fieldSetFlags()[37] ? this.totalOtherLongTerm : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalotherlongterm.totalOtherLongTermFields) defaultValue(fields()[37]);
        record.other = fieldSetFlags()[38] ? this.other : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.other.otherFields) defaultValue(fields()[38]);
        record.auditors = fieldSetFlags()[39] ? this.auditors : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields) defaultValue(fields()[39]);
        record.currency = fieldSetFlags()[40] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[40]);
        record.consolidated = fieldSetFlags()[41] ? this.consolidated : (java.lang.CharSequence) defaultValue(fields()[41]);
        record.scale = fieldSetFlags()[42] ? this.scale : (java.lang.CharSequence) defaultValue(fields()[42]);
        record.integers = fieldSetFlags()[43] ? this.integers : (java.lang.CharSequence) defaultValue(fields()[43]);
        record.referIndicator = fieldSetFlags()[44] ? this.referIndicator : (java.lang.CharSequence) defaultValue(fields()[44]);
        record.notKeyedIndicator = fieldSetFlags()[45] ? this.notKeyedIndicator : (java.lang.CharSequence) defaultValue(fields()[45]);
        record.didNotTrade = fieldSetFlags()[46] ? this.didNotTrade : (java.lang.CharSequence) defaultValue(fields()[46]);
        record.dormant = fieldSetFlags()[47] ? this.dormant : (java.lang.CharSequence) defaultValue(fields()[47]);
        record.ceasedToTradeDuringPeriod = fieldSetFlags()[48] ? this.ceasedToTradeDuringPeriod : (java.lang.CharSequence) defaultValue(fields()[48]);
        record.dateCeasedToTradeDuringPeriod = fieldSetFlags()[49] ? this.dateCeasedToTradeDuringPeriod : (java.lang.CharSequence) defaultValue(fields()[49]);
        record.ceasedTradeAfterPeriodEnd = fieldSetFlags()[50] ? this.ceasedTradeAfterPeriodEnd : (java.lang.CharSequence) defaultValue(fields()[50]);
        record.dateCeasedTradeAfterPeriodEnd = fieldSetFlags()[51] ? this.dateCeasedTradeAfterPeriodEnd : (java.lang.CharSequence) defaultValue(fields()[51]);
        record.transferredTrade = fieldSetFlags()[52] ? this.transferredTrade : (java.lang.CharSequence) defaultValue(fields()[52]);
        record.dateTransferredTrade = fieldSetFlags()[53] ? this.dateTransferredTrade : (java.lang.CharSequence) defaultValue(fields()[53]);
        record.nameOfPartyTradeIsTransferredTo = fieldSetFlags()[54] ? this.nameOfPartyTradeIsTransferredTo : (java.lang.CharSequence) defaultValue(fields()[54]);
        record.commencedTradeDuringPeriod = fieldSetFlags()[55] ? this.commencedTradeDuringPeriod : (java.lang.CharSequence) defaultValue(fields()[55]);
        record.dateCommencedTrade = fieldSetFlags()[56] ? this.dateCommencedTrade : (java.lang.CharSequence) defaultValue(fields()[56]);
        record.nameOfPartyActsAsAnAgentFor = fieldSetFlags()[57] ? this.nameOfPartyActsAsAnAgentFor : (java.lang.CharSequence) defaultValue(fields()[57]);
        record.ultimateHoldingCompany = fieldSetFlags()[58] ? this.ultimateHoldingCompany : (java.lang.CharSequence) defaultValue(fields()[58]);
        record.actsAsAnAgent = fieldSetFlags()[59] ? this.actsAsAnAgent : (java.lang.CharSequence) defaultValue(fields()[59]);
        record.countryOfIncorporation = fieldSetFlags()[60] ? this.countryOfIncorporation : (java.lang.CharSequence) defaultValue(fields()[60]);
        record.miscellaneousItems = fieldSetFlags()[61] ? this.miscellaneousItems : (com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.miscellaneousitems.miscellaneousItemsFields) defaultValue(fields()[61]);
        record.depreciation = fieldSetFlags()[62] ? this.depreciation : (java.lang.CharSequence) defaultValue(fields()[62]);
        record.operatingProfit = fieldSetFlags()[63] ? this.operatingProfit : (java.lang.CharSequence) defaultValue(fields()[63]);
        record.netCashFlowFromRoiAndServicingOfFinance = fieldSetFlags()[64] ? this.netCashFlowFromRoiAndServicingOfFinance : (java.lang.CharSequence) defaultValue(fields()[64]);
        record.netCashFlowBeforeFinancing = fieldSetFlags()[65] ? this.netCashFlowBeforeFinancing : (java.lang.CharSequence) defaultValue(fields()[65]);
        record.netCashFlowFromFinancing = fieldSetFlags()[66] ? this.netCashFlowFromFinancing : (java.lang.CharSequence) defaultValue(fields()[66]);
        record.contingentLiability = fieldSetFlags()[67] ? this.contingentLiability : (java.lang.CharSequence) defaultValue(fields()[67]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
