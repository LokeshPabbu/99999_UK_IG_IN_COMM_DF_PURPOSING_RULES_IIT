/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.officer.rawfields.data;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data\",\"fields\":[{\"name\":\"address\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.address\",\"fields\":[{\"name\":\"address_line_1\",\"type\":[\"null\",\"string\"],\"doc\":\"The first line of the address.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"address_line_2\",\"type\":[\"null\",\"string\"],\"doc\":\"The second line of the address.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"care_of\",\"type\":[\"null\",\"string\"],\"doc\":\"The care of name.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"country\",\"type\":[\"null\",\"string\"],\"doc\":\"The country e.g. United Kingdom.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"locality\",\"type\":[\"null\",\"string\"],\"doc\":\"The locality e.g. London.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"po_box\",\"type\":[\"null\",\"string\"],\"doc\":\"The post-office box number.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"postal_code\",\"type\":[\"null\",\"string\"],\"doc\":\"The postal code e.g. CF14 3UZ.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"premises\",\"type\":[\"null\",\"string\"],\"doc\":\"The property name or number.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"region\",\"type\":[\"null\",\"string\"],\"doc\":\"The region e.g. Surrey.\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"appointed_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date on which the officer was appointed.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"country_of_residence\",\"type\":[\"null\",\"string\"],\"doc\":\"The officer's country of residence.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"date_of_birth\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DateOfBirth\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth\",\"fields\":[{\"name\":\"day\",\"type\":[\"null\",\"string\"],\"doc\":\"The day of the date of birth.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"month\",\"type\":[\"null\",\"string\"],\"doc\":\"The month of date of birth.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"year\",\"type\":[\"null\",\"string\"],\"doc\":\"The year of date of birth.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"}]}],\"default\":null},{\"name\":\"former_names\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FormerNames\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames\",\"fields\":[{\"name\":\"forenames\",\"type\":[\"null\",\"string\"],\"doc\":\"Former forenames of the officer.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"surname\",\"type\":[\"null\",\"string\"],\"doc\":\"Former surnames of the officer.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"}]}},\"default\":[]},{\"name\":\"identification\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Identification\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification\",\"fields\":[{\"name\":\"identification_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The officer's identity type Possible values are: eea non-eea uk-limited other-corporate-body-or-firm\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"legal_authority\",\"type\":[\"null\",\"string\"],\"doc\":\"The legal authority supervising the company.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"legal_form\",\"type\":[\"null\",\"string\"],\"doc\":\"The legal form of the company as defined by its country of registration.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"place_registered\",\"type\":[\"null\",\"string\"],\"doc\":\"Place registered.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"registration_number\",\"type\":[\"null\",\"string\"],\"doc\":\"Company registration number.\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"links\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Links\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.links\",\"fields\":[{\"name\":\"officer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Officer\",\"namespace\":\"com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.officer\",\"fields\":[{\"name\":\"appointments\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to the officer appointment resource that this appointment is associated with.\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"self\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to this individual company officer appointment resource.\",\"default\":null,\"dataClassification\":\"3\"}]}],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Corporate or natural officer name.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"nationality\",\"type\":[\"null\",\"string\"],\"doc\":\"The officer's nationality.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"occupation\",\"type\":[\"null\",\"string\"],\"doc\":\"The officer's job title.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"officer_role\",\"type\":[\"null\",\"string\"],\"doc\":\"Officer roles\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"resigned_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date on which the officer resigned.\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address address;
  /** The date on which the officer was appointed. */
  @Deprecated public java.lang.CharSequence appointed_on;
  /** The officer's country of residence. */
  @Deprecated public java.lang.CharSequence country_of_residence;
  @Deprecated public com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth date_of_birth;
  @Deprecated public java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> former_names;
  @Deprecated public com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification identification;
  @Deprecated public com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links links;
  /** Corporate or natural officer name. */
  @Deprecated public java.lang.CharSequence name;
  /** The officer's nationality. */
  @Deprecated public java.lang.CharSequence nationality;
  /** The officer's job title. */
  @Deprecated public java.lang.CharSequence occupation;
  /** Officer roles */
  @Deprecated public java.lang.CharSequence officer_role;
  /** The date on which the officer resigned. */
  @Deprecated public java.lang.CharSequence resigned_on;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Data() {}

  /**
   * All-args constructor.
   */
  public Data(com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address address, java.lang.CharSequence appointed_on, java.lang.CharSequence country_of_residence, com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth date_of_birth, java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> former_names, com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification identification, com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links links, java.lang.CharSequence name, java.lang.CharSequence nationality, java.lang.CharSequence occupation, java.lang.CharSequence officer_role, java.lang.CharSequence resigned_on) {
    this.address = address;
    this.appointed_on = appointed_on;
    this.country_of_residence = country_of_residence;
    this.date_of_birth = date_of_birth;
    this.former_names = former_names;
    this.identification = identification;
    this.links = links;
    this.name = name;
    this.nationality = nationality;
    this.occupation = occupation;
    this.officer_role = officer_role;
    this.resigned_on = resigned_on;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return appointed_on;
    case 2: return country_of_residence;
    case 3: return date_of_birth;
    case 4: return former_names;
    case 5: return identification;
    case 6: return links;
    case 7: return name;
    case 8: return nationality;
    case 9: return occupation;
    case 10: return officer_role;
    case 11: return resigned_on;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address)value$; break;
    case 1: appointed_on = (java.lang.CharSequence)value$; break;
    case 2: country_of_residence = (java.lang.CharSequence)value$; break;
    case 3: date_of_birth = (com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth)value$; break;
    case 4: former_names = (java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames>)value$; break;
    case 5: identification = (com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification)value$; break;
    case 6: links = (com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links)value$; break;
    case 7: name = (java.lang.CharSequence)value$; break;
    case 8: nationality = (java.lang.CharSequence)value$; break;
    case 9: occupation = (java.lang.CharSequence)value$; break;
    case 10: officer_role = (java.lang.CharSequence)value$; break;
    case 11: resigned_on = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   */
  public com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'appointed_on' field.
   * The date on which the officer was appointed.   */
  public java.lang.CharSequence getAppointedOn() {
    return appointed_on;
  }

  /**
   * Sets the value of the 'appointed_on' field.
   * The date on which the officer was appointed.   * @param value the value to set.
   */
  public void setAppointedOn(java.lang.CharSequence value) {
    this.appointed_on = value;
  }

  /**
   * Gets the value of the 'country_of_residence' field.
   * The officer's country of residence.   */
  public java.lang.CharSequence getCountryOfResidence() {
    return country_of_residence;
  }

  /**
   * Sets the value of the 'country_of_residence' field.
   * The officer's country of residence.   * @param value the value to set.
   */
  public void setCountryOfResidence(java.lang.CharSequence value) {
    this.country_of_residence = value;
  }

  /**
   * Gets the value of the 'date_of_birth' field.
   */
  public com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth getDateOfBirth() {
    return date_of_birth;
  }

  /**
   * Sets the value of the 'date_of_birth' field.
   * @param value the value to set.
   */
  public void setDateOfBirth(com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth value) {
    this.date_of_birth = value;
  }

  /**
   * Gets the value of the 'former_names' field.
   */
  public java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> getFormerNames() {
    return former_names;
  }

  /**
   * Sets the value of the 'former_names' field.
   * @param value the value to set.
   */
  public void setFormerNames(java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> value) {
    this.former_names = value;
  }

  /**
   * Gets the value of the 'identification' field.
   */
  public com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification getIdentification() {
    return identification;
  }

  /**
   * Sets the value of the 'identification' field.
   * @param value the value to set.
   */
  public void setIdentification(com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification value) {
    this.identification = value;
  }

  /**
   * Gets the value of the 'links' field.
   */
  public com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links getLinks() {
    return links;
  }

  /**
   * Sets the value of the 'links' field.
   * @param value the value to set.
   */
  public void setLinks(com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links value) {
    this.links = value;
  }

  /**
   * Gets the value of the 'name' field.
   * Corporate or natural officer name.   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Corporate or natural officer name.   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'nationality' field.
   * The officer's nationality.   */
  public java.lang.CharSequence getNationality() {
    return nationality;
  }

  /**
   * Sets the value of the 'nationality' field.
   * The officer's nationality.   * @param value the value to set.
   */
  public void setNationality(java.lang.CharSequence value) {
    this.nationality = value;
  }

  /**
   * Gets the value of the 'occupation' field.
   * The officer's job title.   */
  public java.lang.CharSequence getOccupation() {
    return occupation;
  }

  /**
   * Sets the value of the 'occupation' field.
   * The officer's job title.   * @param value the value to set.
   */
  public void setOccupation(java.lang.CharSequence value) {
    this.occupation = value;
  }

  /**
   * Gets the value of the 'officer_role' field.
   * Officer roles   */
  public java.lang.CharSequence getOfficerRole() {
    return officer_role;
  }

  /**
   * Sets the value of the 'officer_role' field.
   * Officer roles   * @param value the value to set.
   */
  public void setOfficerRole(java.lang.CharSequence value) {
    this.officer_role = value;
  }

  /**
   * Gets the value of the 'resigned_on' field.
   * The date on which the officer resigned.   */
  public java.lang.CharSequence getResignedOn() {
    return resigned_on;
  }

  /**
   * Sets the value of the 'resigned_on' field.
   * The date on which the officer resigned.   * @param value the value to set.
   */
  public void setResignedOn(java.lang.CharSequence value) {
    this.resigned_on = value;
  }

  /** Creates a new Data RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder();
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder other) {
    return new com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder(other);
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Data instance */
  public static com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data other) {
    return new com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder(other);
  }
  
  /**
   * RecordBuilder for Data instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
    implements org.apache.avro.data.RecordBuilder<Data> {

    private com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address address;
    private java.lang.CharSequence appointed_on;
    private java.lang.CharSequence country_of_residence;
    private com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth date_of_birth;
    private java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> former_names;
    private com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification identification;
    private com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links links;
    private java.lang.CharSequence name;
    private java.lang.CharSequence nationality;
    private java.lang.CharSequence occupation;
    private java.lang.CharSequence officer_role;
    private java.lang.CharSequence resigned_on;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appointed_on)) {
        this.appointed_on = data().deepCopy(fields()[1].schema(), other.appointed_on);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country_of_residence)) {
        this.country_of_residence = data().deepCopy(fields()[2].schema(), other.country_of_residence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date_of_birth)) {
        this.date_of_birth = data().deepCopy(fields()[3].schema(), other.date_of_birth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.former_names)) {
        this.former_names = data().deepCopy(fields()[4].schema(), other.former_names);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.identification)) {
        this.identification = data().deepCopy(fields()[5].schema(), other.identification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.links)) {
        this.links = data().deepCopy(fields()[6].schema(), other.links);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.nationality)) {
        this.nationality = data().deepCopy(fields()[8].schema(), other.nationality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.occupation)) {
        this.occupation = data().deepCopy(fields()[9].schema(), other.occupation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.officer_role)) {
        this.officer_role = data().deepCopy(fields()[10].schema(), other.officer_role);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.resigned_on)) {
        this.resigned_on = data().deepCopy(fields()[11].schema(), other.resigned_on);
        fieldSetFlags()[11] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Data instance */
    private Builder(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data other) {
            super(com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appointed_on)) {
        this.appointed_on = data().deepCopy(fields()[1].schema(), other.appointed_on);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country_of_residence)) {
        this.country_of_residence = data().deepCopy(fields()[2].schema(), other.country_of_residence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.date_of_birth)) {
        this.date_of_birth = data().deepCopy(fields()[3].schema(), other.date_of_birth);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.former_names)) {
        this.former_names = data().deepCopy(fields()[4].schema(), other.former_names);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.identification)) {
        this.identification = data().deepCopy(fields()[5].schema(), other.identification);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.links)) {
        this.links = data().deepCopy(fields()[6].schema(), other.links);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.name)) {
        this.name = data().deepCopy(fields()[7].schema(), other.name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.nationality)) {
        this.nationality = data().deepCopy(fields()[8].schema(), other.nationality);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.occupation)) {
        this.occupation = data().deepCopy(fields()[9].schema(), other.occupation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.officer_role)) {
        this.officer_role = data().deepCopy(fields()[10].schema(), other.officer_role);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.resigned_on)) {
        this.resigned_on = data().deepCopy(fields()[11].schema(), other.resigned_on);
        fieldSetFlags()[11] = true;
      }
    }

    /** Gets the value of the 'address' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setAddress(com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'address' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'appointed_on' field */
    public java.lang.CharSequence getAppointedOn() {
      return appointed_on;
    }
    
    /** Sets the value of the 'appointed_on' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setAppointedOn(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.appointed_on = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'appointed_on' field has been set */
    public boolean hasAppointedOn() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'appointed_on' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearAppointedOn() {
      appointed_on = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'country_of_residence' field */
    public java.lang.CharSequence getCountryOfResidence() {
      return country_of_residence;
    }
    
    /** Sets the value of the 'country_of_residence' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setCountryOfResidence(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.country_of_residence = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'country_of_residence' field has been set */
    public boolean hasCountryOfResidence() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'country_of_residence' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearCountryOfResidence() {
      country_of_residence = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'date_of_birth' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth getDateOfBirth() {
      return date_of_birth;
    }
    
    /** Sets the value of the 'date_of_birth' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setDateOfBirth(com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth value) {
      validate(fields()[3], value);
      this.date_of_birth = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'date_of_birth' field has been set */
    public boolean hasDateOfBirth() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'date_of_birth' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearDateOfBirth() {
      date_of_birth = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'former_names' field */
    public java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> getFormerNames() {
      return former_names;
    }
    
    /** Sets the value of the 'former_names' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setFormerNames(java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames> value) {
      validate(fields()[4], value);
      this.former_names = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'former_names' field has been set */
    public boolean hasFormerNames() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'former_names' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearFormerNames() {
      former_names = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'identification' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification getIdentification() {
      return identification;
    }
    
    /** Sets the value of the 'identification' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setIdentification(com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification value) {
      validate(fields()[5], value);
      this.identification = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'identification' field has been set */
    public boolean hasIdentification() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'identification' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearIdentification() {
      identification = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links getLinks() {
      return links;
    }
    
    /** Sets the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setLinks(com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links value) {
      validate(fields()[6], value);
      this.links = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'links' field has been set */
    public boolean hasLinks() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearLinks() {
      links = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.name = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'name' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearName() {
      name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'nationality' field */
    public java.lang.CharSequence getNationality() {
      return nationality;
    }
    
    /** Sets the value of the 'nationality' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setNationality(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.nationality = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'nationality' field has been set */
    public boolean hasNationality() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'nationality' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearNationality() {
      nationality = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'occupation' field */
    public java.lang.CharSequence getOccupation() {
      return occupation;
    }
    
    /** Sets the value of the 'occupation' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setOccupation(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.occupation = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'occupation' field has been set */
    public boolean hasOccupation() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'occupation' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearOccupation() {
      occupation = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'officer_role' field */
    public java.lang.CharSequence getOfficerRole() {
      return officer_role;
    }
    
    /** Sets the value of the 'officer_role' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setOfficerRole(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.officer_role = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'officer_role' field has been set */
    public boolean hasOfficerRole() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'officer_role' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearOfficerRole() {
      officer_role = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'resigned_on' field */
    public java.lang.CharSequence getResignedOn() {
      return resigned_on;
    }
    
    /** Sets the value of the 'resigned_on' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder setResignedOn(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.resigned_on = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'resigned_on' field has been set */
    public boolean hasResignedOn() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'resigned_on' field */
    public com.equifax.fabric.uk.ingestion.officer.rawfields.data.Data.Builder clearResignedOn() {
      resigned_on = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    public Data build() {
      try {
        Data record = new Data();
        record.address = fieldSetFlags()[0] ? this.address : (com.equifax.fabric.uk.ingestion.officer.rawfields.data.address.Address) defaultValue(fields()[0]);
        record.appointed_on = fieldSetFlags()[1] ? this.appointed_on : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.country_of_residence = fieldSetFlags()[2] ? this.country_of_residence : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.date_of_birth = fieldSetFlags()[3] ? this.date_of_birth : (com.equifax.fabric.uk.ingestion.officer.rawfields.data.dateofbirth.DateOfBirth) defaultValue(fields()[3]);
        record.former_names = fieldSetFlags()[4] ? this.former_names : (java.util.List<com.equifax.fabric.uk.ingestion.officer.rawfields.data.formernames.FormerNames>) defaultValue(fields()[4]);
        record.identification = fieldSetFlags()[5] ? this.identification : (com.equifax.fabric.uk.ingestion.officer.rawfields.data.identification.Identification) defaultValue(fields()[5]);
        record.links = fieldSetFlags()[6] ? this.links : (com.equifax.fabric.uk.ingestion.officer.rawfields.data.links.Links) defaultValue(fields()[6]);
        record.name = fieldSetFlags()[7] ? this.name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.nationality = fieldSetFlags()[8] ? this.nationality : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.occupation = fieldSetFlags()[9] ? this.occupation : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.officer_role = fieldSetFlags()[10] ? this.officer_role : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.resigned_on = fieldSetFlags()[11] ? this.resigned_on : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
