/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Links extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Links\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links\",\"fields\":[{\"name\":\"persons_with_significant_control\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the persons with significant control list resource.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"persons_with_significant_control_statements\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the persons with significant control statements list resource.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"registers\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the registers resource for this company\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"self\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the resource.\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The URL of the persons with significant control list resource. */
  @Deprecated public java.lang.CharSequence persons_with_significant_control;
  /** The URL of the persons with significant control statements list resource. */
  @Deprecated public java.lang.CharSequence persons_with_significant_control_statements;
  /** The URL of the registers resource for this company */
  @Deprecated public java.lang.CharSequence registers;
  /** The URL of the resource. */
  @Deprecated public java.lang.CharSequence self;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Links() {}

  /**
   * All-args constructor.
   */
  public Links(java.lang.CharSequence persons_with_significant_control, java.lang.CharSequence persons_with_significant_control_statements, java.lang.CharSequence registers, java.lang.CharSequence self) {
    this.persons_with_significant_control = persons_with_significant_control;
    this.persons_with_significant_control_statements = persons_with_significant_control_statements;
    this.registers = registers;
    this.self = self;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return persons_with_significant_control;
    case 1: return persons_with_significant_control_statements;
    case 2: return registers;
    case 3: return self;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: persons_with_significant_control = (java.lang.CharSequence)value$; break;
    case 1: persons_with_significant_control_statements = (java.lang.CharSequence)value$; break;
    case 2: registers = (java.lang.CharSequence)value$; break;
    case 3: self = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'persons_with_significant_control' field.
   * The URL of the persons with significant control list resource.   */
  public java.lang.CharSequence getPersonsWithSignificantControl() {
    return persons_with_significant_control;
  }

  /**
   * Sets the value of the 'persons_with_significant_control' field.
   * The URL of the persons with significant control list resource.   * @param value the value to set.
   */
  public void setPersonsWithSignificantControl(java.lang.CharSequence value) {
    this.persons_with_significant_control = value;
  }

  /**
   * Gets the value of the 'persons_with_significant_control_statements' field.
   * The URL of the persons with significant control statements list resource.   */
  public java.lang.CharSequence getPersonsWithSignificantControlStatements() {
    return persons_with_significant_control_statements;
  }

  /**
   * Sets the value of the 'persons_with_significant_control_statements' field.
   * The URL of the persons with significant control statements list resource.   * @param value the value to set.
   */
  public void setPersonsWithSignificantControlStatements(java.lang.CharSequence value) {
    this.persons_with_significant_control_statements = value;
  }

  /**
   * Gets the value of the 'registers' field.
   * The URL of the registers resource for this company   */
  public java.lang.CharSequence getRegisters() {
    return registers;
  }

  /**
   * Sets the value of the 'registers' field.
   * The URL of the registers resource for this company   * @param value the value to set.
   */
  public void setRegisters(java.lang.CharSequence value) {
    this.registers = value;
  }

  /**
   * Gets the value of the 'self' field.
   * The URL of the resource.   */
  public java.lang.CharSequence getSelf() {
    return self;
  }

  /**
   * Sets the value of the 'self' field.
   * The URL of the resource.   * @param value the value to set.
   */
  public void setSelf(java.lang.CharSequence value) {
    this.self = value;
  }

  /** Creates a new Links RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder();
  }
  
  /** Creates a new Links RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder(other);
  }
  
  /** Creates a new Links RecordBuilder by copying an existing Links instance */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder(other);
  }
  
  /**
   * RecordBuilder for Links instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Links>
    implements org.apache.avro.data.RecordBuilder<Links> {

    private java.lang.CharSequence persons_with_significant_control;
    private java.lang.CharSequence persons_with_significant_control_statements;
    private java.lang.CharSequence registers;
    private java.lang.CharSequence self;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.persons_with_significant_control)) {
        this.persons_with_significant_control = data().deepCopy(fields()[0].schema(), other.persons_with_significant_control);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.persons_with_significant_control_statements)) {
        this.persons_with_significant_control_statements = data().deepCopy(fields()[1].schema(), other.persons_with_significant_control_statements);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.registers)) {
        this.registers = data().deepCopy(fields()[2].schema(), other.registers);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.self)) {
        this.self = data().deepCopy(fields()[3].schema(), other.self);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Links instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links other) {
            super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.SCHEMA$);
      if (isValidValue(fields()[0], other.persons_with_significant_control)) {
        this.persons_with_significant_control = data().deepCopy(fields()[0].schema(), other.persons_with_significant_control);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.persons_with_significant_control_statements)) {
        this.persons_with_significant_control_statements = data().deepCopy(fields()[1].schema(), other.persons_with_significant_control_statements);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.registers)) {
        this.registers = data().deepCopy(fields()[2].schema(), other.registers);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.self)) {
        this.self = data().deepCopy(fields()[3].schema(), other.self);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'persons_with_significant_control' field */
    public java.lang.CharSequence getPersonsWithSignificantControl() {
      return persons_with_significant_control;
    }
    
    /** Sets the value of the 'persons_with_significant_control' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder setPersonsWithSignificantControl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.persons_with_significant_control = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'persons_with_significant_control' field has been set */
    public boolean hasPersonsWithSignificantControl() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'persons_with_significant_control' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder clearPersonsWithSignificantControl() {
      persons_with_significant_control = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'persons_with_significant_control_statements' field */
    public java.lang.CharSequence getPersonsWithSignificantControlStatements() {
      return persons_with_significant_control_statements;
    }
    
    /** Sets the value of the 'persons_with_significant_control_statements' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder setPersonsWithSignificantControlStatements(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.persons_with_significant_control_statements = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'persons_with_significant_control_statements' field has been set */
    public boolean hasPersonsWithSignificantControlStatements() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'persons_with_significant_control_statements' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder clearPersonsWithSignificantControlStatements() {
      persons_with_significant_control_statements = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'registers' field */
    public java.lang.CharSequence getRegisters() {
      return registers;
    }
    
    /** Sets the value of the 'registers' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder setRegisters(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.registers = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'registers' field has been set */
    public boolean hasRegisters() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'registers' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder clearRegisters() {
      registers = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'self' field */
    public java.lang.CharSequence getSelf() {
      return self;
    }
    
    /** Sets the value of the 'self' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder setSelf(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.self = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'self' field has been set */
    public boolean hasSelf() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'self' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.links.Links.Builder clearSelf() {
      self = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Links build() {
      try {
        Links record = new Links();
        record.persons_with_significant_control = fieldSetFlags()[0] ? this.persons_with_significant_control : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.persons_with_significant_control_statements = fieldSetFlags()[1] ? this.persons_with_significant_control_statements : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.registers = fieldSetFlags()[2] ? this.registers : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.self = fieldSetFlags()[3] ? this.self : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
