/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ConfirmationStatement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ConfirmationStatement\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement\",\"fields\":[{\"name\":\"last_made_up_to\",\"type\":[\"null\",\"string\"],\"doc\":\"The date to which the company last made a confirmation statement.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"next_due\",\"type\":[\"null\",\"string\"],\"doc\":\"The date by which the next confimation statement must be received.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"next_made_up_to\",\"type\":[\"null\",\"string\"],\"doc\":\"The date to which the company must next make a confirmation statement.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"overdue\",\"type\":[\"null\",\"string\"],\"doc\":\"Flag indicating if the confirmation statement is overdue\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The date to which the company last made a confirmation statement. */
  @Deprecated public java.lang.CharSequence last_made_up_to;
  /** The date by which the next confimation statement must be received. */
  @Deprecated public java.lang.CharSequence next_due;
  /** The date to which the company must next make a confirmation statement. */
  @Deprecated public java.lang.CharSequence next_made_up_to;
  /** Flag indicating if the confirmation statement is overdue */
  @Deprecated public java.lang.CharSequence overdue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ConfirmationStatement() {}

  /**
   * All-args constructor.
   */
  public ConfirmationStatement(java.lang.CharSequence last_made_up_to, java.lang.CharSequence next_due, java.lang.CharSequence next_made_up_to, java.lang.CharSequence overdue) {
    this.last_made_up_to = last_made_up_to;
    this.next_due = next_due;
    this.next_made_up_to = next_made_up_to;
    this.overdue = overdue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return last_made_up_to;
    case 1: return next_due;
    case 2: return next_made_up_to;
    case 3: return overdue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: last_made_up_to = (java.lang.CharSequence)value$; break;
    case 1: next_due = (java.lang.CharSequence)value$; break;
    case 2: next_made_up_to = (java.lang.CharSequence)value$; break;
    case 3: overdue = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'last_made_up_to' field.
   * The date to which the company last made a confirmation statement.   */
  public java.lang.CharSequence getLastMadeUpTo() {
    return last_made_up_to;
  }

  /**
   * Sets the value of the 'last_made_up_to' field.
   * The date to which the company last made a confirmation statement.   * @param value the value to set.
   */
  public void setLastMadeUpTo(java.lang.CharSequence value) {
    this.last_made_up_to = value;
  }

  /**
   * Gets the value of the 'next_due' field.
   * The date by which the next confimation statement must be received.   */
  public java.lang.CharSequence getNextDue() {
    return next_due;
  }

  /**
   * Sets the value of the 'next_due' field.
   * The date by which the next confimation statement must be received.   * @param value the value to set.
   */
  public void setNextDue(java.lang.CharSequence value) {
    this.next_due = value;
  }

  /**
   * Gets the value of the 'next_made_up_to' field.
   * The date to which the company must next make a confirmation statement.   */
  public java.lang.CharSequence getNextMadeUpTo() {
    return next_made_up_to;
  }

  /**
   * Sets the value of the 'next_made_up_to' field.
   * The date to which the company must next make a confirmation statement.   * @param value the value to set.
   */
  public void setNextMadeUpTo(java.lang.CharSequence value) {
    this.next_made_up_to = value;
  }

  /**
   * Gets the value of the 'overdue' field.
   * Flag indicating if the confirmation statement is overdue   */
  public java.lang.CharSequence getOverdue() {
    return overdue;
  }

  /**
   * Sets the value of the 'overdue' field.
   * Flag indicating if the confirmation statement is overdue   * @param value the value to set.
   */
  public void setOverdue(java.lang.CharSequence value) {
    this.overdue = value;
  }

  /** Creates a new ConfirmationStatement RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder();
  }
  
  /** Creates a new ConfirmationStatement RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder(other);
  }
  
  /** Creates a new ConfirmationStatement RecordBuilder by copying an existing ConfirmationStatement instance */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder(other);
  }
  
  /**
   * RecordBuilder for ConfirmationStatement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ConfirmationStatement>
    implements org.apache.avro.data.RecordBuilder<ConfirmationStatement> {

    private java.lang.CharSequence last_made_up_to;
    private java.lang.CharSequence next_due;
    private java.lang.CharSequence next_made_up_to;
    private java.lang.CharSequence overdue;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.last_made_up_to)) {
        this.last_made_up_to = data().deepCopy(fields()[0].schema(), other.last_made_up_to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.next_due)) {
        this.next_due = data().deepCopy(fields()[1].schema(), other.next_due);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.next_made_up_to)) {
        this.next_made_up_to = data().deepCopy(fields()[2].schema(), other.next_made_up_to);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.overdue)) {
        this.overdue = data().deepCopy(fields()[3].schema(), other.overdue);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ConfirmationStatement instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement other) {
            super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.SCHEMA$);
      if (isValidValue(fields()[0], other.last_made_up_to)) {
        this.last_made_up_to = data().deepCopy(fields()[0].schema(), other.last_made_up_to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.next_due)) {
        this.next_due = data().deepCopy(fields()[1].schema(), other.next_due);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.next_made_up_to)) {
        this.next_made_up_to = data().deepCopy(fields()[2].schema(), other.next_made_up_to);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.overdue)) {
        this.overdue = data().deepCopy(fields()[3].schema(), other.overdue);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'last_made_up_to' field */
    public java.lang.CharSequence getLastMadeUpTo() {
      return last_made_up_to;
    }
    
    /** Sets the value of the 'last_made_up_to' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder setLastMadeUpTo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.last_made_up_to = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'last_made_up_to' field has been set */
    public boolean hasLastMadeUpTo() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'last_made_up_to' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder clearLastMadeUpTo() {
      last_made_up_to = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'next_due' field */
    public java.lang.CharSequence getNextDue() {
      return next_due;
    }
    
    /** Sets the value of the 'next_due' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder setNextDue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.next_due = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'next_due' field has been set */
    public boolean hasNextDue() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'next_due' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder clearNextDue() {
      next_due = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'next_made_up_to' field */
    public java.lang.CharSequence getNextMadeUpTo() {
      return next_made_up_to;
    }
    
    /** Sets the value of the 'next_made_up_to' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder setNextMadeUpTo(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.next_made_up_to = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'next_made_up_to' field has been set */
    public boolean hasNextMadeUpTo() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'next_made_up_to' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder clearNextMadeUpTo() {
      next_made_up_to = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'overdue' field */
    public java.lang.CharSequence getOverdue() {
      return overdue;
    }
    
    /** Sets the value of the 'overdue' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder setOverdue(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.overdue = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'overdue' field has been set */
    public boolean hasOverdue() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'overdue' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.confirmationstatement.ConfirmationStatement.Builder clearOverdue() {
      overdue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ConfirmationStatement build() {
      try {
        ConfirmationStatement record = new ConfirmationStatement();
        record.last_made_up_to = fieldSetFlags()[0] ? this.last_made_up_to : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.next_due = fieldSetFlags()[1] ? this.next_due : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.next_made_up_to = fieldSetFlags()[2] ? this.next_made_up_to : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.overdue = fieldSetFlags()[3] ? this.overdue : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
