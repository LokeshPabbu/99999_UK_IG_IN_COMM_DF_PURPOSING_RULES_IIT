/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountingRequirement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountingRequirement\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement\",\"fields\":[{\"name\":\"foreign_account_type\",\"type\":[\"null\",\"string\"],\"doc\":\"Foreign Company Account Type\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"terms_of_account_publication\",\"type\":[\"null\",\"string\"],\"doc\":\"Foreign Company Terms of Account Publication\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Foreign Company Account Type */
  @Deprecated public java.lang.CharSequence foreign_account_type;
  /** Foreign Company Terms of Account Publication */
  @Deprecated public java.lang.CharSequence terms_of_account_publication;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AccountingRequirement() {}

  /**
   * All-args constructor.
   */
  public AccountingRequirement(java.lang.CharSequence foreign_account_type, java.lang.CharSequence terms_of_account_publication) {
    this.foreign_account_type = foreign_account_type;
    this.terms_of_account_publication = terms_of_account_publication;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return foreign_account_type;
    case 1: return terms_of_account_publication;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: foreign_account_type = (java.lang.CharSequence)value$; break;
    case 1: terms_of_account_publication = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'foreign_account_type' field.
   * Foreign Company Account Type   */
  public java.lang.CharSequence getForeignAccountType() {
    return foreign_account_type;
  }

  /**
   * Sets the value of the 'foreign_account_type' field.
   * Foreign Company Account Type   * @param value the value to set.
   */
  public void setForeignAccountType(java.lang.CharSequence value) {
    this.foreign_account_type = value;
  }

  /**
   * Gets the value of the 'terms_of_account_publication' field.
   * Foreign Company Terms of Account Publication   */
  public java.lang.CharSequence getTermsOfAccountPublication() {
    return terms_of_account_publication;
  }

  /**
   * Sets the value of the 'terms_of_account_publication' field.
   * Foreign Company Terms of Account Publication   * @param value the value to set.
   */
  public void setTermsOfAccountPublication(java.lang.CharSequence value) {
    this.terms_of_account_publication = value;
  }

  /** Creates a new AccountingRequirement RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder();
  }
  
  /** Creates a new AccountingRequirement RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder(other);
  }
  
  /** Creates a new AccountingRequirement RecordBuilder by copying an existing AccountingRequirement instance */
  public static com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement other) {
    return new com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder(other);
  }
  
  /**
   * RecordBuilder for AccountingRequirement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountingRequirement>
    implements org.apache.avro.data.RecordBuilder<AccountingRequirement> {

    private java.lang.CharSequence foreign_account_type;
    private java.lang.CharSequence terms_of_account_publication;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.foreign_account_type)) {
        this.foreign_account_type = data().deepCopy(fields()[0].schema(), other.foreign_account_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.terms_of_account_publication)) {
        this.terms_of_account_publication = data().deepCopy(fields()[1].schema(), other.terms_of_account_publication);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AccountingRequirement instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement other) {
            super(com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.SCHEMA$);
      if (isValidValue(fields()[0], other.foreign_account_type)) {
        this.foreign_account_type = data().deepCopy(fields()[0].schema(), other.foreign_account_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.terms_of_account_publication)) {
        this.terms_of_account_publication = data().deepCopy(fields()[1].schema(), other.terms_of_account_publication);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'foreign_account_type' field */
    public java.lang.CharSequence getForeignAccountType() {
      return foreign_account_type;
    }
    
    /** Sets the value of the 'foreign_account_type' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder setForeignAccountType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.foreign_account_type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'foreign_account_type' field has been set */
    public boolean hasForeignAccountType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'foreign_account_type' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder clearForeignAccountType() {
      foreign_account_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'terms_of_account_publication' field */
    public java.lang.CharSequence getTermsOfAccountPublication() {
      return terms_of_account_publication;
    }
    
    /** Sets the value of the 'terms_of_account_publication' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder setTermsOfAccountPublication(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.terms_of_account_publication = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'terms_of_account_publication' field has been set */
    public boolean hasTermsOfAccountPublication() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'terms_of_account_publication' field */
    public com.equifax.fabric.uk.ingestion.companyregister.rawfields.data.foreigncompanydetails.accountingrequirement.AccountingRequirement.Builder clearTermsOfAccountPublication() {
      terms_of_account_publication = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AccountingRequirement build() {
      try {
        AccountingRequirement record = new AccountingRequirement();
        record.foreign_account_type = fieldSetFlags()[0] ? this.foreign_account_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.terms_of_account_publication = fieldSetFlags()[1] ? this.terms_of_account_publication : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
