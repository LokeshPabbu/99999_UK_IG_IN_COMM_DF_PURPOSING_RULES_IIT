/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Particulars extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Particulars\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars\",\"fields\":[{\"name\":\"chargor_acting_as_bare_trustee\",\"type\":[\"null\",\"string\"],\"doc\":\"The chargor is acting as a bare trustee for the property\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_fixed_charge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a fixed charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_floating_charge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a floating charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_negative_pledge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a negative pledge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Details of charge particulars\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"floating_charge_covers_all\",\"type\":[\"null\",\"string\"],\"doc\":\"The floating charge covers all the property or undertaking or the company\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of charge particulars. For enumeration descriptions see particular-description section in the enumeration mappings Possible values are:short-particulars charged-property-description charged-property-or-undertaking-description  brief-description\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The chargor is acting as a bare trustee for the property */
  @Deprecated public java.lang.CharSequence chargor_acting_as_bare_trustee;
  /** The charge contains a fixed charge */
  @Deprecated public java.lang.CharSequence contains_fixed_charge;
  /** The charge contains a floating charge */
  @Deprecated public java.lang.CharSequence contains_floating_charge;
  /** The charge contains a negative pledge */
  @Deprecated public java.lang.CharSequence contains_negative_pledge;
  /** Details of charge particulars */
  @Deprecated public java.lang.CharSequence description;
  /** The floating charge covers all the property or undertaking or the company */
  @Deprecated public java.lang.CharSequence floating_charge_covers_all;
  /** The type of charge particulars. For enumeration descriptions see particular-description section in the enumeration mappings Possible values are:short-particulars charged-property-description charged-property-or-undertaking-description  brief-description */
  @Deprecated public java.lang.CharSequence type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Particulars() {}

  /**
   * All-args constructor.
   */
  public Particulars(java.lang.CharSequence chargor_acting_as_bare_trustee, java.lang.CharSequence contains_fixed_charge, java.lang.CharSequence contains_floating_charge, java.lang.CharSequence contains_negative_pledge, java.lang.CharSequence description, java.lang.CharSequence floating_charge_covers_all, java.lang.CharSequence type) {
    this.chargor_acting_as_bare_trustee = chargor_acting_as_bare_trustee;
    this.contains_fixed_charge = contains_fixed_charge;
    this.contains_floating_charge = contains_floating_charge;
    this.contains_negative_pledge = contains_negative_pledge;
    this.description = description;
    this.floating_charge_covers_all = floating_charge_covers_all;
    this.type = type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chargor_acting_as_bare_trustee;
    case 1: return contains_fixed_charge;
    case 2: return contains_floating_charge;
    case 3: return contains_negative_pledge;
    case 4: return description;
    case 5: return floating_charge_covers_all;
    case 6: return type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chargor_acting_as_bare_trustee = (java.lang.CharSequence)value$; break;
    case 1: contains_fixed_charge = (java.lang.CharSequence)value$; break;
    case 2: contains_floating_charge = (java.lang.CharSequence)value$; break;
    case 3: contains_negative_pledge = (java.lang.CharSequence)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: floating_charge_covers_all = (java.lang.CharSequence)value$; break;
    case 6: type = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chargor_acting_as_bare_trustee' field.
   * The chargor is acting as a bare trustee for the property   */
  public java.lang.CharSequence getChargorActingAsBareTrustee() {
    return chargor_acting_as_bare_trustee;
  }

  /**
   * Sets the value of the 'chargor_acting_as_bare_trustee' field.
   * The chargor is acting as a bare trustee for the property   * @param value the value to set.
   */
  public void setChargorActingAsBareTrustee(java.lang.CharSequence value) {
    this.chargor_acting_as_bare_trustee = value;
  }

  /**
   * Gets the value of the 'contains_fixed_charge' field.
   * The charge contains a fixed charge   */
  public java.lang.CharSequence getContainsFixedCharge() {
    return contains_fixed_charge;
  }

  /**
   * Sets the value of the 'contains_fixed_charge' field.
   * The charge contains a fixed charge   * @param value the value to set.
   */
  public void setContainsFixedCharge(java.lang.CharSequence value) {
    this.contains_fixed_charge = value;
  }

  /**
   * Gets the value of the 'contains_floating_charge' field.
   * The charge contains a floating charge   */
  public java.lang.CharSequence getContainsFloatingCharge() {
    return contains_floating_charge;
  }

  /**
   * Sets the value of the 'contains_floating_charge' field.
   * The charge contains a floating charge   * @param value the value to set.
   */
  public void setContainsFloatingCharge(java.lang.CharSequence value) {
    this.contains_floating_charge = value;
  }

  /**
   * Gets the value of the 'contains_negative_pledge' field.
   * The charge contains a negative pledge   */
  public java.lang.CharSequence getContainsNegativePledge() {
    return contains_negative_pledge;
  }

  /**
   * Sets the value of the 'contains_negative_pledge' field.
   * The charge contains a negative pledge   * @param value the value to set.
   */
  public void setContainsNegativePledge(java.lang.CharSequence value) {
    this.contains_negative_pledge = value;
  }

  /**
   * Gets the value of the 'description' field.
   * Details of charge particulars   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Details of charge particulars   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'floating_charge_covers_all' field.
   * The floating charge covers all the property or undertaking or the company   */
  public java.lang.CharSequence getFloatingChargeCoversAll() {
    return floating_charge_covers_all;
  }

  /**
   * Sets the value of the 'floating_charge_covers_all' field.
   * The floating charge covers all the property or undertaking or the company   * @param value the value to set.
   */
  public void setFloatingChargeCoversAll(java.lang.CharSequence value) {
    this.floating_charge_covers_all = value;
  }

  /**
   * Gets the value of the 'type' field.
   * The type of charge particulars. For enumeration descriptions see particular-description section in the enumeration mappings Possible values are:short-particulars charged-property-description charged-property-or-undertaking-description  brief-description   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of charge particulars. For enumeration descriptions see particular-description section in the enumeration mappings Possible values are:short-particulars charged-property-description charged-property-or-undertaking-description  brief-description   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /** Creates a new Particulars RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder();
  }
  
  /** Creates a new Particulars RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder newBuilder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder other) {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder(other);
  }
  
  /** Creates a new Particulars RecordBuilder by copying an existing Particulars instance */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder newBuilder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars other) {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder(other);
  }
  
  /**
   * RecordBuilder for Particulars instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Particulars>
    implements org.apache.avro.data.RecordBuilder<Particulars> {

    private java.lang.CharSequence chargor_acting_as_bare_trustee;
    private java.lang.CharSequence contains_fixed_charge;
    private java.lang.CharSequence contains_floating_charge;
    private java.lang.CharSequence contains_negative_pledge;
    private java.lang.CharSequence description;
    private java.lang.CharSequence floating_charge_covers_all;
    private java.lang.CharSequence type;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chargor_acting_as_bare_trustee)) {
        this.chargor_acting_as_bare_trustee = data().deepCopy(fields()[0].schema(), other.chargor_acting_as_bare_trustee);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contains_fixed_charge)) {
        this.contains_fixed_charge = data().deepCopy(fields()[1].schema(), other.contains_fixed_charge);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contains_floating_charge)) {
        this.contains_floating_charge = data().deepCopy(fields()[2].schema(), other.contains_floating_charge);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contains_negative_pledge)) {
        this.contains_negative_pledge = data().deepCopy(fields()[3].schema(), other.contains_negative_pledge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.floating_charge_covers_all)) {
        this.floating_charge_covers_all = data().deepCopy(fields()[5].schema(), other.floating_charge_covers_all);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Particulars instance */
    private Builder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars other) {
            super(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.SCHEMA$);
      if (isValidValue(fields()[0], other.chargor_acting_as_bare_trustee)) {
        this.chargor_acting_as_bare_trustee = data().deepCopy(fields()[0].schema(), other.chargor_acting_as_bare_trustee);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contains_fixed_charge)) {
        this.contains_fixed_charge = data().deepCopy(fields()[1].schema(), other.contains_fixed_charge);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.contains_floating_charge)) {
        this.contains_floating_charge = data().deepCopy(fields()[2].schema(), other.contains_floating_charge);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.contains_negative_pledge)) {
        this.contains_negative_pledge = data().deepCopy(fields()[3].schema(), other.contains_negative_pledge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.floating_charge_covers_all)) {
        this.floating_charge_covers_all = data().deepCopy(fields()[5].schema(), other.floating_charge_covers_all);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.type)) {
        this.type = data().deepCopy(fields()[6].schema(), other.type);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'chargor_acting_as_bare_trustee' field */
    public java.lang.CharSequence getChargorActingAsBareTrustee() {
      return chargor_acting_as_bare_trustee;
    }
    
    /** Sets the value of the 'chargor_acting_as_bare_trustee' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setChargorActingAsBareTrustee(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.chargor_acting_as_bare_trustee = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'chargor_acting_as_bare_trustee' field has been set */
    public boolean hasChargorActingAsBareTrustee() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'chargor_acting_as_bare_trustee' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearChargorActingAsBareTrustee() {
      chargor_acting_as_bare_trustee = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'contains_fixed_charge' field */
    public java.lang.CharSequence getContainsFixedCharge() {
      return contains_fixed_charge;
    }
    
    /** Sets the value of the 'contains_fixed_charge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setContainsFixedCharge(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.contains_fixed_charge = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'contains_fixed_charge' field has been set */
    public boolean hasContainsFixedCharge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'contains_fixed_charge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearContainsFixedCharge() {
      contains_fixed_charge = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'contains_floating_charge' field */
    public java.lang.CharSequence getContainsFloatingCharge() {
      return contains_floating_charge;
    }
    
    /** Sets the value of the 'contains_floating_charge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setContainsFloatingCharge(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.contains_floating_charge = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'contains_floating_charge' field has been set */
    public boolean hasContainsFloatingCharge() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'contains_floating_charge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearContainsFloatingCharge() {
      contains_floating_charge = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'contains_negative_pledge' field */
    public java.lang.CharSequence getContainsNegativePledge() {
      return contains_negative_pledge;
    }
    
    /** Sets the value of the 'contains_negative_pledge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setContainsNegativePledge(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.contains_negative_pledge = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'contains_negative_pledge' field has been set */
    public boolean hasContainsNegativePledge() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'contains_negative_pledge' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearContainsNegativePledge() {
      contains_negative_pledge = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'description' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'floating_charge_covers_all' field */
    public java.lang.CharSequence getFloatingChargeCoversAll() {
      return floating_charge_covers_all;
    }
    
    /** Sets the value of the 'floating_charge_covers_all' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setFloatingChargeCoversAll(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.floating_charge_covers_all = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'floating_charge_covers_all' field has been set */
    public boolean hasFloatingChargeCoversAll() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'floating_charge_covers_all' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearFloatingChargeCoversAll() {
      floating_charge_covers_all = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder setType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.type = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'type' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars.Builder clearType() {
      type = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Particulars build() {
      try {
        Particulars record = new Particulars();
        record.chargor_acting_as_bare_trustee = fieldSetFlags()[0] ? this.chargor_acting_as_bare_trustee : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.contains_fixed_charge = fieldSetFlags()[1] ? this.contains_fixed_charge : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.contains_floating_charge = fieldSetFlags()[2] ? this.contains_floating_charge : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.contains_negative_pledge = fieldSetFlags()[3] ? this.contains_negative_pledge : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.floating_charge_covers_all = fieldSetFlags()[5] ? this.floating_charge_covers_all : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.type = fieldSetFlags()[6] ? this.type : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
