/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class totalReservesFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"totalReservesFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves\",\"fields\":[{\"name\":\"profitAndLossAccount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Profit And Loss Account\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"sharePremiumAccount\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Share Premium Account\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"revaluationReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Revaluation Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"capitalReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Capital Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"capitalRedemptionReserve\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Capital Redemption Reserve\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"otherReserves\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Other Reserves\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"goodwillReserves\",\"type\":[\"null\",\"string\"],\"doc\":\"Total Reserves - Goodwill Reserves\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Total Reserves - Profit And Loss Account */
  @Deprecated public java.lang.CharSequence profitAndLossAccount;
  /** Total Reserves - Share Premium Account */
  @Deprecated public java.lang.CharSequence sharePremiumAccount;
  /** Total Reserves - Revaluation Reserve */
  @Deprecated public java.lang.CharSequence revaluationReserve;
  /** Total Reserves - Capital Reserve */
  @Deprecated public java.lang.CharSequence capitalReserve;
  /** Total Reserves - Capital Redemption Reserve */
  @Deprecated public java.lang.CharSequence capitalRedemptionReserve;
  /** Total Reserves - Other Reserves */
  @Deprecated public java.lang.CharSequence otherReserves;
  /** Total Reserves - Goodwill Reserves */
  @Deprecated public java.lang.CharSequence goodwillReserves;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public totalReservesFields() {}

  /**
   * All-args constructor.
   */
  public totalReservesFields(java.lang.CharSequence profitAndLossAccount, java.lang.CharSequence sharePremiumAccount, java.lang.CharSequence revaluationReserve, java.lang.CharSequence capitalReserve, java.lang.CharSequence capitalRedemptionReserve, java.lang.CharSequence otherReserves, java.lang.CharSequence goodwillReserves) {
    this.profitAndLossAccount = profitAndLossAccount;
    this.sharePremiumAccount = sharePremiumAccount;
    this.revaluationReserve = revaluationReserve;
    this.capitalReserve = capitalReserve;
    this.capitalRedemptionReserve = capitalRedemptionReserve;
    this.otherReserves = otherReserves;
    this.goodwillReserves = goodwillReserves;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return profitAndLossAccount;
    case 1: return sharePremiumAccount;
    case 2: return revaluationReserve;
    case 3: return capitalReserve;
    case 4: return capitalRedemptionReserve;
    case 5: return otherReserves;
    case 6: return goodwillReserves;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: profitAndLossAccount = (java.lang.CharSequence)value$; break;
    case 1: sharePremiumAccount = (java.lang.CharSequence)value$; break;
    case 2: revaluationReserve = (java.lang.CharSequence)value$; break;
    case 3: capitalReserve = (java.lang.CharSequence)value$; break;
    case 4: capitalRedemptionReserve = (java.lang.CharSequence)value$; break;
    case 5: otherReserves = (java.lang.CharSequence)value$; break;
    case 6: goodwillReserves = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'profitAndLossAccount' field.
   * Total Reserves - Profit And Loss Account   */
  public java.lang.CharSequence getProfitAndLossAccount() {
    return profitAndLossAccount;
  }

  /**
   * Sets the value of the 'profitAndLossAccount' field.
   * Total Reserves - Profit And Loss Account   * @param value the value to set.
   */
  public void setProfitAndLossAccount(java.lang.CharSequence value) {
    this.profitAndLossAccount = value;
  }

  /**
   * Gets the value of the 'sharePremiumAccount' field.
   * Total Reserves - Share Premium Account   */
  public java.lang.CharSequence getSharePremiumAccount() {
    return sharePremiumAccount;
  }

  /**
   * Sets the value of the 'sharePremiumAccount' field.
   * Total Reserves - Share Premium Account   * @param value the value to set.
   */
  public void setSharePremiumAccount(java.lang.CharSequence value) {
    this.sharePremiumAccount = value;
  }

  /**
   * Gets the value of the 'revaluationReserve' field.
   * Total Reserves - Revaluation Reserve   */
  public java.lang.CharSequence getRevaluationReserve() {
    return revaluationReserve;
  }

  /**
   * Sets the value of the 'revaluationReserve' field.
   * Total Reserves - Revaluation Reserve   * @param value the value to set.
   */
  public void setRevaluationReserve(java.lang.CharSequence value) {
    this.revaluationReserve = value;
  }

  /**
   * Gets the value of the 'capitalReserve' field.
   * Total Reserves - Capital Reserve   */
  public java.lang.CharSequence getCapitalReserve() {
    return capitalReserve;
  }

  /**
   * Sets the value of the 'capitalReserve' field.
   * Total Reserves - Capital Reserve   * @param value the value to set.
   */
  public void setCapitalReserve(java.lang.CharSequence value) {
    this.capitalReserve = value;
  }

  /**
   * Gets the value of the 'capitalRedemptionReserve' field.
   * Total Reserves - Capital Redemption Reserve   */
  public java.lang.CharSequence getCapitalRedemptionReserve() {
    return capitalRedemptionReserve;
  }

  /**
   * Sets the value of the 'capitalRedemptionReserve' field.
   * Total Reserves - Capital Redemption Reserve   * @param value the value to set.
   */
  public void setCapitalRedemptionReserve(java.lang.CharSequence value) {
    this.capitalRedemptionReserve = value;
  }

  /**
   * Gets the value of the 'otherReserves' field.
   * Total Reserves - Other Reserves   */
  public java.lang.CharSequence getOtherReserves() {
    return otherReserves;
  }

  /**
   * Sets the value of the 'otherReserves' field.
   * Total Reserves - Other Reserves   * @param value the value to set.
   */
  public void setOtherReserves(java.lang.CharSequence value) {
    this.otherReserves = value;
  }

  /**
   * Gets the value of the 'goodwillReserves' field.
   * Total Reserves - Goodwill Reserves   */
  public java.lang.CharSequence getGoodwillReserves() {
    return goodwillReserves;
  }

  /**
   * Sets the value of the 'goodwillReserves' field.
   * Total Reserves - Goodwill Reserves   * @param value the value to set.
   */
  public void setGoodwillReserves(java.lang.CharSequence value) {
    this.goodwillReserves = value;
  }

  /** Creates a new totalReservesFields RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder();
  }
  
  /** Creates a new totalReservesFields RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder(other);
  }
  
  /** Creates a new totalReservesFields RecordBuilder by copying an existing totalReservesFields instance */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder(other);
  }
  
  /**
   * RecordBuilder for totalReservesFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<totalReservesFields>
    implements org.apache.avro.data.RecordBuilder<totalReservesFields> {

    private java.lang.CharSequence profitAndLossAccount;
    private java.lang.CharSequence sharePremiumAccount;
    private java.lang.CharSequence revaluationReserve;
    private java.lang.CharSequence capitalReserve;
    private java.lang.CharSequence capitalRedemptionReserve;
    private java.lang.CharSequence otherReserves;
    private java.lang.CharSequence goodwillReserves;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.profitAndLossAccount)) {
        this.profitAndLossAccount = data().deepCopy(fields()[0].schema(), other.profitAndLossAccount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sharePremiumAccount)) {
        this.sharePremiumAccount = data().deepCopy(fields()[1].schema(), other.sharePremiumAccount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revaluationReserve)) {
        this.revaluationReserve = data().deepCopy(fields()[2].schema(), other.revaluationReserve);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.capitalReserve)) {
        this.capitalReserve = data().deepCopy(fields()[3].schema(), other.capitalReserve);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.capitalRedemptionReserve)) {
        this.capitalRedemptionReserve = data().deepCopy(fields()[4].schema(), other.capitalRedemptionReserve);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.otherReserves)) {
        this.otherReserves = data().deepCopy(fields()[5].schema(), other.otherReserves);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.goodwillReserves)) {
        this.goodwillReserves = data().deepCopy(fields()[6].schema(), other.goodwillReserves);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing totalReservesFields instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields other) {
            super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.SCHEMA$);
      if (isValidValue(fields()[0], other.profitAndLossAccount)) {
        this.profitAndLossAccount = data().deepCopy(fields()[0].schema(), other.profitAndLossAccount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sharePremiumAccount)) {
        this.sharePremiumAccount = data().deepCopy(fields()[1].schema(), other.sharePremiumAccount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revaluationReserve)) {
        this.revaluationReserve = data().deepCopy(fields()[2].schema(), other.revaluationReserve);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.capitalReserve)) {
        this.capitalReserve = data().deepCopy(fields()[3].schema(), other.capitalReserve);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.capitalRedemptionReserve)) {
        this.capitalRedemptionReserve = data().deepCopy(fields()[4].schema(), other.capitalRedemptionReserve);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.otherReserves)) {
        this.otherReserves = data().deepCopy(fields()[5].schema(), other.otherReserves);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.goodwillReserves)) {
        this.goodwillReserves = data().deepCopy(fields()[6].schema(), other.goodwillReserves);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'profitAndLossAccount' field */
    public java.lang.CharSequence getProfitAndLossAccount() {
      return profitAndLossAccount;
    }
    
    /** Sets the value of the 'profitAndLossAccount' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setProfitAndLossAccount(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.profitAndLossAccount = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'profitAndLossAccount' field has been set */
    public boolean hasProfitAndLossAccount() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'profitAndLossAccount' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearProfitAndLossAccount() {
      profitAndLossAccount = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sharePremiumAccount' field */
    public java.lang.CharSequence getSharePremiumAccount() {
      return sharePremiumAccount;
    }
    
    /** Sets the value of the 'sharePremiumAccount' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setSharePremiumAccount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sharePremiumAccount = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sharePremiumAccount' field has been set */
    public boolean hasSharePremiumAccount() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sharePremiumAccount' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearSharePremiumAccount() {
      sharePremiumAccount = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'revaluationReserve' field */
    public java.lang.CharSequence getRevaluationReserve() {
      return revaluationReserve;
    }
    
    /** Sets the value of the 'revaluationReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setRevaluationReserve(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.revaluationReserve = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'revaluationReserve' field has been set */
    public boolean hasRevaluationReserve() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'revaluationReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearRevaluationReserve() {
      revaluationReserve = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'capitalReserve' field */
    public java.lang.CharSequence getCapitalReserve() {
      return capitalReserve;
    }
    
    /** Sets the value of the 'capitalReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setCapitalReserve(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.capitalReserve = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'capitalReserve' field has been set */
    public boolean hasCapitalReserve() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'capitalReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearCapitalReserve() {
      capitalReserve = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'capitalRedemptionReserve' field */
    public java.lang.CharSequence getCapitalRedemptionReserve() {
      return capitalRedemptionReserve;
    }
    
    /** Sets the value of the 'capitalRedemptionReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setCapitalRedemptionReserve(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.capitalRedemptionReserve = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'capitalRedemptionReserve' field has been set */
    public boolean hasCapitalRedemptionReserve() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'capitalRedemptionReserve' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearCapitalRedemptionReserve() {
      capitalRedemptionReserve = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'otherReserves' field */
    public java.lang.CharSequence getOtherReserves() {
      return otherReserves;
    }
    
    /** Sets the value of the 'otherReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setOtherReserves(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.otherReserves = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'otherReserves' field has been set */
    public boolean hasOtherReserves() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'otherReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearOtherReserves() {
      otherReserves = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'goodwillReserves' field */
    public java.lang.CharSequence getGoodwillReserves() {
      return goodwillReserves;
    }
    
    /** Sets the value of the 'goodwillReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder setGoodwillReserves(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.goodwillReserves = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'goodwillReserves' field has been set */
    public boolean hasGoodwillReserves() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'goodwillReserves' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.totalreserves.totalReservesFields.Builder clearGoodwillReserves() {
      goodwillReserves = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public totalReservesFields build() {
      try {
        totalReservesFields record = new totalReservesFields();
        record.profitAndLossAccount = fieldSetFlags()[0] ? this.profitAndLossAccount : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sharePremiumAccount = fieldSetFlags()[1] ? this.sharePremiumAccount : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.revaluationReserve = fieldSetFlags()[2] ? this.revaluationReserve : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.capitalReserve = fieldSetFlags()[3] ? this.capitalReserve : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.capitalRedemptionReserve = fieldSetFlags()[4] ? this.capitalRedemptionReserve : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.otherReserves = fieldSetFlags()[5] ? this.otherReserves : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.goodwillReserves = fieldSetFlags()[6] ? this.goodwillReserves : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
