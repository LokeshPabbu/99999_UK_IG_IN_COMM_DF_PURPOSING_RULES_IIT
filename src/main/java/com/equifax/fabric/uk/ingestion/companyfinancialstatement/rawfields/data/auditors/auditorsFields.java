/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class auditorsFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"auditorsFields\",\"namespace\":\"com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors\",\"fields\":[{\"name\":\"auditorName\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Auditor Name\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"},{\"name\":\"town\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Town\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"remuneration\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Remuneration\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"comments\",\"type\":[\"null\",\"string\"],\"doc\":\"Any comments that the auditor has upon the accounts.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"qualified\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Qualified\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"trueAndFairView\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - True and Fair View\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"creditorsSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Creditors Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"auditExempt\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Audit Exempt\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"directorsSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Directors Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"withoutQualifying\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Without Qualifying\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"goingConcernInappropriate\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Going Concern Inappropriate\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"accounts_Signed\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Accounts Signed\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"disclaimerOfOpinion\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Disclaimer of Opinion\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"bankSupport\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Bank Support\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"noteNetCurrentLiab\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Note Net Current Liab\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"abbreviatedAccounts\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Abbreviated Accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"seriousAccountingIrregularities\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Serious Accounting Irregularities\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"notes\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Notes\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"firstAccounts\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - First Accounts\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"tradeMonths\",\"type\":[\"null\",\"string\"],\"doc\":\"Auditors - Trade Months\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Auditors - Auditor Name */
  @Deprecated public java.lang.CharSequence auditorName;
  /** Auditors - Town */
  @Deprecated public java.lang.CharSequence town;
  /** Auditors - Remuneration */
  @Deprecated public java.lang.CharSequence remuneration;
  /** Any comments that the auditor has upon the accounts. */
  @Deprecated public java.lang.CharSequence comments;
  /** Auditors - Qualified */
  @Deprecated public java.lang.CharSequence qualified;
  /** Auditors - True and Fair View */
  @Deprecated public java.lang.CharSequence trueAndFairView;
  /** Auditors - Creditors Support */
  @Deprecated public java.lang.CharSequence creditorsSupport;
  /** Auditors - Audit Exempt */
  @Deprecated public java.lang.CharSequence auditExempt;
  /** Auditors - Directors Support */
  @Deprecated public java.lang.CharSequence directorsSupport;
  /** Auditors - Without Qualifying */
  @Deprecated public java.lang.CharSequence withoutQualifying;
  /** Auditors - Going Concern Inappropriate */
  @Deprecated public java.lang.CharSequence goingConcernInappropriate;
  /** Auditors - Accounts Signed */
  @Deprecated public java.lang.CharSequence accounts_Signed;
  /** Auditors - Disclaimer of Opinion */
  @Deprecated public java.lang.CharSequence disclaimerOfOpinion;
  /** Auditors - Bank Support */
  @Deprecated public java.lang.CharSequence bankSupport;
  /** Auditors - Note Net Current Liab */
  @Deprecated public java.lang.CharSequence noteNetCurrentLiab;
  /** Auditors - Abbreviated Accounts */
  @Deprecated public java.lang.CharSequence abbreviatedAccounts;
  /** Auditors - Serious Accounting Irregularities */
  @Deprecated public java.lang.CharSequence seriousAccountingIrregularities;
  /** Auditors - Notes */
  @Deprecated public java.lang.CharSequence notes;
  /** Auditors - First Accounts */
  @Deprecated public java.lang.CharSequence firstAccounts;
  /** Auditors - Trade Months */
  @Deprecated public java.lang.CharSequence tradeMonths;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public auditorsFields() {}

  /**
   * All-args constructor.
   */
  public auditorsFields(java.lang.CharSequence auditorName, java.lang.CharSequence town, java.lang.CharSequence remuneration, java.lang.CharSequence comments, java.lang.CharSequence qualified, java.lang.CharSequence trueAndFairView, java.lang.CharSequence creditorsSupport, java.lang.CharSequence auditExempt, java.lang.CharSequence directorsSupport, java.lang.CharSequence withoutQualifying, java.lang.CharSequence goingConcernInappropriate, java.lang.CharSequence accounts_Signed, java.lang.CharSequence disclaimerOfOpinion, java.lang.CharSequence bankSupport, java.lang.CharSequence noteNetCurrentLiab, java.lang.CharSequence abbreviatedAccounts, java.lang.CharSequence seriousAccountingIrregularities, java.lang.CharSequence notes, java.lang.CharSequence firstAccounts, java.lang.CharSequence tradeMonths) {
    this.auditorName = auditorName;
    this.town = town;
    this.remuneration = remuneration;
    this.comments = comments;
    this.qualified = qualified;
    this.trueAndFairView = trueAndFairView;
    this.creditorsSupport = creditorsSupport;
    this.auditExempt = auditExempt;
    this.directorsSupport = directorsSupport;
    this.withoutQualifying = withoutQualifying;
    this.goingConcernInappropriate = goingConcernInappropriate;
    this.accounts_Signed = accounts_Signed;
    this.disclaimerOfOpinion = disclaimerOfOpinion;
    this.bankSupport = bankSupport;
    this.noteNetCurrentLiab = noteNetCurrentLiab;
    this.abbreviatedAccounts = abbreviatedAccounts;
    this.seriousAccountingIrregularities = seriousAccountingIrregularities;
    this.notes = notes;
    this.firstAccounts = firstAccounts;
    this.tradeMonths = tradeMonths;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return auditorName;
    case 1: return town;
    case 2: return remuneration;
    case 3: return comments;
    case 4: return qualified;
    case 5: return trueAndFairView;
    case 6: return creditorsSupport;
    case 7: return auditExempt;
    case 8: return directorsSupport;
    case 9: return withoutQualifying;
    case 10: return goingConcernInappropriate;
    case 11: return accounts_Signed;
    case 12: return disclaimerOfOpinion;
    case 13: return bankSupport;
    case 14: return noteNetCurrentLiab;
    case 15: return abbreviatedAccounts;
    case 16: return seriousAccountingIrregularities;
    case 17: return notes;
    case 18: return firstAccounts;
    case 19: return tradeMonths;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: auditorName = (java.lang.CharSequence)value$; break;
    case 1: town = (java.lang.CharSequence)value$; break;
    case 2: remuneration = (java.lang.CharSequence)value$; break;
    case 3: comments = (java.lang.CharSequence)value$; break;
    case 4: qualified = (java.lang.CharSequence)value$; break;
    case 5: trueAndFairView = (java.lang.CharSequence)value$; break;
    case 6: creditorsSupport = (java.lang.CharSequence)value$; break;
    case 7: auditExempt = (java.lang.CharSequence)value$; break;
    case 8: directorsSupport = (java.lang.CharSequence)value$; break;
    case 9: withoutQualifying = (java.lang.CharSequence)value$; break;
    case 10: goingConcernInappropriate = (java.lang.CharSequence)value$; break;
    case 11: accounts_Signed = (java.lang.CharSequence)value$; break;
    case 12: disclaimerOfOpinion = (java.lang.CharSequence)value$; break;
    case 13: bankSupport = (java.lang.CharSequence)value$; break;
    case 14: noteNetCurrentLiab = (java.lang.CharSequence)value$; break;
    case 15: abbreviatedAccounts = (java.lang.CharSequence)value$; break;
    case 16: seriousAccountingIrregularities = (java.lang.CharSequence)value$; break;
    case 17: notes = (java.lang.CharSequence)value$; break;
    case 18: firstAccounts = (java.lang.CharSequence)value$; break;
    case 19: tradeMonths = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'auditorName' field.
   * Auditors - Auditor Name   */
  public java.lang.CharSequence getAuditorName() {
    return auditorName;
  }

  /**
   * Sets the value of the 'auditorName' field.
   * Auditors - Auditor Name   * @param value the value to set.
   */
  public void setAuditorName(java.lang.CharSequence value) {
    this.auditorName = value;
  }

  /**
   * Gets the value of the 'town' field.
   * Auditors - Town   */
  public java.lang.CharSequence getTown() {
    return town;
  }

  /**
   * Sets the value of the 'town' field.
   * Auditors - Town   * @param value the value to set.
   */
  public void setTown(java.lang.CharSequence value) {
    this.town = value;
  }

  /**
   * Gets the value of the 'remuneration' field.
   * Auditors - Remuneration   */
  public java.lang.CharSequence getRemuneration() {
    return remuneration;
  }

  /**
   * Sets the value of the 'remuneration' field.
   * Auditors - Remuneration   * @param value the value to set.
   */
  public void setRemuneration(java.lang.CharSequence value) {
    this.remuneration = value;
  }

  /**
   * Gets the value of the 'comments' field.
   * Any comments that the auditor has upon the accounts.   */
  public java.lang.CharSequence getComments() {
    return comments;
  }

  /**
   * Sets the value of the 'comments' field.
   * Any comments that the auditor has upon the accounts.   * @param value the value to set.
   */
  public void setComments(java.lang.CharSequence value) {
    this.comments = value;
  }

  /**
   * Gets the value of the 'qualified' field.
   * Auditors - Qualified   */
  public java.lang.CharSequence getQualified() {
    return qualified;
  }

  /**
   * Sets the value of the 'qualified' field.
   * Auditors - Qualified   * @param value the value to set.
   */
  public void setQualified(java.lang.CharSequence value) {
    this.qualified = value;
  }

  /**
   * Gets the value of the 'trueAndFairView' field.
   * Auditors - True and Fair View   */
  public java.lang.CharSequence getTrueAndFairView() {
    return trueAndFairView;
  }

  /**
   * Sets the value of the 'trueAndFairView' field.
   * Auditors - True and Fair View   * @param value the value to set.
   */
  public void setTrueAndFairView(java.lang.CharSequence value) {
    this.trueAndFairView = value;
  }

  /**
   * Gets the value of the 'creditorsSupport' field.
   * Auditors - Creditors Support   */
  public java.lang.CharSequence getCreditorsSupport() {
    return creditorsSupport;
  }

  /**
   * Sets the value of the 'creditorsSupport' field.
   * Auditors - Creditors Support   * @param value the value to set.
   */
  public void setCreditorsSupport(java.lang.CharSequence value) {
    this.creditorsSupport = value;
  }

  /**
   * Gets the value of the 'auditExempt' field.
   * Auditors - Audit Exempt   */
  public java.lang.CharSequence getAuditExempt() {
    return auditExempt;
  }

  /**
   * Sets the value of the 'auditExempt' field.
   * Auditors - Audit Exempt   * @param value the value to set.
   */
  public void setAuditExempt(java.lang.CharSequence value) {
    this.auditExempt = value;
  }

  /**
   * Gets the value of the 'directorsSupport' field.
   * Auditors - Directors Support   */
  public java.lang.CharSequence getDirectorsSupport() {
    return directorsSupport;
  }

  /**
   * Sets the value of the 'directorsSupport' field.
   * Auditors - Directors Support   * @param value the value to set.
   */
  public void setDirectorsSupport(java.lang.CharSequence value) {
    this.directorsSupport = value;
  }

  /**
   * Gets the value of the 'withoutQualifying' field.
   * Auditors - Without Qualifying   */
  public java.lang.CharSequence getWithoutQualifying() {
    return withoutQualifying;
  }

  /**
   * Sets the value of the 'withoutQualifying' field.
   * Auditors - Without Qualifying   * @param value the value to set.
   */
  public void setWithoutQualifying(java.lang.CharSequence value) {
    this.withoutQualifying = value;
  }

  /**
   * Gets the value of the 'goingConcernInappropriate' field.
   * Auditors - Going Concern Inappropriate   */
  public java.lang.CharSequence getGoingConcernInappropriate() {
    return goingConcernInappropriate;
  }

  /**
   * Sets the value of the 'goingConcernInappropriate' field.
   * Auditors - Going Concern Inappropriate   * @param value the value to set.
   */
  public void setGoingConcernInappropriate(java.lang.CharSequence value) {
    this.goingConcernInappropriate = value;
  }

  /**
   * Gets the value of the 'accounts_Signed' field.
   * Auditors - Accounts Signed   */
  public java.lang.CharSequence getAccountsSigned() {
    return accounts_Signed;
  }

  /**
   * Sets the value of the 'accounts_Signed' field.
   * Auditors - Accounts Signed   * @param value the value to set.
   */
  public void setAccountsSigned(java.lang.CharSequence value) {
    this.accounts_Signed = value;
  }

  /**
   * Gets the value of the 'disclaimerOfOpinion' field.
   * Auditors - Disclaimer of Opinion   */
  public java.lang.CharSequence getDisclaimerOfOpinion() {
    return disclaimerOfOpinion;
  }

  /**
   * Sets the value of the 'disclaimerOfOpinion' field.
   * Auditors - Disclaimer of Opinion   * @param value the value to set.
   */
  public void setDisclaimerOfOpinion(java.lang.CharSequence value) {
    this.disclaimerOfOpinion = value;
  }

  /**
   * Gets the value of the 'bankSupport' field.
   * Auditors - Bank Support   */
  public java.lang.CharSequence getBankSupport() {
    return bankSupport;
  }

  /**
   * Sets the value of the 'bankSupport' field.
   * Auditors - Bank Support   * @param value the value to set.
   */
  public void setBankSupport(java.lang.CharSequence value) {
    this.bankSupport = value;
  }

  /**
   * Gets the value of the 'noteNetCurrentLiab' field.
   * Auditors - Note Net Current Liab   */
  public java.lang.CharSequence getNoteNetCurrentLiab() {
    return noteNetCurrentLiab;
  }

  /**
   * Sets the value of the 'noteNetCurrentLiab' field.
   * Auditors - Note Net Current Liab   * @param value the value to set.
   */
  public void setNoteNetCurrentLiab(java.lang.CharSequence value) {
    this.noteNetCurrentLiab = value;
  }

  /**
   * Gets the value of the 'abbreviatedAccounts' field.
   * Auditors - Abbreviated Accounts   */
  public java.lang.CharSequence getAbbreviatedAccounts() {
    return abbreviatedAccounts;
  }

  /**
   * Sets the value of the 'abbreviatedAccounts' field.
   * Auditors - Abbreviated Accounts   * @param value the value to set.
   */
  public void setAbbreviatedAccounts(java.lang.CharSequence value) {
    this.abbreviatedAccounts = value;
  }

  /**
   * Gets the value of the 'seriousAccountingIrregularities' field.
   * Auditors - Serious Accounting Irregularities   */
  public java.lang.CharSequence getSeriousAccountingIrregularities() {
    return seriousAccountingIrregularities;
  }

  /**
   * Sets the value of the 'seriousAccountingIrregularities' field.
   * Auditors - Serious Accounting Irregularities   * @param value the value to set.
   */
  public void setSeriousAccountingIrregularities(java.lang.CharSequence value) {
    this.seriousAccountingIrregularities = value;
  }

  /**
   * Gets the value of the 'notes' field.
   * Auditors - Notes   */
  public java.lang.CharSequence getNotes() {
    return notes;
  }

  /**
   * Sets the value of the 'notes' field.
   * Auditors - Notes   * @param value the value to set.
   */
  public void setNotes(java.lang.CharSequence value) {
    this.notes = value;
  }

  /**
   * Gets the value of the 'firstAccounts' field.
   * Auditors - First Accounts   */
  public java.lang.CharSequence getFirstAccounts() {
    return firstAccounts;
  }

  /**
   * Sets the value of the 'firstAccounts' field.
   * Auditors - First Accounts   * @param value the value to set.
   */
  public void setFirstAccounts(java.lang.CharSequence value) {
    this.firstAccounts = value;
  }

  /**
   * Gets the value of the 'tradeMonths' field.
   * Auditors - Trade Months   */
  public java.lang.CharSequence getTradeMonths() {
    return tradeMonths;
  }

  /**
   * Sets the value of the 'tradeMonths' field.
   * Auditors - Trade Months   * @param value the value to set.
   */
  public void setTradeMonths(java.lang.CharSequence value) {
    this.tradeMonths = value;
  }

  /** Creates a new auditorsFields RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder();
  }
  
  /** Creates a new auditorsFields RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder(other);
  }
  
  /** Creates a new auditorsFields RecordBuilder by copying an existing auditorsFields instance */
  public static com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder newBuilder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields other) {
    return new com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder(other);
  }
  
  /**
   * RecordBuilder for auditorsFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<auditorsFields>
    implements org.apache.avro.data.RecordBuilder<auditorsFields> {

    private java.lang.CharSequence auditorName;
    private java.lang.CharSequence town;
    private java.lang.CharSequence remuneration;
    private java.lang.CharSequence comments;
    private java.lang.CharSequence qualified;
    private java.lang.CharSequence trueAndFairView;
    private java.lang.CharSequence creditorsSupport;
    private java.lang.CharSequence auditExempt;
    private java.lang.CharSequence directorsSupport;
    private java.lang.CharSequence withoutQualifying;
    private java.lang.CharSequence goingConcernInappropriate;
    private java.lang.CharSequence accounts_Signed;
    private java.lang.CharSequence disclaimerOfOpinion;
    private java.lang.CharSequence bankSupport;
    private java.lang.CharSequence noteNetCurrentLiab;
    private java.lang.CharSequence abbreviatedAccounts;
    private java.lang.CharSequence seriousAccountingIrregularities;
    private java.lang.CharSequence notes;
    private java.lang.CharSequence firstAccounts;
    private java.lang.CharSequence tradeMonths;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.auditorName)) {
        this.auditorName = data().deepCopy(fields()[0].schema(), other.auditorName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.town)) {
        this.town = data().deepCopy(fields()[1].schema(), other.town);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.remuneration)) {
        this.remuneration = data().deepCopy(fields()[2].schema(), other.remuneration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comments)) {
        this.comments = data().deepCopy(fields()[3].schema(), other.comments);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.qualified)) {
        this.qualified = data().deepCopy(fields()[4].schema(), other.qualified);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.trueAndFairView)) {
        this.trueAndFairView = data().deepCopy(fields()[5].schema(), other.trueAndFairView);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.creditorsSupport)) {
        this.creditorsSupport = data().deepCopy(fields()[6].schema(), other.creditorsSupport);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.auditExempt)) {
        this.auditExempt = data().deepCopy(fields()[7].schema(), other.auditExempt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.directorsSupport)) {
        this.directorsSupport = data().deepCopy(fields()[8].schema(), other.directorsSupport);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.withoutQualifying)) {
        this.withoutQualifying = data().deepCopy(fields()[9].schema(), other.withoutQualifying);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.goingConcernInappropriate)) {
        this.goingConcernInappropriate = data().deepCopy(fields()[10].schema(), other.goingConcernInappropriate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.accounts_Signed)) {
        this.accounts_Signed = data().deepCopy(fields()[11].schema(), other.accounts_Signed);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.disclaimerOfOpinion)) {
        this.disclaimerOfOpinion = data().deepCopy(fields()[12].schema(), other.disclaimerOfOpinion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bankSupport)) {
        this.bankSupport = data().deepCopy(fields()[13].schema(), other.bankSupport);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.noteNetCurrentLiab)) {
        this.noteNetCurrentLiab = data().deepCopy(fields()[14].schema(), other.noteNetCurrentLiab);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.abbreviatedAccounts)) {
        this.abbreviatedAccounts = data().deepCopy(fields()[15].schema(), other.abbreviatedAccounts);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.seriousAccountingIrregularities)) {
        this.seriousAccountingIrregularities = data().deepCopy(fields()[16].schema(), other.seriousAccountingIrregularities);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.notes)) {
        this.notes = data().deepCopy(fields()[17].schema(), other.notes);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.firstAccounts)) {
        this.firstAccounts = data().deepCopy(fields()[18].schema(), other.firstAccounts);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.tradeMonths)) {
        this.tradeMonths = data().deepCopy(fields()[19].schema(), other.tradeMonths);
        fieldSetFlags()[19] = true;
      }
    }
    
    /** Creates a Builder by copying an existing auditorsFields instance */
    private Builder(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields other) {
            super(com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.SCHEMA$);
      if (isValidValue(fields()[0], other.auditorName)) {
        this.auditorName = data().deepCopy(fields()[0].schema(), other.auditorName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.town)) {
        this.town = data().deepCopy(fields()[1].schema(), other.town);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.remuneration)) {
        this.remuneration = data().deepCopy(fields()[2].schema(), other.remuneration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comments)) {
        this.comments = data().deepCopy(fields()[3].schema(), other.comments);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.qualified)) {
        this.qualified = data().deepCopy(fields()[4].schema(), other.qualified);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.trueAndFairView)) {
        this.trueAndFairView = data().deepCopy(fields()[5].schema(), other.trueAndFairView);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.creditorsSupport)) {
        this.creditorsSupport = data().deepCopy(fields()[6].schema(), other.creditorsSupport);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.auditExempt)) {
        this.auditExempt = data().deepCopy(fields()[7].schema(), other.auditExempt);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.directorsSupport)) {
        this.directorsSupport = data().deepCopy(fields()[8].schema(), other.directorsSupport);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.withoutQualifying)) {
        this.withoutQualifying = data().deepCopy(fields()[9].schema(), other.withoutQualifying);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.goingConcernInappropriate)) {
        this.goingConcernInappropriate = data().deepCopy(fields()[10].schema(), other.goingConcernInappropriate);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.accounts_Signed)) {
        this.accounts_Signed = data().deepCopy(fields()[11].schema(), other.accounts_Signed);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.disclaimerOfOpinion)) {
        this.disclaimerOfOpinion = data().deepCopy(fields()[12].schema(), other.disclaimerOfOpinion);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bankSupport)) {
        this.bankSupport = data().deepCopy(fields()[13].schema(), other.bankSupport);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.noteNetCurrentLiab)) {
        this.noteNetCurrentLiab = data().deepCopy(fields()[14].schema(), other.noteNetCurrentLiab);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.abbreviatedAccounts)) {
        this.abbreviatedAccounts = data().deepCopy(fields()[15].schema(), other.abbreviatedAccounts);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.seriousAccountingIrregularities)) {
        this.seriousAccountingIrregularities = data().deepCopy(fields()[16].schema(), other.seriousAccountingIrregularities);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.notes)) {
        this.notes = data().deepCopy(fields()[17].schema(), other.notes);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.firstAccounts)) {
        this.firstAccounts = data().deepCopy(fields()[18].schema(), other.firstAccounts);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.tradeMonths)) {
        this.tradeMonths = data().deepCopy(fields()[19].schema(), other.tradeMonths);
        fieldSetFlags()[19] = true;
      }
    }

    /** Gets the value of the 'auditorName' field */
    public java.lang.CharSequence getAuditorName() {
      return auditorName;
    }
    
    /** Sets the value of the 'auditorName' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setAuditorName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.auditorName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'auditorName' field has been set */
    public boolean hasAuditorName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'auditorName' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearAuditorName() {
      auditorName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'town' field */
    public java.lang.CharSequence getTown() {
      return town;
    }
    
    /** Sets the value of the 'town' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setTown(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.town = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'town' field has been set */
    public boolean hasTown() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'town' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearTown() {
      town = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'remuneration' field */
    public java.lang.CharSequence getRemuneration() {
      return remuneration;
    }
    
    /** Sets the value of the 'remuneration' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setRemuneration(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.remuneration = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'remuneration' field has been set */
    public boolean hasRemuneration() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'remuneration' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearRemuneration() {
      remuneration = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'comments' field */
    public java.lang.CharSequence getComments() {
      return comments;
    }
    
    /** Sets the value of the 'comments' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setComments(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.comments = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'comments' field has been set */
    public boolean hasComments() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'comments' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearComments() {
      comments = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'qualified' field */
    public java.lang.CharSequence getQualified() {
      return qualified;
    }
    
    /** Sets the value of the 'qualified' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setQualified(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.qualified = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'qualified' field has been set */
    public boolean hasQualified() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'qualified' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearQualified() {
      qualified = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'trueAndFairView' field */
    public java.lang.CharSequence getTrueAndFairView() {
      return trueAndFairView;
    }
    
    /** Sets the value of the 'trueAndFairView' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setTrueAndFairView(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.trueAndFairView = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'trueAndFairView' field has been set */
    public boolean hasTrueAndFairView() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'trueAndFairView' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearTrueAndFairView() {
      trueAndFairView = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'creditorsSupport' field */
    public java.lang.CharSequence getCreditorsSupport() {
      return creditorsSupport;
    }
    
    /** Sets the value of the 'creditorsSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setCreditorsSupport(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.creditorsSupport = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'creditorsSupport' field has been set */
    public boolean hasCreditorsSupport() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'creditorsSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearCreditorsSupport() {
      creditorsSupport = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'auditExempt' field */
    public java.lang.CharSequence getAuditExempt() {
      return auditExempt;
    }
    
    /** Sets the value of the 'auditExempt' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setAuditExempt(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.auditExempt = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'auditExempt' field has been set */
    public boolean hasAuditExempt() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'auditExempt' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearAuditExempt() {
      auditExempt = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'directorsSupport' field */
    public java.lang.CharSequence getDirectorsSupport() {
      return directorsSupport;
    }
    
    /** Sets the value of the 'directorsSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setDirectorsSupport(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.directorsSupport = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'directorsSupport' field has been set */
    public boolean hasDirectorsSupport() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'directorsSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearDirectorsSupport() {
      directorsSupport = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'withoutQualifying' field */
    public java.lang.CharSequence getWithoutQualifying() {
      return withoutQualifying;
    }
    
    /** Sets the value of the 'withoutQualifying' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setWithoutQualifying(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.withoutQualifying = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'withoutQualifying' field has been set */
    public boolean hasWithoutQualifying() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'withoutQualifying' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearWithoutQualifying() {
      withoutQualifying = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'goingConcernInappropriate' field */
    public java.lang.CharSequence getGoingConcernInappropriate() {
      return goingConcernInappropriate;
    }
    
    /** Sets the value of the 'goingConcernInappropriate' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setGoingConcernInappropriate(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.goingConcernInappropriate = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'goingConcernInappropriate' field has been set */
    public boolean hasGoingConcernInappropriate() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'goingConcernInappropriate' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearGoingConcernInappropriate() {
      goingConcernInappropriate = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'accounts_Signed' field */
    public java.lang.CharSequence getAccountsSigned() {
      return accounts_Signed;
    }
    
    /** Sets the value of the 'accounts_Signed' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setAccountsSigned(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.accounts_Signed = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'accounts_Signed' field has been set */
    public boolean hasAccountsSigned() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'accounts_Signed' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearAccountsSigned() {
      accounts_Signed = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'disclaimerOfOpinion' field */
    public java.lang.CharSequence getDisclaimerOfOpinion() {
      return disclaimerOfOpinion;
    }
    
    /** Sets the value of the 'disclaimerOfOpinion' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setDisclaimerOfOpinion(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.disclaimerOfOpinion = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'disclaimerOfOpinion' field has been set */
    public boolean hasDisclaimerOfOpinion() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'disclaimerOfOpinion' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearDisclaimerOfOpinion() {
      disclaimerOfOpinion = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'bankSupport' field */
    public java.lang.CharSequence getBankSupport() {
      return bankSupport;
    }
    
    /** Sets the value of the 'bankSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setBankSupport(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.bankSupport = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'bankSupport' field has been set */
    public boolean hasBankSupport() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'bankSupport' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearBankSupport() {
      bankSupport = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'noteNetCurrentLiab' field */
    public java.lang.CharSequence getNoteNetCurrentLiab() {
      return noteNetCurrentLiab;
    }
    
    /** Sets the value of the 'noteNetCurrentLiab' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setNoteNetCurrentLiab(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.noteNetCurrentLiab = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'noteNetCurrentLiab' field has been set */
    public boolean hasNoteNetCurrentLiab() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'noteNetCurrentLiab' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearNoteNetCurrentLiab() {
      noteNetCurrentLiab = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'abbreviatedAccounts' field */
    public java.lang.CharSequence getAbbreviatedAccounts() {
      return abbreviatedAccounts;
    }
    
    /** Sets the value of the 'abbreviatedAccounts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setAbbreviatedAccounts(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.abbreviatedAccounts = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'abbreviatedAccounts' field has been set */
    public boolean hasAbbreviatedAccounts() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'abbreviatedAccounts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearAbbreviatedAccounts() {
      abbreviatedAccounts = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'seriousAccountingIrregularities' field */
    public java.lang.CharSequence getSeriousAccountingIrregularities() {
      return seriousAccountingIrregularities;
    }
    
    /** Sets the value of the 'seriousAccountingIrregularities' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setSeriousAccountingIrregularities(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.seriousAccountingIrregularities = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'seriousAccountingIrregularities' field has been set */
    public boolean hasSeriousAccountingIrregularities() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'seriousAccountingIrregularities' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearSeriousAccountingIrregularities() {
      seriousAccountingIrregularities = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'notes' field */
    public java.lang.CharSequence getNotes() {
      return notes;
    }
    
    /** Sets the value of the 'notes' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setNotes(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.notes = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'notes' field has been set */
    public boolean hasNotes() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'notes' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearNotes() {
      notes = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'firstAccounts' field */
    public java.lang.CharSequence getFirstAccounts() {
      return firstAccounts;
    }
    
    /** Sets the value of the 'firstAccounts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setFirstAccounts(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.firstAccounts = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'firstAccounts' field has been set */
    public boolean hasFirstAccounts() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'firstAccounts' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearFirstAccounts() {
      firstAccounts = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'tradeMonths' field */
    public java.lang.CharSequence getTradeMonths() {
      return tradeMonths;
    }
    
    /** Sets the value of the 'tradeMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder setTradeMonths(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.tradeMonths = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'tradeMonths' field has been set */
    public boolean hasTradeMonths() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'tradeMonths' field */
    public com.equifax.fabric.uk.ingestion.companyfinancialstatement.rawfields.data.auditors.auditorsFields.Builder clearTradeMonths() {
      tradeMonths = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    public auditorsFields build() {
      try {
        auditorsFields record = new auditorsFields();
        record.auditorName = fieldSetFlags()[0] ? this.auditorName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.town = fieldSetFlags()[1] ? this.town : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.remuneration = fieldSetFlags()[2] ? this.remuneration : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.comments = fieldSetFlags()[3] ? this.comments : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.qualified = fieldSetFlags()[4] ? this.qualified : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.trueAndFairView = fieldSetFlags()[5] ? this.trueAndFairView : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.creditorsSupport = fieldSetFlags()[6] ? this.creditorsSupport : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.auditExempt = fieldSetFlags()[7] ? this.auditExempt : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.directorsSupport = fieldSetFlags()[8] ? this.directorsSupport : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.withoutQualifying = fieldSetFlags()[9] ? this.withoutQualifying : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.goingConcernInappropriate = fieldSetFlags()[10] ? this.goingConcernInappropriate : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.accounts_Signed = fieldSetFlags()[11] ? this.accounts_Signed : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.disclaimerOfOpinion = fieldSetFlags()[12] ? this.disclaimerOfOpinion : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.bankSupport = fieldSetFlags()[13] ? this.bankSupport : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.noteNetCurrentLiab = fieldSetFlags()[14] ? this.noteNetCurrentLiab : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.abbreviatedAccounts = fieldSetFlags()[15] ? this.abbreviatedAccounts : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.seriousAccountingIrregularities = fieldSetFlags()[16] ? this.seriousAccountingIrregularities : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.notes = fieldSetFlags()[17] ? this.notes : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.firstAccounts = fieldSetFlags()[18] ? this.firstAccounts : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.tradeMonths = fieldSetFlags()[19] ? this.tradeMonths : (java.lang.CharSequence) defaultValue(fields()[19]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
