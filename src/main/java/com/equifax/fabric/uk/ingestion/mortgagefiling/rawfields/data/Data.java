/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data\",\"fields\":[{\"name\":\"acquired_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The company charges resource data. The date the property or undertaking was acquired on\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"assests_ceased_released\",\"type\":[\"null\",\"string\"],\"doc\":\"Cease/release information about the charge. For enumeration descriptions see assets-ceased-released section in the enumeration mappings  Possible values are:  property-ceased-to-belong  part-property-release-and-ceased-to-belong  part-property-released  part-property-ceased-to-belong  whole-property-released  multiple-filings  whole-property-released-and-ceased-to-belong\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"charge_code\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge code is a replacement of the mortgage description\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"charge_number\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge number is used to reference an individual charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"classification\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Classification\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Details of the charge classification\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of charge classication. For enumeration descriptions see classificationDesc section in the enumeration mappings  Possible values are:  charge-description  nature-of-charge\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"Classification information\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"covering_instrument_date\",\"type\":[\"null\",\"string\"],\"doc\":\"The date by which the series of debentures were created\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"created_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date the charge was created\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"delivered_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date the charge was submitted to Companies House\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"etag\",\"type\":[\"null\",\"string\"],\"doc\":\"etag\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"insolvency_cases\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InsolvencyCases\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases\",\"fields\":[{\"name\":\"case_number\",\"type\":[\"null\",\"string\"],\"doc\":\"The number of this insolvency case\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"links\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Links\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.links\",\"fields\":[{\"name\":\"case\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to the insolvency case data\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"The resources related to this insolvency case\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"transaction_id\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the insolvency filing\",\"default\":null,\"dataClassification\":\"3\"}]}}],\"doc\":\"Transactions that have been filed for the charge.\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"links\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Links\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links\",\"fields\":[{\"name\":\"self\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to the this charge data\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"The resources related to this charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"more_than_four_persons_entitled\",\"type\":[\"null\",\"string\"],\"doc\":\"Charge has more than four person entitled\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"particulars\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Particulars\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars\",\"fields\":[{\"name\":\"chargor_acting_as_bare_trustee\",\"type\":[\"null\",\"string\"],\"doc\":\"The chargor is acting as a bare trustee for the property\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_fixed_charge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a fixed charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_floating_charge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a floating charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"contains_negative_pledge\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge contains a negative pledge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Details of charge particulars\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"floating_charge_covers_all\",\"type\":[\"null\",\"string\"],\"doc\":\"The floating charge covers all the property or undertaking or the company\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of charge particulars. For enumeration descriptions see particular-description section in the enumeration mappings Possible values are:short-particulars charged-property-description charged-property-or-undertaking-description  brief-description\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"Details of charge or undertaking\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"persons_entitled\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PersonsEntitled\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the person entitled.\",\"default\":null,\"protect\":\"true\",\"dataClassification\":\"5\"}]}}],\"doc\":\"People that are entitled to the charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"resolved_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date the issue was resolved on\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"satisfied_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date the charge was satisfied\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"scottish_alterations\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ScottishAlterations\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Alteration descriptions for Scottish companies\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"has_alterations_to_order\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge has alterations to order\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"has_alterations_to_prohibitions\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge has alterations to prohibitions\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"has_alterations_to_provisions\",\"type\":[\"null\",\"string\"],\"doc\":\"The charge has provisions restricting the creation of further charges\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of alteration details for Scottish companies\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"Information about alterations for Scottish companies\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"secured_details\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SecuredDetails\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails\",\"fields\":[{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Details of the amount or obligation secured by the charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The type of secured details. For enumeration descriptions see secured-details-description section in the enumeration mappings. Possible values are:amount-secured obligations-secured\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"Information about what is secured against this charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"doc\":\"The status of the charge. For enumeration descriptions see status section in the enumeration mappings Possible values are: outstanding fully-satisfied part-satisfied satisfied\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"transactions\",\"","type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transactions\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions\",\"fields\":[{\"name\":\"delivered_on\",\"type\":[\"null\",\"string\"],\"doc\":\"The date the filing was submitted to Companies House\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"filing_type\",\"type\":[\"null\",\"string\"],\"doc\":\"Filing type which created, updated or satisfied the charge\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"insolvency_case_number\",\"type\":[\"null\",\"string\"],\"doc\":\"The insolvency case related to this filing\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"links\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Links\",\"namespace\":\"com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactionid.links\",\"fields\":[{\"name\":\"filing\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to the charge filing data\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"insolvency_case\",\"type\":[\"null\",\"string\"],\"doc\":\"Link to the insolvency case related to this filing\",\"default\":null,\"dataClassification\":\"3\"}]}],\"doc\":\"The resources related to this filing\",\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"transaction_id\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the filing\",\"default\":null,\"dataClassification\":\"3\"}]}}],\"doc\":\"Transactions that have been filed for the charge.\",\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The company charges resource data. The date the property or undertaking was acquired on */
  @Deprecated public java.lang.CharSequence acquired_on;
  /** Cease/release information about the charge. For enumeration descriptions see assets-ceased-released section in the enumeration mappings  Possible values are:  property-ceased-to-belong  part-property-release-and-ceased-to-belong  part-property-released  part-property-ceased-to-belong  whole-property-released  multiple-filings  whole-property-released-and-ceased-to-belong */
  @Deprecated public java.lang.CharSequence assests_ceased_released;
  /** The charge code is a replacement of the mortgage description */
  @Deprecated public java.lang.CharSequence charge_code;
  /** The charge number is used to reference an individual charge */
  @Deprecated public java.lang.CharSequence charge_number;
  /** Classification information */
  @Deprecated public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification classification;
  /** The date by which the series of debentures were created */
  @Deprecated public java.lang.CharSequence covering_instrument_date;
  /** The date the charge was created */
  @Deprecated public java.lang.CharSequence created_on;
  /** The date the charge was submitted to Companies House */
  @Deprecated public java.lang.CharSequence delivered_on;
  /** etag */
  @Deprecated public java.lang.CharSequence etag;
  /** The id of the charge */
  @Deprecated public java.lang.CharSequence id;
  /** Transactions that have been filed for the charge. */
  @Deprecated public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> insolvency_cases;
  /** The resources related to this charge */
  @Deprecated public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links links;
  /** Charge has more than four person entitled */
  @Deprecated public java.lang.CharSequence more_than_four_persons_entitled;
  /** Details of charge or undertaking */
  @Deprecated public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars particulars;
  /** People that are entitled to the charge */
  @Deprecated public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> persons_entitled;
  /** The date the issue was resolved on */
  @Deprecated public java.lang.CharSequence resolved_on;
  /** The date the charge was satisfied */
  @Deprecated public java.lang.CharSequence satisfied_on;
  /** Information about alterations for Scottish companies */
  @Deprecated public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations scottish_alterations;
  /** Information about what is secured against this charge */
  @Deprecated public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails secured_details;
  /** The status of the charge. For enumeration descriptions see status section in the enumeration mappings Possible values are: outstanding fully-satisfied part-satisfied satisfied */
  @Deprecated public java.lang.CharSequence status;
  /** Transactions that have been filed for the charge. */
  @Deprecated public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> transactions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Data() {}

  /**
   * All-args constructor.
   */
  public Data(java.lang.CharSequence acquired_on, java.lang.CharSequence assests_ceased_released, java.lang.CharSequence charge_code, java.lang.CharSequence charge_number, com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification classification, java.lang.CharSequence covering_instrument_date, java.lang.CharSequence created_on, java.lang.CharSequence delivered_on, java.lang.CharSequence etag, java.lang.CharSequence id, java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> insolvency_cases, com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links links, java.lang.CharSequence more_than_four_persons_entitled, com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars particulars, java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> persons_entitled, java.lang.CharSequence resolved_on, java.lang.CharSequence satisfied_on, com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations scottish_alterations, com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails secured_details, java.lang.CharSequence status, java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> transactions) {
    this.acquired_on = acquired_on;
    this.assests_ceased_released = assests_ceased_released;
    this.charge_code = charge_code;
    this.charge_number = charge_number;
    this.classification = classification;
    this.covering_instrument_date = covering_instrument_date;
    this.created_on = created_on;
    this.delivered_on = delivered_on;
    this.etag = etag;
    this.id = id;
    this.insolvency_cases = insolvency_cases;
    this.links = links;
    this.more_than_four_persons_entitled = more_than_four_persons_entitled;
    this.particulars = particulars;
    this.persons_entitled = persons_entitled;
    this.resolved_on = resolved_on;
    this.satisfied_on = satisfied_on;
    this.scottish_alterations = scottish_alterations;
    this.secured_details = secured_details;
    this.status = status;
    this.transactions = transactions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return acquired_on;
    case 1: return assests_ceased_released;
    case 2: return charge_code;
    case 3: return charge_number;
    case 4: return classification;
    case 5: return covering_instrument_date;
    case 6: return created_on;
    case 7: return delivered_on;
    case 8: return etag;
    case 9: return id;
    case 10: return insolvency_cases;
    case 11: return links;
    case 12: return more_than_four_persons_entitled;
    case 13: return particulars;
    case 14: return persons_entitled;
    case 15: return resolved_on;
    case 16: return satisfied_on;
    case 17: return scottish_alterations;
    case 18: return secured_details;
    case 19: return status;
    case 20: return transactions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: acquired_on = (java.lang.CharSequence)value$; break;
    case 1: assests_ceased_released = (java.lang.CharSequence)value$; break;
    case 2: charge_code = (java.lang.CharSequence)value$; break;
    case 3: charge_number = (java.lang.CharSequence)value$; break;
    case 4: classification = (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification)value$; break;
    case 5: covering_instrument_date = (java.lang.CharSequence)value$; break;
    case 6: created_on = (java.lang.CharSequence)value$; break;
    case 7: delivered_on = (java.lang.CharSequence)value$; break;
    case 8: etag = (java.lang.CharSequence)value$; break;
    case 9: id = (java.lang.CharSequence)value$; break;
    case 10: insolvency_cases = (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases>)value$; break;
    case 11: links = (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links)value$; break;
    case 12: more_than_four_persons_entitled = (java.lang.CharSequence)value$; break;
    case 13: particulars = (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars)value$; break;
    case 14: persons_entitled = (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled>)value$; break;
    case 15: resolved_on = (java.lang.CharSequence)value$; break;
    case 16: satisfied_on = (java.lang.CharSequence)value$; break;
    case 17: scottish_alterations = (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations)value$; break;
    case 18: secured_details = (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails)value$; break;
    case 19: status = (java.lang.CharSequence)value$; break;
    case 20: transactions = (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acquired_on' field.
   * The company charges resource data. The date the property or undertaking was acquired on   */
  public java.lang.CharSequence getAcquiredOn() {
    return acquired_on;
  }

  /**
   * Sets the value of the 'acquired_on' field.
   * The company charges resource data. The date the property or undertaking was acquired on   * @param value the value to set.
   */
  public void setAcquiredOn(java.lang.CharSequence value) {
    this.acquired_on = value;
  }

  /**
   * Gets the value of the 'assests_ceased_released' field.
   * Cease/release information about the charge. For enumeration descriptions see assets-ceased-released section in the enumeration mappings  Possible values are:  property-ceased-to-belong  part-property-release-and-ceased-to-belong  part-property-released  part-property-ceased-to-belong  whole-property-released  multiple-filings  whole-property-released-and-ceased-to-belong   */
  public java.lang.CharSequence getAssestsCeasedReleased() {
    return assests_ceased_released;
  }

  /**
   * Sets the value of the 'assests_ceased_released' field.
   * Cease/release information about the charge. For enumeration descriptions see assets-ceased-released section in the enumeration mappings  Possible values are:  property-ceased-to-belong  part-property-release-and-ceased-to-belong  part-property-released  part-property-ceased-to-belong  whole-property-released  multiple-filings  whole-property-released-and-ceased-to-belong   * @param value the value to set.
   */
  public void setAssestsCeasedReleased(java.lang.CharSequence value) {
    this.assests_ceased_released = value;
  }

  /**
   * Gets the value of the 'charge_code' field.
   * The charge code is a replacement of the mortgage description   */
  public java.lang.CharSequence getChargeCode() {
    return charge_code;
  }

  /**
   * Sets the value of the 'charge_code' field.
   * The charge code is a replacement of the mortgage description   * @param value the value to set.
   */
  public void setChargeCode(java.lang.CharSequence value) {
    this.charge_code = value;
  }

  /**
   * Gets the value of the 'charge_number' field.
   * The charge number is used to reference an individual charge   */
  public java.lang.CharSequence getChargeNumber() {
    return charge_number;
  }

  /**
   * Sets the value of the 'charge_number' field.
   * The charge number is used to reference an individual charge   * @param value the value to set.
   */
  public void setChargeNumber(java.lang.CharSequence value) {
    this.charge_number = value;
  }

  /**
   * Gets the value of the 'classification' field.
   * Classification information   */
  public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification getClassification() {
    return classification;
  }

  /**
   * Sets the value of the 'classification' field.
   * Classification information   * @param value the value to set.
   */
  public void setClassification(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification value) {
    this.classification = value;
  }

  /**
   * Gets the value of the 'covering_instrument_date' field.
   * The date by which the series of debentures were created   */
  public java.lang.CharSequence getCoveringInstrumentDate() {
    return covering_instrument_date;
  }

  /**
   * Sets the value of the 'covering_instrument_date' field.
   * The date by which the series of debentures were created   * @param value the value to set.
   */
  public void setCoveringInstrumentDate(java.lang.CharSequence value) {
    this.covering_instrument_date = value;
  }

  /**
   * Gets the value of the 'created_on' field.
   * The date the charge was created   */
  public java.lang.CharSequence getCreatedOn() {
    return created_on;
  }

  /**
   * Sets the value of the 'created_on' field.
   * The date the charge was created   * @param value the value to set.
   */
  public void setCreatedOn(java.lang.CharSequence value) {
    this.created_on = value;
  }

  /**
   * Gets the value of the 'delivered_on' field.
   * The date the charge was submitted to Companies House   */
  public java.lang.CharSequence getDeliveredOn() {
    return delivered_on;
  }

  /**
   * Sets the value of the 'delivered_on' field.
   * The date the charge was submitted to Companies House   * @param value the value to set.
   */
  public void setDeliveredOn(java.lang.CharSequence value) {
    this.delivered_on = value;
  }

  /**
   * Gets the value of the 'etag' field.
   * etag   */
  public java.lang.CharSequence getEtag() {
    return etag;
  }

  /**
   * Sets the value of the 'etag' field.
   * etag   * @param value the value to set.
   */
  public void setEtag(java.lang.CharSequence value) {
    this.etag = value;
  }

  /**
   * Gets the value of the 'id' field.
   * The id of the charge   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * The id of the charge   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'insolvency_cases' field.
   * Transactions that have been filed for the charge.   */
  public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> getInsolvencyCases() {
    return insolvency_cases;
  }

  /**
   * Sets the value of the 'insolvency_cases' field.
   * Transactions that have been filed for the charge.   * @param value the value to set.
   */
  public void setInsolvencyCases(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> value) {
    this.insolvency_cases = value;
  }

  /**
   * Gets the value of the 'links' field.
   * The resources related to this charge   */
  public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links getLinks() {
    return links;
  }

  /**
   * Sets the value of the 'links' field.
   * The resources related to this charge   * @param value the value to set.
   */
  public void setLinks(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links value) {
    this.links = value;
  }

  /**
   * Gets the value of the 'more_than_four_persons_entitled' field.
   * Charge has more than four person entitled   */
  public java.lang.CharSequence getMoreThanFourPersonsEntitled() {
    return more_than_four_persons_entitled;
  }

  /**
   * Sets the value of the 'more_than_four_persons_entitled' field.
   * Charge has more than four person entitled   * @param value the value to set.
   */
  public void setMoreThanFourPersonsEntitled(java.lang.CharSequence value) {
    this.more_than_four_persons_entitled = value;
  }

  /**
   * Gets the value of the 'particulars' field.
   * Details of charge or undertaking   */
  public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars getParticulars() {
    return particulars;
  }

  /**
   * Sets the value of the 'particulars' field.
   * Details of charge or undertaking   * @param value the value to set.
   */
  public void setParticulars(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars value) {
    this.particulars = value;
  }

  /**
   * Gets the value of the 'persons_entitled' field.
   * People that are entitled to the charge   */
  public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> getPersonsEntitled() {
    return persons_entitled;
  }

  /**
   * Sets the value of the 'persons_entitled' field.
   * People that are entitled to the charge   * @param value the value to set.
   */
  public void setPersonsEntitled(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> value) {
    this.persons_entitled = value;
  }

  /**
   * Gets the value of the 'resolved_on' field.
   * The date the issue was resolved on   */
  public java.lang.CharSequence getResolvedOn() {
    return resolved_on;
  }

  /**
   * Sets the value of the 'resolved_on' field.
   * The date the issue was resolved on   * @param value the value to set.
   */
  public void setResolvedOn(java.lang.CharSequence value) {
    this.resolved_on = value;
  }

  /**
   * Gets the value of the 'satisfied_on' field.
   * The date the charge was satisfied   */
  public java.lang.CharSequence getSatisfiedOn() {
    return satisfied_on;
  }

  /**
   * Sets the value of the 'satisfied_on' field.
   * The date the charge was satisfied   * @param value the value to set.
   */
  public void setSatisfiedOn(java.lang.CharSequence value) {
    this.satisfied_on = value;
  }

  /**
   * Gets the value of the 'scottish_alterations' field.
   * Information about alterations for Scottish companies   */
  public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations getScottishAlterations() {
    return scottish_alterations;
  }

  /**
   * Sets the value of the 'scottish_alterations' field.
   * Information about alterations for Scottish companies   * @param value the value to set.
   */
  public void setScottishAlterations(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations value) {
    this.scottish_alterations = value;
  }

  /**
   * Gets the value of the 'secured_details' field.
   * Information about what is secured against this charge   */
  public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails getSecuredDetails() {
    return secured_details;
  }

  /**
   * Sets the value of the 'secured_details' field.
   * Information about what is secured against this charge   * @param value the value to set.
   */
  public void setSecuredDetails(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails value) {
    this.secured_details = value;
  }

  /**
   * Gets the value of the 'status' field.
   * The status of the charge. For enumeration descriptions see status section in the enumeration mappings Possible values are: outstanding fully-satisfied part-satisfied satisfied   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * The status of the charge. For enumeration descriptions see status section in the enumeration mappings Possible values are: outstanding fully-satisfied part-satisfied satisfied   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'transactions' field.
   * Transactions that have been filed for the charge.   */
  public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> getTransactions() {
    return transactions;
  }

  /**
   * Sets the value of the 'transactions' field.
   * Transactions that have been filed for the charge.   * @param value the value to set.
   */
  public void setTransactions(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> value) {
    this.transactions = value;
  }

  /** Creates a new Data RecordBuilder */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder newBuilder() {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder();
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder other) {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder(other);
  }
  
  /** Creates a new Data RecordBuilder by copying an existing Data instance */
  public static com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder newBuilder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data other) {
    return new com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder(other);
  }
  
  /**
   * RecordBuilder for Data instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
    implements org.apache.avro.data.RecordBuilder<Data> {

    private java.lang.CharSequence acquired_on;
    private java.lang.CharSequence assests_ceased_released;
    private java.lang.CharSequence charge_code;
    private java.lang.CharSequence charge_number;
    private com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification classification;
    private java.lang.CharSequence covering_instrument_date;
    private java.lang.CharSequence created_on;
    private java.lang.CharSequence delivered_on;
    private java.lang.CharSequence etag;
    private java.lang.CharSequence id;
    private java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> insolvency_cases;
    private com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links links;
    private java.lang.CharSequence more_than_four_persons_entitled;
    private com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars particulars;
    private java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> persons_entitled;
    private java.lang.CharSequence resolved_on;
    private java.lang.CharSequence satisfied_on;
    private com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations scottish_alterations;
    private com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails secured_details;
    private java.lang.CharSequence status;
    private java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> transactions;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acquired_on)) {
        this.acquired_on = data().deepCopy(fields()[0].schema(), other.acquired_on);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assests_ceased_released)) {
        this.assests_ceased_released = data().deepCopy(fields()[1].schema(), other.assests_ceased_released);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charge_code)) {
        this.charge_code = data().deepCopy(fields()[2].schema(), other.charge_code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charge_number)) {
        this.charge_number = data().deepCopy(fields()[3].schema(), other.charge_number);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.classification)) {
        this.classification = data().deepCopy(fields()[4].schema(), other.classification);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.covering_instrument_date)) {
        this.covering_instrument_date = data().deepCopy(fields()[5].schema(), other.covering_instrument_date);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.created_on)) {
        this.created_on = data().deepCopy(fields()[6].schema(), other.created_on);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.delivered_on)) {
        this.delivered_on = data().deepCopy(fields()[7].schema(), other.delivered_on);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.etag)) {
        this.etag = data().deepCopy(fields()[8].schema(), other.etag);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.id)) {
        this.id = data().deepCopy(fields()[9].schema(), other.id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.insolvency_cases)) {
        this.insolvency_cases = data().deepCopy(fields()[10].schema(), other.insolvency_cases);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.links)) {
        this.links = data().deepCopy(fields()[11].schema(), other.links);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.more_than_four_persons_entitled)) {
        this.more_than_four_persons_entitled = data().deepCopy(fields()[12].schema(), other.more_than_four_persons_entitled);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.particulars)) {
        this.particulars = data().deepCopy(fields()[13].schema(), other.particulars);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.persons_entitled)) {
        this.persons_entitled = data().deepCopy(fields()[14].schema(), other.persons_entitled);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.resolved_on)) {
        this.resolved_on = data().deepCopy(fields()[15].schema(), other.resolved_on);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.satisfied_on)) {
        this.satisfied_on = data().deepCopy(fields()[16].schema(), other.satisfied_on);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.scottish_alterations)) {
        this.scottish_alterations = data().deepCopy(fields()[17].schema(), other.scottish_alterations);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.secured_details)) {
        this.secured_details = data().deepCopy(fields()[18].schema(), other.secured_details);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.status)) {
        this.status = data().deepCopy(fields()[19].schema(), other.status);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.transactions)) {
        this.transactions = data().deepCopy(fields()[20].schema(), other.transactions);
        fieldSetFlags()[20] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Data instance */
    private Builder(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data other) {
            super(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.SCHEMA$);
      if (isValidValue(fields()[0], other.acquired_on)) {
        this.acquired_on = data().deepCopy(fields()[0].schema(), other.acquired_on);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assests_ceased_released)) {
        this.assests_ceased_released = data().deepCopy(fields()[1].schema(), other.assests_ceased_released);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.charge_code)) {
        this.charge_code = data().deepCopy(fields()[2].schema(), other.charge_code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charge_number)) {
        this.charge_number = data().deepCopy(fields()[3].schema(), other.charge_number);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.classification)) {
        this.classification = data().deepCopy(fields()[4].schema(), other.classification);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.covering_instrument_date)) {
        this.covering_instrument_date = data().deepCopy(fields()[5].schema(), other.covering_instrument_date);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.created_on)) {
        this.created_on = data().deepCopy(fields()[6].schema(), other.created_on);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.delivered_on)) {
        this.delivered_on = data().deepCopy(fields()[7].schema(), other.delivered_on);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.etag)) {
        this.etag = data().deepCopy(fields()[8].schema(), other.etag);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.id)) {
        this.id = data().deepCopy(fields()[9].schema(), other.id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.insolvency_cases)) {
        this.insolvency_cases = data().deepCopy(fields()[10].schema(), other.insolvency_cases);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.links)) {
        this.links = data().deepCopy(fields()[11].schema(), other.links);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.more_than_four_persons_entitled)) {
        this.more_than_four_persons_entitled = data().deepCopy(fields()[12].schema(), other.more_than_four_persons_entitled);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.particulars)) {
        this.particulars = data().deepCopy(fields()[13].schema(), other.particulars);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.persons_entitled)) {
        this.persons_entitled = data().deepCopy(fields()[14].schema(), other.persons_entitled);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.resolved_on)) {
        this.resolved_on = data().deepCopy(fields()[15].schema(), other.resolved_on);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.satisfied_on)) {
        this.satisfied_on = data().deepCopy(fields()[16].schema(), other.satisfied_on);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.scottish_alterations)) {
        this.scottish_alterations = data().deepCopy(fields()[17].schema(), other.scottish_alterations);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.secured_details)) {
        this.secured_details = data().deepCopy(fields()[18].schema(), other.secured_details);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.status)) {
        this.status = data().deepCopy(fields()[19].schema(), other.status);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.transactions)) {
        this.transactions = data().deepCopy(fields()[20].schema(), other.transactions);
        fieldSetFlags()[20] = true;
      }
    }

    /** Gets the value of the 'acquired_on' field */
    public java.lang.CharSequence getAcquiredOn() {
      return acquired_on;
    }
    
    /** Sets the value of the 'acquired_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setAcquiredOn(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.acquired_on = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'acquired_on' field has been set */
    public boolean hasAcquiredOn() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'acquired_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearAcquiredOn() {
      acquired_on = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'assests_ceased_released' field */
    public java.lang.CharSequence getAssestsCeasedReleased() {
      return assests_ceased_released;
    }
    
    /** Sets the value of the 'assests_ceased_released' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setAssestsCeasedReleased(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.assests_ceased_released = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'assests_ceased_released' field has been set */
    public boolean hasAssestsCeasedReleased() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'assests_ceased_released' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearAssestsCeasedReleased() {
      assests_ceased_released = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'charge_code' field */
    public java.lang.CharSequence getChargeCode() {
      return charge_code;
    }
    
    /** Sets the value of the 'charge_code' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setChargeCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.charge_code = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'charge_code' field has been set */
    public boolean hasChargeCode() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'charge_code' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearChargeCode() {
      charge_code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'charge_number' field */
    public java.lang.CharSequence getChargeNumber() {
      return charge_number;
    }
    
    /** Sets the value of the 'charge_number' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setChargeNumber(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.charge_number = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'charge_number' field has been set */
    public boolean hasChargeNumber() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'charge_number' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearChargeNumber() {
      charge_number = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'classification' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification getClassification() {
      return classification;
    }
    
    /** Sets the value of the 'classification' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setClassification(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification value) {
      validate(fields()[4], value);
      this.classification = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'classification' field has been set */
    public boolean hasClassification() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'classification' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearClassification() {
      classification = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'covering_instrument_date' field */
    public java.lang.CharSequence getCoveringInstrumentDate() {
      return covering_instrument_date;
    }
    
    /** Sets the value of the 'covering_instrument_date' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setCoveringInstrumentDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.covering_instrument_date = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'covering_instrument_date' field has been set */
    public boolean hasCoveringInstrumentDate() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'covering_instrument_date' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearCoveringInstrumentDate() {
      covering_instrument_date = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'created_on' field */
    public java.lang.CharSequence getCreatedOn() {
      return created_on;
    }
    
    /** Sets the value of the 'created_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setCreatedOn(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.created_on = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'created_on' field has been set */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'created_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearCreatedOn() {
      created_on = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'delivered_on' field */
    public java.lang.CharSequence getDeliveredOn() {
      return delivered_on;
    }
    
    /** Sets the value of the 'delivered_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setDeliveredOn(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.delivered_on = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'delivered_on' field has been set */
    public boolean hasDeliveredOn() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'delivered_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearDeliveredOn() {
      delivered_on = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'etag' field */
    public java.lang.CharSequence getEtag() {
      return etag;
    }
    
    /** Sets the value of the 'etag' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setEtag(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.etag = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'etag' field has been set */
    public boolean hasEtag() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'etag' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearEtag() {
      etag = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setId(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.id = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'id' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearId() {
      id = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'insolvency_cases' field */
    public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> getInsolvencyCases() {
      return insolvency_cases;
    }
    
    /** Sets the value of the 'insolvency_cases' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setInsolvencyCases(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases> value) {
      validate(fields()[10], value);
      this.insolvency_cases = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'insolvency_cases' field has been set */
    public boolean hasInsolvencyCases() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'insolvency_cases' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearInsolvencyCases() {
      insolvency_cases = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links getLinks() {
      return links;
    }
    
    /** Sets the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setLinks(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links value) {
      validate(fields()[11], value);
      this.links = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'links' field has been set */
    public boolean hasLinks() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'links' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearLinks() {
      links = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'more_than_four_persons_entitled' field */
    public java.lang.CharSequence getMoreThanFourPersonsEntitled() {
      return more_than_four_persons_entitled;
    }
    
    /** Sets the value of the 'more_than_four_persons_entitled' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setMoreThanFourPersonsEntitled(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.more_than_four_persons_entitled = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'more_than_four_persons_entitled' field has been set */
    public boolean hasMoreThanFourPersonsEntitled() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'more_than_four_persons_entitled' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearMoreThanFourPersonsEntitled() {
      more_than_four_persons_entitled = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'particulars' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars getParticulars() {
      return particulars;
    }
    
    /** Sets the value of the 'particulars' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setParticulars(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars value) {
      validate(fields()[13], value);
      this.particulars = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'particulars' field has been set */
    public boolean hasParticulars() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'particulars' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearParticulars() {
      particulars = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'persons_entitled' field */
    public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> getPersonsEntitled() {
      return persons_entitled;
    }
    
    /** Sets the value of the 'persons_entitled' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setPersonsEntitled(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled> value) {
      validate(fields()[14], value);
      this.persons_entitled = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'persons_entitled' field has been set */
    public boolean hasPersonsEntitled() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'persons_entitled' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearPersonsEntitled() {
      persons_entitled = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'resolved_on' field */
    public java.lang.CharSequence getResolvedOn() {
      return resolved_on;
    }
    
    /** Sets the value of the 'resolved_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setResolvedOn(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.resolved_on = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'resolved_on' field has been set */
    public boolean hasResolvedOn() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'resolved_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearResolvedOn() {
      resolved_on = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'satisfied_on' field */
    public java.lang.CharSequence getSatisfiedOn() {
      return satisfied_on;
    }
    
    /** Sets the value of the 'satisfied_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setSatisfiedOn(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.satisfied_on = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'satisfied_on' field has been set */
    public boolean hasSatisfiedOn() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'satisfied_on' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearSatisfiedOn() {
      satisfied_on = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'scottish_alterations' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations getScottishAlterations() {
      return scottish_alterations;
    }
    
    /** Sets the value of the 'scottish_alterations' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setScottishAlterations(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations value) {
      validate(fields()[17], value);
      this.scottish_alterations = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'scottish_alterations' field has been set */
    public boolean hasScottishAlterations() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'scottish_alterations' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearScottishAlterations() {
      scottish_alterations = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'secured_details' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails getSecuredDetails() {
      return secured_details;
    }
    
    /** Sets the value of the 'secured_details' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setSecuredDetails(com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails value) {
      validate(fields()[18], value);
      this.secured_details = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'secured_details' field has been set */
    public boolean hasSecuredDetails() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'secured_details' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearSecuredDetails() {
      secured_details = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public java.lang.CharSequence getStatus() {
      return status;
    }
    
    /** Sets the value of the 'status' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.status = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'status' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearStatus() {
      status = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'transactions' field */
    public java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> getTransactions() {
      return transactions;
    }
    
    /** Sets the value of the 'transactions' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder setTransactions(java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions> value) {
      validate(fields()[20], value);
      this.transactions = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'transactions' field has been set */
    public boolean hasTransactions() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'transactions' field */
    public com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.Data.Builder clearTransactions() {
      transactions = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    public Data build() {
      try {
        Data record = new Data();
        record.acquired_on = fieldSetFlags()[0] ? this.acquired_on : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.assests_ceased_released = fieldSetFlags()[1] ? this.assests_ceased_released : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.charge_code = fieldSetFlags()[2] ? this.charge_code : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.charge_number = fieldSetFlags()[3] ? this.charge_number : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.classification = fieldSetFlags()[4] ? this.classification : (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.classification.Classification) defaultValue(fields()[4]);
        record.covering_instrument_date = fieldSetFlags()[5] ? this.covering_instrument_date : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.created_on = fieldSetFlags()[6] ? this.created_on : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.delivered_on = fieldSetFlags()[7] ? this.delivered_on : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.etag = fieldSetFlags()[8] ? this.etag : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.id = fieldSetFlags()[9] ? this.id : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.insolvency_cases = fieldSetFlags()[10] ? this.insolvency_cases : (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.insolvencycases.InsolvencyCases>) defaultValue(fields()[10]);
        record.links = fieldSetFlags()[11] ? this.links : (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.links.Links) defaultValue(fields()[11]);
        record.more_than_four_persons_entitled = fieldSetFlags()[12] ? this.more_than_four_persons_entitled : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.particulars = fieldSetFlags()[13] ? this.particulars : (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.particulars.Particulars) defaultValue(fields()[13]);
        record.persons_entitled = fieldSetFlags()[14] ? this.persons_entitled : (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.personsentitled.PersonsEntitled>) defaultValue(fields()[14]);
        record.resolved_on = fieldSetFlags()[15] ? this.resolved_on : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.satisfied_on = fieldSetFlags()[16] ? this.satisfied_on : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.scottish_alterations = fieldSetFlags()[17] ? this.scottish_alterations : (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.scottishalterations.ScottishAlterations) defaultValue(fields()[17]);
        record.secured_details = fieldSetFlags()[18] ? this.secured_details : (com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.secureddetails.SecuredDetails) defaultValue(fields()[18]);
        record.status = fieldSetFlags()[19] ? this.status : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.transactions = fieldSetFlags()[20] ? this.transactions : (java.util.List<com.equifax.fabric.uk.ingestion.mortgagefiling.rawfields.data.transactions.Transactions>) defaultValue(fields()[20]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
