/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.purposing.companygroupstructure;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShareholderType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShareholderType\",\"namespace\":\"com.equifax.fabric.uk.purposing.companygroupstructure\",\"fields\":[{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"IndividualorJoint\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence code;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence IndividualorJoint;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ShareholderType() {}

  /**
   * All-args constructor.
   */
  public ShareholderType(java.lang.CharSequence code, java.lang.CharSequence description, java.lang.CharSequence IndividualorJoint) {
    this.code = code;
    this.description = description;
    this.IndividualorJoint = IndividualorJoint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return description;
    case 2: return IndividualorJoint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: IndividualorJoint = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'IndividualorJoint' field.
   */
  public java.lang.CharSequence getIndividualorJoint() {
    return IndividualorJoint;
  }

  /**
   * Sets the value of the 'IndividualorJoint' field.
   * @param value the value to set.
   */
  public void setIndividualorJoint(java.lang.CharSequence value) {
    this.IndividualorJoint = value;
  }

  /** Creates a new ShareholderType RecordBuilder */
  public static com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder newBuilder() {
    return new com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder();
  }
  
  /** Creates a new ShareholderType RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder newBuilder(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder other) {
    return new com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder(other);
  }
  
  /** Creates a new ShareholderType RecordBuilder by copying an existing ShareholderType instance */
  public static com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder newBuilder(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType other) {
    return new com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder(other);
  }
  
  /**
   * RecordBuilder for ShareholderType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShareholderType>
    implements org.apache.avro.data.RecordBuilder<ShareholderType> {

    private java.lang.CharSequence code;
    private java.lang.CharSequence description;
    private java.lang.CharSequence IndividualorJoint;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IndividualorJoint)) {
        this.IndividualorJoint = data().deepCopy(fields()[2].schema(), other.IndividualorJoint);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ShareholderType instance */
    private Builder(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType other) {
            super(com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.IndividualorJoint)) {
        this.IndividualorJoint = data().deepCopy(fields()[2].schema(), other.IndividualorJoint);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'code' field */
    public java.lang.CharSequence getCode() {
      return code;
    }
    
    /** Sets the value of the 'code' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'code' field has been set */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'code' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'description' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'IndividualorJoint' field */
    public java.lang.CharSequence getIndividualorJoint() {
      return IndividualorJoint;
    }
    
    /** Sets the value of the 'IndividualorJoint' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder setIndividualorJoint(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.IndividualorJoint = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'IndividualorJoint' field has been set */
    public boolean hasIndividualorJoint() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'IndividualorJoint' field */
    public com.equifax.fabric.uk.purposing.companygroupstructure.ShareholderType.Builder clearIndividualorJoint() {
      IndividualorJoint = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ShareholderType build() {
      try {
        ShareholderType record = new ShareholderType();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.IndividualorJoint = fieldSetFlags()[2] ? this.IndividualorJoint : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
