/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PurposingHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PurposingHeader\",\"namespace\":\"com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header\",\"fields\":[{\"name\":\"runDate\",\"type\":[\"null\",\"long\"]},{\"name\":\"dataViewName\",\"type\":[\"null\",\"string\"]},{\"name\":\"dataViewVersion\",\"type\":[\"null\",\"string\"]},{\"name\":\"entityKey\",\"type\":\"string\"},{\"name\":\"additionalInfo\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long runDate;
  @Deprecated public java.lang.CharSequence dataViewName;
  @Deprecated public java.lang.CharSequence dataViewVersion;
  @Deprecated public java.lang.CharSequence entityKey;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public PurposingHeader() {}

  /**
   * All-args constructor.
   */
  public PurposingHeader(java.lang.Long runDate, java.lang.CharSequence dataViewName, java.lang.CharSequence dataViewVersion, java.lang.CharSequence entityKey, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalInfo) {
    this.runDate = runDate;
    this.dataViewName = dataViewName;
    this.dataViewVersion = dataViewVersion;
    this.entityKey = entityKey;
    this.additionalInfo = additionalInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return runDate;
    case 1: return dataViewName;
    case 2: return dataViewVersion;
    case 3: return entityKey;
    case 4: return additionalInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: runDate = (java.lang.Long)value$; break;
    case 1: dataViewName = (java.lang.CharSequence)value$; break;
    case 2: dataViewVersion = (java.lang.CharSequence)value$; break;
    case 3: entityKey = (java.lang.CharSequence)value$; break;
    case 4: additionalInfo = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'runDate' field.
   */
  public java.lang.Long getRunDate() {
    return runDate;
  }

  /**
   * Sets the value of the 'runDate' field.
   * @param value the value to set.
   */
  public void setRunDate(java.lang.Long value) {
    this.runDate = value;
  }

  /**
   * Gets the value of the 'dataViewName' field.
   */
  public java.lang.CharSequence getDataViewName() {
    return dataViewName;
  }

  /**
   * Sets the value of the 'dataViewName' field.
   * @param value the value to set.
   */
  public void setDataViewName(java.lang.CharSequence value) {
    this.dataViewName = value;
  }

  /**
   * Gets the value of the 'dataViewVersion' field.
   */
  public java.lang.CharSequence getDataViewVersion() {
    return dataViewVersion;
  }

  /**
   * Sets the value of the 'dataViewVersion' field.
   * @param value the value to set.
   */
  public void setDataViewVersion(java.lang.CharSequence value) {
    this.dataViewVersion = value;
  }

  /**
   * Gets the value of the 'entityKey' field.
   */
  public java.lang.CharSequence getEntityKey() {
    return entityKey;
  }

  /**
   * Sets the value of the 'entityKey' field.
   * @param value the value to set.
   */
  public void setEntityKey(java.lang.CharSequence value) {
    this.entityKey = value;
  }

  /**
   * Gets the value of the 'additionalInfo' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAdditionalInfo() {
    return additionalInfo;
  }

  /**
   * Sets the value of the 'additionalInfo' field.
   * @param value the value to set.
   */
  public void setAdditionalInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.additionalInfo = value;
  }

  /** Creates a new PurposingHeader RecordBuilder */
  public static com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder newBuilder() {
    return new com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder();
  }
  
  /** Creates a new PurposingHeader RecordBuilder by copying an existing Builder */
  public static com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder newBuilder(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder other) {
    return new com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder(other);
  }
  
  /** Creates a new PurposingHeader RecordBuilder by copying an existing PurposingHeader instance */
  public static com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder newBuilder(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader other) {
    return new com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder(other);
  }
  
  /**
   * RecordBuilder for PurposingHeader instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PurposingHeader>
    implements org.apache.avro.data.RecordBuilder<PurposingHeader> {

    private java.lang.Long runDate;
    private java.lang.CharSequence dataViewName;
    private java.lang.CharSequence dataViewVersion;
    private java.lang.CharSequence entityKey;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> additionalInfo;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.runDate)) {
        this.runDate = data().deepCopy(fields()[0].schema(), other.runDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataViewName)) {
        this.dataViewName = data().deepCopy(fields()[1].schema(), other.dataViewName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataViewVersion)) {
        this.dataViewVersion = data().deepCopy(fields()[2].schema(), other.dataViewVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityKey)) {
        this.entityKey = data().deepCopy(fields()[3].schema(), other.entityKey);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[4].schema(), other.additionalInfo);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing PurposingHeader instance */
    private Builder(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader other) {
            super(com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.SCHEMA$);
      if (isValidValue(fields()[0], other.runDate)) {
        this.runDate = data().deepCopy(fields()[0].schema(), other.runDate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataViewName)) {
        this.dataViewName = data().deepCopy(fields()[1].schema(), other.dataViewName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataViewVersion)) {
        this.dataViewVersion = data().deepCopy(fields()[2].schema(), other.dataViewVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.entityKey)) {
        this.entityKey = data().deepCopy(fields()[3].schema(), other.entityKey);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[4].schema(), other.additionalInfo);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'runDate' field */
    public java.lang.Long getRunDate() {
      return runDate;
    }
    
    /** Sets the value of the 'runDate' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder setRunDate(java.lang.Long value) {
      validate(fields()[0], value);
      this.runDate = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'runDate' field has been set */
    public boolean hasRunDate() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'runDate' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder clearRunDate() {
      runDate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dataViewName' field */
    public java.lang.CharSequence getDataViewName() {
      return dataViewName;
    }
    
    /** Sets the value of the 'dataViewName' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder setDataViewName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dataViewName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dataViewName' field has been set */
    public boolean hasDataViewName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dataViewName' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder clearDataViewName() {
      dataViewName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dataViewVersion' field */
    public java.lang.CharSequence getDataViewVersion() {
      return dataViewVersion;
    }
    
    /** Sets the value of the 'dataViewVersion' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder setDataViewVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dataViewVersion = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dataViewVersion' field has been set */
    public boolean hasDataViewVersion() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dataViewVersion' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder clearDataViewVersion() {
      dataViewVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'entityKey' field */
    public java.lang.CharSequence getEntityKey() {
      return entityKey;
    }
    
    /** Sets the value of the 'entityKey' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder setEntityKey(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.entityKey = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'entityKey' field has been set */
    public boolean hasEntityKey() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'entityKey' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder clearEntityKey() {
      entityKey = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'additionalInfo' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAdditionalInfo() {
      return additionalInfo;
    }
    
    /** Sets the value of the 'additionalInfo' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder setAdditionalInfo(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.additionalInfo = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'additionalInfo' field has been set */
    public boolean hasAdditionalInfo() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'additionalInfo' field */
    public com.equifax.datafabric.uk.purposing.implementation.rules.jr.contract.header.PurposingHeader.Builder clearAdditionalInfo() {
      additionalInfo = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public PurposingHeader build() {
      try {
        PurposingHeader record = new PurposingHeader();
        record.runDate = fieldSetFlags()[0] ? this.runDate : (java.lang.Long) defaultValue(fields()[0]);
        record.dataViewName = fieldSetFlags()[1] ? this.dataViewName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dataViewVersion = fieldSetFlags()[2] ? this.dataViewVersion : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.entityKey = fieldSetFlags()[3] ? this.entityKey : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.additionalInfo = fieldSetFlags()[4] ? this.additionalInfo : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
